/******************************************************************************/
/***          Generated by IBExpert 2008.11.27 08/05/2012 15:41:41          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1252;

SET CLIENTLIB 'C:\Program Files\Firebird\Firebird_2_5\bin\fbclient.dll';

CREATE DATABASE 'siap:D:\@ Fontes\svn\siap\migracao\SIAP.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1252
collation win_ptbr;




/******************************************************************************/
/***                         User Defined Functions                         ***/
/******************************************************************************/

DECLARE EXTERNAL FUNCTION ADDDAY
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addDay' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDDAY2
    TIMESTAMP,
    INTEGER,
    TIMESTAMP
    RETURNS PARAMETER 3
    ENTRY_POINT 'addDay2' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDHOUR
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addHour' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMILLISECOND
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMilliSecond' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMINUTE
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMinute' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMONTH
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMonth' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDSECOND
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addSecond' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDWEEK
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addWeek' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDYEAR
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addYear' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DIV
    INTEGER,
    INTEGER
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_div' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION DNULLIF
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'dNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DNVL
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DOW
    TIMESTAMP,
    VARCHAR(15)
    RETURNS PARAMETER 2
    ENTRY_POINT 'DOW' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DPOWER
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'power' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMP
    TIMESTAMP
    RETURNS PARAMETER 1
    ENTRY_POINT 'getExactTimestamp' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMPUTC
    TIMESTAMP
    RETURNS PARAMETER 1
    ENTRY_POINT 'getExactTimestampUTC' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64NULLIF
    NUMERIC(18,4) BY DESCRIPTOR,
    NUMERIC(18,4) BY DESCRIPTOR
    RETURNS NUMERIC(18,4) BY DESCRIPTOR
    ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64NVL
    NUMERIC(18,0) BY DESCRIPTOR,
    NUMERIC(18,0) BY DESCRIPTOR
    RETURNS NUMERIC(18,0) BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64ROUND
    NUMERIC(18,4) BY DESCRIPTOR,
    NUMERIC(18,4) BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64TRUNCATE
    NUMERIC(18,0) BY DESCRIPTOR,
    NUMERIC(18,0) BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION INULLIF
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS INTEGER BY DESCRIPTOR
    ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION INVL
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS INTEGER BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ISLEAPYEAR
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'isLeapYear' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION LTRIM
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_ltrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION "ROUND"
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION RTRIM
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_rtrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SDOW
    TIMESTAMP,
    VARCHAR(5)
    RETURNS PARAMETER 2
    ENTRY_POINT 'SDOW' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SNULLIF
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'sNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SNVL
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'sNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SRAND

    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_srand' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SRIGHT
    VARCHAR(100) BY DESCRIPTOR,
    SMALLINT,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'right' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION STRING2BLOB
    VARCHAR(300) BY DESCRIPTOR,
    BLOB
    RETURNS PARAMETER 2
    ENTRY_POINT 'string2blob' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION STRLEN
    CSTRING(32767)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_strlen' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SUBSTR
    CSTRING(255),
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_substr' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SUBSTRLEN
    CSTRING(255),
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_substrlen' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION TRUNCATE
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION UDF_FRAC
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_frac' MODULE_NAME 'ib_udf';




/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN DM_BLOB_TEXTO AS
BLOB SUB_TYPE 1 SEGMENT SIZE 8192 CHARACTER SET ASCII;

CREATE DOMAIN DM_BLOB_WORD AS
BLOB SUB_TYPE 1 SEGMENT SIZE 80;

CREATE DOMAIN DM_CEP AS
VARCHAR(8);

CREATE DOMAIN DM_CPF AS
VARCHAR(50);

CREATE DOMAIN DM_DATA AS
TIMESTAMP;

CREATE DOMAIN DM_FONE AS
VARCHAR(50);

CREATE DOMAIN DM_FOTO AS
BLOB SUB_TYPE -1 SEGMENT SIZE 8192;

CREATE DOMAIN DM_HORA AS
TIME;

CREATE DOMAIN DM_ID AS
INTEGER
NOT NULL;

CREATE DOMAIN DM_INTEGER AS
INTEGER;

CREATE DOMAIN DM_MEMO AS
VARCHAR(16386);

CREATE DOMAIN DM_NOME AS
VARCHAR(50);

CREATE DOMAIN DM_NOME_OBRIGA AS
VARCHAR(50)
NOT NULL;

CREATE DOMAIN DM_UF AS
VARCHAR(2);

CREATE DOMAIN DM_VALOR AS
DOUBLE PRECISION;

CREATE DOMAIN DM_VARCHAR1 AS
VARCHAR(1);

CREATE DOMAIN DM_VARCHAR10 AS
VARCHAR(10)
COLLATE WIN_PTBR;

CREATE DOMAIN DM_VARCHAR100 AS
VARCHAR(100);

CREATE DOMAIN DM_VARCHAR1000 AS
VARCHAR(1000);

CREATE DOMAIN DM_VARCHAR16386 AS
VARCHAR(16386)
COLLATE WIN_PTBR;

CREATE DOMAIN DM_VARCHAR200 AS
VARCHAR(200)
COLLATE WIN_PTBR;

CREATE DOMAIN DM_VARCHAR30 AS
VARCHAR(30);

CREATE DOMAIN DM_VARCHAR32000 AS
VARCHAR(32000);

CREATE DOMAIN DM_VARCHAR8192 AS
VARCHAR(8192);

CREATE DOMAIN PERMISSAO AS
VARCHAR(30);



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR COD_UP;
SET GENERATOR COD_UP TO 20;

CREATE GENERATOR FUNCIONAL;
SET GENERATOR FUNCIONAL TO 0;

CREATE GENERATOR IDACESSORIO;
SET GENERATOR IDACESSORIO TO 2;

CREATE GENERATOR IDAGENDA_ASSUNTOS;
SET GENERATOR IDAGENDA_ASSUNTOS TO 0;

CREATE GENERATOR IDAGENDA_ATENDIMENTO;
SET GENERATOR IDAGENDA_ATENDIMENTO TO 20;

CREATE GENERATOR IDAGENDA_SITUACAO;
SET GENERATOR IDAGENDA_SITUACAO TO 0;

CREATE GENERATOR IDAGENDA_TIPO_CONTATOS;
SET GENERATOR IDAGENDA_TIPO_CONTATOS TO 0;

CREATE GENERATOR IDAGENTE_EQUIPE;
SET GENERATOR IDAGENTE_EQUIPE TO 1;

CREATE GENERATOR IDARQUIVOS;
SET GENERATOR IDARQUIVOS TO 43;

CREATE GENERATOR IDARTIGO_PERFIL;
SET GENERATOR IDARTIGO_PERFIL TO 0;

CREATE GENERATOR IDATENDIEMNTO_PSICOSOCIAL;
SET GENERATOR IDATENDIEMNTO_PSICOSOCIAL TO 0;

CREATE GENERATOR IDBACKUP_SINCRONISMO_BLOB_GEN;
SET GENERATOR IDBACKUP_SINCRONISMO_BLOB_GEN TO 156098;

CREATE GENERATOR IDBACKUP_SINCRONISMO_GEN;
SET GENERATOR IDBACKUP_SINCRONISMO_GEN TO 409822;

CREATE GENERATOR IDBACKUP_VISITANTE;
SET GENERATOR IDBACKUP_VISITANTE TO 1362;

CREATE GENERATOR IDCALC_TRABALHO_ITENS;
SET GENERATOR IDCALC_TRABALHO_ITENS TO 0;

CREATE GENERATOR IDCLINICAMEDICA;
SET GENERATOR IDCLINICAMEDICA TO 0;

CREATE GENERATOR IDCODIGO_PENAL;
SET GENERATOR IDCODIGO_PENAL TO 0;

CREATE GENERATOR IDCONDENACAO_INTERNO;
SET GENERATOR IDCONDENACAO_INTERNO TO 10;

CREATE GENERATOR IDCONDICAO_INTERNO;
SET GENERATOR IDCONDICAO_INTERNO TO 0;

CREATE GENERATOR IDCONEXAO;
SET GENERATOR IDCONEXAO TO 1162;

CREATE GENERATOR IDCONTROLEPERMANENCIA;
SET GENERATOR IDCONTROLEPERMANENCIA TO 6;

CREATE GENERATOR IDCTC;
SET GENERATOR IDCTC TO 1;

CREATE GENERATOR IDCURSO;
SET GENERATOR IDCURSO TO 0;

CREATE GENERATOR IDDETRACAO;
SET GENERATOR IDDETRACAO TO 4;

CREATE GENERATOR IDDOCUMENTOS_PROCESSO;
SET GENERATOR IDDOCUMENTOS_PROCESSO TO 3;

CREATE GENERATOR IDDOCUMENTO_DIGITALIZADO;
SET GENERATOR IDDOCUMENTO_DIGITALIZADO TO 0;

CREATE GENERATOR IDENFERMAGEM;
SET GENERATOR IDENFERMAGEM TO 0;

CREATE GENERATOR IDEQUIPE;
SET GENERATOR IDEQUIPE TO 4;

CREATE GENERATOR IDESCALA_PLANTAO;
SET GENERATOR IDESCALA_PLANTAO TO 2;

CREATE GENERATOR IDEVENTO;
SET GENERATOR IDEVENTO TO 14;

CREATE GENERATOR IDFALTA_DISCIPLINAR;
SET GENERATOR IDFALTA_DISCIPLINAR TO 0;

CREATE GENERATOR IDFARMACIA;
SET GENERATOR IDFARMACIA TO 0;

CREATE GENERATOR IDFILHOS;
SET GENERATOR IDFILHOS TO 0;

CREATE GENERATOR IDFORNECEDOR;
SET GENERATOR IDFORNECEDOR TO 0;

CREATE GENERATOR IDHISTORICO_ESTUDO;
SET GENERATOR IDHISTORICO_ESTUDO TO 12;

CREATE GENERATOR IDHISTORICO_INTERNO;
SET GENERATOR IDHISTORICO_INTERNO TO 795;

CREATE GENERATOR IDHISTORICO_SERVICO_SOCIAL;
SET GENERATOR IDHISTORICO_SERVICO_SOCIAL TO 0;

CREATE GENERATOR IDHORARIO_FUNCIONARIO;
SET GENERATOR IDHORARIO_FUNCIONARIO TO 1;

CREATE GENERATOR IDINTELIGENCIA;
SET GENERATOR IDINTELIGENCIA TO 0;

CREATE GENERATOR IDINTERRUPCAO;
SET GENERATOR IDINTERRUPCAO TO 3;

CREATE GENERATOR IDITENSPATRIMONIO;
SET GENERATOR IDITENSPATRIMONIO TO 1;

CREATE GENERATOR IDLIVRO;
SET GENERATOR IDLIVRO TO 0;

CREATE GENERATOR IDLIVROINTERNO;
SET GENERATOR IDLIVROINTERNO TO 0;

CREATE GENERATOR IDLOG_SISTEMA;
SET GENERATOR IDLOG_SISTEMA TO 274033;

CREATE GENERATOR IDMOV_CAUTELA;
SET GENERATOR IDMOV_CAUTELA TO 5634;

CREATE GENERATOR IDMOV_EVENTOS;
SET GENERATOR IDMOV_EVENTOS TO 581;

CREATE GENERATOR IDMOV_OCORRENCIA;
SET GENERATOR IDMOV_OCORRENCIA TO 5;

CREATE GENERATOR IDMOV_OCORRENCIA_ADV;
SET GENERATOR IDMOV_OCORRENCIA_ADV TO 0;

CREATE GENERATOR IDMOV_OCORRENCIA_FUNC;
SET GENERATOR IDMOV_OCORRENCIA_FUNC TO 0;

CREATE GENERATOR IDMOV_OCORRENCIA_INT;
SET GENERATOR IDMOV_OCORRENCIA_INT TO 0;

CREATE GENERATOR IDMOV_OCORRENCIA_QUEST;
SET GENERATOR IDMOV_OCORRENCIA_QUEST TO 10;

CREATE GENERATOR IDMOV_OCORRENCIA_VIS;
SET GENERATOR IDMOV_OCORRENCIA_VIS TO 0;

CREATE GENERATOR IDMOV_PROCEDIMENTOS;
SET GENERATOR IDMOV_PROCEDIMENTOS TO 3;

CREATE GENERATOR IDMOV_PROCEDIMENTOS_ADV;
SET GENERATOR IDMOV_PROCEDIMENTOS_ADV TO 0;

CREATE GENERATOR IDMOV_PROCEDIMENTOS_FUNC;
SET GENERATOR IDMOV_PROCEDIMENTOS_FUNC TO 0;

CREATE GENERATOR IDMOV_PROCEDIMENTOS_INT;
SET GENERATOR IDMOV_PROCEDIMENTOS_INT TO 0;

CREATE GENERATOR IDMOV_PROCEDIMENTOS_VIS;
SET GENERATOR IDMOV_PROCEDIMENTOS_VIS TO 0;

CREATE GENERATOR IDOCORRENCIA;
SET GENERATOR IDOCORRENCIA TO 2;

CREATE GENERATOR IDOCORRENCIA_PROCEDIMENTOS;
SET GENERATOR IDOCORRENCIA_PROCEDIMENTOS TO 1;

CREATE GENERATOR IDODONTOLOGIA;
SET GENERATOR IDODONTOLOGIA TO 0;

CREATE GENERATOR IDPADRAO;
SET GENERATOR IDPADRAO TO 0;

CREATE GENERATOR IDPATRIMONIO;
SET GENERATOR IDPATRIMONIO TO 3;

CREATE GENERATOR IDPEDAGOGIA;
SET GENERATOR IDPEDAGOGIA TO 0;

CREATE GENERATOR IDPERMANENCIA_SCANER;
SET GENERATOR IDPERMANENCIA_SCANER TO 3;

CREATE GENERATOR IDPLANILHA_DINAMICA;
SET GENERATOR IDPLANILHA_DINAMICA TO 2;

CREATE GENERATOR IDPOSTO_TRABALHO;
SET GENERATOR IDPOSTO_TRABALHO TO 12;

CREATE GENERATOR IDPROCEDIMENTOS;
SET GENERATOR IDPROCEDIMENTOS TO 1;

CREATE GENERATOR IDPROCEDIMENTO_POSTO;
SET GENERATOR IDPROCEDIMENTO_POSTO TO 1;

CREATE GENERATOR IDPSICOLOGIA;
SET GENERATOR IDPSICOLOGIA TO 0;

CREATE GENERATOR IDPSIQUIATRIA;
SET GENERATOR IDPSIQUIATRIA TO 0;

CREATE GENERATOR IDQUESTIONAMENTO;
SET GENERATOR IDQUESTIONAMENTO TO 3;

CREATE GENERATOR IDREMEDIO;
SET GENERATOR IDREMEDIO TO 0;

CREATE GENERATOR IDREMEDIOINTERNO;
SET GENERATOR IDREMEDIOINTERNO TO 0;

CREATE GENERATOR IDREMICAO;
SET GENERATOR IDREMICAO TO 3;

CREATE GENERATOR IDREPLICACAO_RECEBIDA;
SET GENERATOR IDREPLICACAO_RECEBIDA TO 28400;

CREATE GENERATOR IDSEREIESTUDO;
SET GENERATOR IDSEREIESTUDO TO 0;

CREATE GENERATOR IDSINCRONISMO_BLOB_GEN;
SET GENERATOR IDSINCRONISMO_BLOB_GEN TO 235399;

CREATE GENERATOR IDSINCRONISMO_CONTROLE_GEN;
SET GENERATOR IDSINCRONISMO_CONTROLE_GEN TO 5;

CREATE GENERATOR IDSINCRONISMO_GEN;
SET GENERATOR IDSINCRONISMO_GEN TO 730735;

CREATE GENERATOR IDSUB_EVENTO;
SET GENERATOR IDSUB_EVENTO TO 9;

CREATE GENERATOR IDTERAPIAOCUPACIONAL;
SET GENERATOR IDTERAPIAOCUPACIONAL TO 0;

CREATE GENERATOR IDTIPO_DOCUMENTO;
SET GENERATOR IDTIPO_DOCUMENTO TO 0;

CREATE GENERATOR IDTIPO_PATRIMONIO;
SET GENERATOR IDTIPO_PATRIMONIO TO 0;

CREATE GENERATOR IDVINCARTIGO;
SET GENERATOR IDVINCARTIGO TO 8;

CREATE GENERATOR IDVINCARTIGO_PERFIL;
SET GENERATOR IDVINCARTIGO_PERFIL TO 0;

CREATE GENERATOR IDVINCFALTA_DISCIPLINAR;
SET GENERATOR IDVINCFALTA_DISCIPLINAR TO 0;

CREATE GENERATOR ID_ADVOGADO;
SET GENERATOR ID_ADVOGADO TO 0;

CREATE GENERATOR ID_ADVOGADOS_INTERNOS;
SET GENERATOR ID_ADVOGADOS_INTERNOS TO 1;

CREATE GENERATOR ID_AREA_SERVIDOR;
SET GENERATOR ID_AREA_SERVIDOR TO 0;

CREATE GENERATOR ID_ARTIGO;
SET GENERATOR ID_ARTIGO TO 362;

CREATE GENERATOR ID_CALC_SETOR_TRABALHO;
SET GENERATOR ID_CALC_SETOR_TRABALHO TO 0;

CREATE GENERATOR ID_CELA;
SET GENERATOR ID_CELA TO 1;

CREATE GENERATOR ID_CIDADE;
SET GENERATOR ID_CIDADE TO 0;

CREATE GENERATOR ID_DESTINO;
SET GENERATOR ID_DESTINO TO 38;

CREATE GENERATOR ID_ESCOLARIDADE;
SET GENERATOR ID_ESCOLARIDADE TO 0;

CREATE GENERATOR ID_ESTADO;
SET GENERATOR ID_ESTADO TO 0;

CREATE GENERATOR ID_FUNCAO_FUNCIONARIO;
SET GENERATOR ID_FUNCAO_FUNCIONARIO TO 0;

CREATE GENERATOR ID_FUNCAO_INTERNO;
SET GENERATOR ID_FUNCAO_INTERNO TO 0;

CREATE GENERATOR ID_FUNCIONARIO;
SET GENERATOR ID_FUNCIONARIO TO 103;

CREATE GENERATOR ID_GALERIA;
SET GENERATOR ID_GALERIA TO 2;

CREATE GENERATOR ID_GRAU_PARENTESCO;
SET GENERATOR ID_GRAU_PARENTESCO TO 0;

CREATE GENERATOR ID_HISTORICO_VISITANTE;
SET GENERATOR ID_HISTORICO_VISITANTE TO 0;

CREATE GENERATOR ID_INTERNO;
SET GENERATOR ID_INTERNO TO 435;

CREATE GENERATOR ID_MENORES;
SET GENERATOR ID_MENORES TO 3;

CREATE GENERATOR ID_MOV_DIARIO_VISITANTE;
SET GENERATOR ID_MOV_DIARIO_VISITANTE TO 4;

CREATE GENERATOR ID_MOV_INTERNO;
SET GENERATOR ID_MOV_INTERNO TO 14754;

CREATE GENERATOR ID_MOV_TRABALHO;
SET GENERATOR ID_MOV_TRABALHO TO 0;

CREATE GENERATOR ID_NACIONALIDADE;
SET GENERATOR ID_NACIONALIDADE TO 0;

CREATE GENERATOR ID_NATURALIDADE;
SET GENERATOR ID_NATURALIDADE TO 0;

CREATE GENERATOR ID_PAVILHAO;
SET GENERATOR ID_PAVILHAO TO 1;

CREATE GENERATOR ID_PROCEDENCIA;
SET GENERATOR ID_PROCEDENCIA TO 14;

CREATE GENERATOR ID_PROCESSO;
SET GENERATOR ID_PROCESSO TO 14;

CREATE GENERATOR ID_PROFFISSAO;
SET GENERATOR ID_PROFFISSAO TO 10;

CREATE GENERATOR ID_RACA;
SET GENERATOR ID_RACA TO 0;

CREATE GENERATOR ID_SETOR_TRABALHO;
SET GENERATOR ID_SETOR_TRABALHO TO 0;

CREATE GENERATOR ID_SOLARIO;
SET GENERATOR ID_SOLARIO TO 1;

CREATE GENERATOR ID_TRABALHO;
SET GENERATOR ID_TRABALHO TO 0;

CREATE GENERATOR ID_UNIDADE_PENAL;
SET GENERATOR ID_UNIDADE_PENAL TO 3;

CREATE GENERATOR ID_VISITANTE;
SET GENERATOR ID_VISITANTE TO 10;

CREATE GENERATOR ID_VISITANTE_INTERNO;
SET GENERATOR ID_VISITANTE_INTERNO TO 5;

CREATE GENERATOR NEW_GENERATOR;
SET GENERATOR NEW_GENERATOR TO 0;

CREATE GENERATOR NUMERO_CAUTELA;
SET GENERATOR NUMERO_CAUTELA TO 5634;

CREATE GENERATOR ORDENAR_VISITA;
SET GENERATOR ORDENAR_VISITA TO 0;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION MESSAGEM_DIVERSAS 'MENSAGEM';



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE CALCULA_DIAS_UTEIS (
    DAT_INI DATE,
    DAT_FIM DATE,
    IGNORAR VARCHAR(10))
RETURNS (
    UTEIS INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SET_CONTEXT (
    ID_FUNCIONARIO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SET_CONTEXT_CONEXAO (
    IDCONEXAO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SOUNDEX (
    STR VARCHAR(100))
RETURNS (
    RET VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SOUNDEX_GRUPO (
    CARACTER CHAR(1))
RETURNS (
    RESULT CHAR(1))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SOUNDEX_PALAVRA (
    STR VARCHAR(100))
RETURNS (
    RET VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_AGENDA_ESCALA_EQUIPE (
    IDEQUIPE INTEGER,
    DATA_PLANTAO TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_BUSCA_TROCA (
    VALOR_CAMPO VARCHAR(32000),
    BUSCA VARCHAR(100),
    TROCA VARCHAR(100))
RETURNS (
    V VARCHAR(32000))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_CALCULA_FALTA_DISCIPLINAR (
    TEMPO_REABILITACAO INTEGER,
    DAT_INCIDENCIA DATE)
RETURNS (
    DAT_REABILITACAO DATE)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_CALCULO_EXECUCAO_PENAL
RETURNS (
    TOTAL_PENA_ANO INTEGER,
    TOTAL_PENA_MES INTEGER,
    TOTAL_PENA_DIA INTEGER,
    DATA_FATO_CONDENACAO TIMESTAMP,
    DATA_INICIO_CONDENACAO TIMESTAMP,
    PROGRESSAO_REGIME VARCHAR(1),
    LIVRAMENTO_CONDICIONAL VARCHAR(1))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_COMUNICACAO_TODAS
RETURNS (
    SIGLA VARCHAR(20))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_COPY (
    VALOR VARCHAR(32000),
    CARAC_INI INTEGER,
    QTDE INTEGER)
RETURNS (
    RESULTADO_COPY VARCHAR(32000))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_CRIAR_TRIGGERS_LOGS (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    TXT VARCHAR(32700))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_ENVIAR_TODOS_BLOB
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GERA_CONSTRAINT
RETURNS (
    DELETA VARCHAR(276),
    CRIA VARCHAR(915))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_SCRIPT_BLOB_TRIGGER (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_SCRIPT_INSERT_OLD (
    TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_SCRIPT_INSERT_TRIGGER (
    TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_SCRIPT_UPDATE_TRIGGER (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_TRIGGERS_LOGS
RETURNS (
    RETORNO TYPE OF DM_BLOB_TEXTO)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_TRIGGERS_REPLICACAO
RETURNS (
    RETORNO TYPE OF DM_BLOB_TEXTO)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GERA_TRIGGERS_TABELA (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    TXT VARCHAR(32700))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_INSERT_SINC_BLOB (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31),
    IDSINCRONISMO_CONTROLE INTEGER)
RETURNS (
    RETORNO VARCHAR(32500))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_LIMPA_CHAR (
    CAMPO VARCHAR(16386))
RETURNS (
    RETORNO VARCHAR(16386))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_LIMPA_SCRIPT (
    VSCRIPT VARCHAR(32000))
RETURNS (
    TEMP_VSCRIPT VARCHAR(32000))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_LISTA_MV_PESSOA_PROC (
    IDMOV_PROCEDIMENTOS INTEGER)
RETURNS (
    NOME VARCHAR(1000))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_MIGRA_CONFERE
RETURNS (
    NOME VARCHAR(100),
    PAVILHAO VARCHAR(50),
    IDPAVILHAO INTEGER,
    GALERIA VARCHAR(50),
    IDGALERIA INTEGER,
    SOLARIO VARCHAR(50),
    IDSOLARIO INTEGER,
    CELA VARCHAR(50),
    IDCELA INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_MIGRA_CONFERE_2
RETURNS (
    CONCATENATION VARCHAR(169))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_MIGRA_CONFERE_3
RETURNS (
    IDCELA INTEGER,
    IDPAVILHAO INTEGER,
    IDGALERIA INTEGER,
    IDSOLARIO INTEGER,
    CELA VARCHAR(50),
    NOME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_MIGRA_CONFERE_4
RETURNS (
    ID_INTERNO INTEGER,
    NOME_INTERNO VARCHAR(50),
    RGI VARCHAR(30),
    IDPROFISSAO INTEGER,
    IDGALERIA INTEGER,
    IDPAVILHAO INTEGER,
    IDSOLARIO INTEGER,
    IDCELA INTEGER,
    DATA_ENTRADA TIMESTAMP,
    MAE VARCHAR(50),
    PAI VARCHAR(50),
    IDNATURALIDADE INTEGER,
    IDNACIONALIDADE INTEGER,
    IDRACA INTEGER,
    IDESCOLARIDADE INTEGER,
    ENDERECO VARCHAR(50),
    NUMERO VARCHAR(10),
    BAIRRO VARCHAR(30),
    COMPLEMENETO VARCHAR(30),
    CEP VARCHAR(8),
    IDCIDADE INTEGER,
    FONE VARCHAR(10),
    CONTATO VARCHAR(50),
    RELIGIAO VARCHAR(50),
    IDADVOGADO INTEGER,
    ID_PROCEDENCIA INTEGER,
    CONDENACAO VARCHAR(100),
    DATA_PRISAO TIMESTAMP,
    HISTORICO VARCHAR(16386),
    ST VARCHAR(8),
    SEXO VARCHAR(1),
    ID_UP INTEGER,
    IDCONDICAO_INTERNO INTEGER,
    IDDESTINO INTEGER,
    ID_FUNCIONARIO INTEGER,
    STATUS_ISOLAMENTO VARCHAR(30),
    IDSETOR_TRABALHO INTEGER,
    DATA_SETOR TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_ORDENA_VISITANTE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_RASTREAR_MOVIMENTACAO
RETURNS (
    TOTAL_DIAS_PRISAO INTEGER,
    DATA_ENTRADA TIMESTAMP,
    DATA TIMESTAMP,
    ID_INTERNO INTEGER,
    NOME_INTERNO VARCHAR(50),
    PAVILHAO VARCHAR(50),
    GALERIA VARCHAR(50),
    SOLARIO VARCHAR(50),
    CELA VARCHAR(50),
    IDCELA INTEGER,
    ST_INTERNO VARCHAR(1),
    ULTIMA_DATA TIMESTAMP,
    DIAS_CELA INTEGER,
    TOTAL_DIAS INTEGER,
    ANO_PRESO INTEGER,
    MESES_PRESO INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_RASTREAR_PROCEDIMENTOS (
    IDMOV INTEGER)
RETURNS (
    NIVEL VARCHAR(1),
    TEM_OCORRENCIA INTEGER,
    DESCRICAO_PROCEDIMENTO VARCHAR(100),
    DESCRICAO_OCORRENCIA VARCHAR(200),
    IDMOV_PROCEDIMENTOS INTEGER,
    IDMOV_PROCEDIMENTOS_PRINCIPAL INTEGER,
    IDMOV_OCORRENCIA INTEGER,
    IDMOV_BUSCA INTEGER,
    HORA TIME)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_RELACIONAMENTO_INTERNO (
    ID_INTERNO INTEGER,
    INTERNO_IGNORAR VARCHAR(16386))
RETURNS (
    IDORIGEM VARCHAR(12),
    NOME_ORIGEM VARCHAR(50),
    IDDESTINO VARCHAR(12),
    NOME_DESTINO VARCHAR(100),
    DESCRICAO VARCHAR(16386),
    NIVEL VARCHAR(1))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_REPLICACAO_ENVIO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_REPLICACAO_ENVIO_TUDO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_REPLICACAO_RECEBIMENTO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_REPLICACAO_RECEBIMENTO_TUDO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_RETORNA_TEXTO (
    IPTEXT VARCHAR(32000),
    IPSPLITCHARS VARCHAR(20))
RETURNS (
    OPTEXT VARCHAR(32000))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_SINCRONISMO_OUTRA_UP (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
RETURNS (
    IDSINCRONISMO INTEGER,
    SCRIPT VARCHAR(8192))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_SINCRONIZA_GENERATOR
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_TESTE_COMUNICACAO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
RETURNS (
    IDSINCRONISMO_CONTROLE INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_TESTE_REPLICACAO
RETURNS (
    MENSAGEM VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_TOTALIZAR_INTERNO_UP
RETURNS (
    CONEXAO VARCHAR(200),
    ID_UP INTEGER,
    TOTAL INTEGER)
AS
BEGIN
  SUSPEND;
END^



SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ACESSORIOS (
    ID_ACESSORIO         DM_ID,
    DESCRICAO_ACESSORIO  DM_VARCHAR100
);

CREATE TABLE ADVOGADO (
    ID_ADVOGADO  DM_ID,
    ADVOGADO     DM_NOME,
    OAB          DM_VARCHAR30,
    FOTO         DM_FOTO,
    ENDERECO     DM_VARCHAR100,
    CEP          DM_VARCHAR10 COLLATE WIN_PTBR,
    BAIRRO       DM_NOME,
    ID_CIDADE    DM_INTEGER,
    EMAIL        DM_VARCHAR100,
    CPF          DM_VARCHAR30,
    RG           DM_VARCHAR30,
    FONE         DM_VARCHAR30,
    CELULAR      DM_VARCHAR30,
    OBS          DM_VARCHAR1000
);

CREATE TABLE ADVOGADOS_INTERNOS (
    ID_ADVOGADOS_INTERNOS  DM_ID,
    ID_ADVOGADO            DM_INTEGER,
    ID_INTERNO             DM_INTEGER,
    OBSADVOGADO_INTERNO    DM_VARCHAR8192
);

CREATE TABLE AGENDA_ASSUNTOS (
    IDAGENDA_ASSUNTOS  DM_ID,
    DESCRICAO          DM_VARCHAR100
);

CREATE TABLE AGENDA_ATENDIMENTO (
    IDAGENDA_ATENDIMENTO    DM_ID,
    ID_UP                   DM_INTEGER,
    ID_FUNCIONARIO          DM_INTEGER,
    ID_INTERNO              DM_INTEGER,
    ID_VISITANTE            DM_INTEGER,
    ID_ADVOGADO             DM_INTEGER,
    IDAGENDA_TIPO_CONTATOS  DM_INTEGER,
    IDAGENDA_ASSUNTOS       DM_INTEGER,
    IDAGENDA_SITUACAO       DM_INTEGER,
    DATA_LANCAMENTO         DM_DATA,
    ID_FUNCIONARIO_AGENDA   DM_INTEGER,
    DATA_AGENDA             DM_DATA,
    HORA_AGENDA             DM_HORA,
    OBSERVACAO              DM_VARCHAR16386,
    SETOR                   DM_NOME,
    DATA_AUDIENCIA          DM_DATA,
    HORA_AUDIENCIA          DM_HORA,
    VARA_AUDIENCIA          DM_VARCHAR200,
    LOCAL_AUDIENCIA         DM_VARCHAR200,
    STATUS                  DM_VARCHAR1
);

CREATE TABLE AGENDA_SITUACAO (
    IDAGENDA_SITUACAO  DM_ID,
    DESCRICAO          DM_VARCHAR100
);

CREATE TABLE AGENDA_TIPO_CONTATOS (
    IDAGENDA_TIPO_CONTATOS  DM_ID,
    DESCRICAO               DM_VARCHAR100
);

CREATE TABLE AGENTE_EQUIPE (
    IDAGENTE_EQUIPE     DM_ID,
    IDEQUIPE            DM_ID,
    IDFUNCIONARIO       DM_ID,
    IDPOSTO_TRABALHO    DM_ID,
    ST                  DM_VARCHAR1,
    IDPOSTO_ROTATIVO_1  DM_INTEGER,
    IDPOSTO_ROTATIVO_2  DM_INTEGER,
    IDPOSTO_ROTATIVO_3  DM_INTEGER,
    IDPOSTO_ROTATIVO_4  DM_INTEGER,
    IDPOSTO_ROTATIVO_5  DM_INTEGER,
    IDPOSTO_ROTATIVO_6  DM_INTEGER,
    OBSERVACOES         DM_VARCHAR1000
);

CREATE TABLE AREA_SERVIDOR (
    ID_AREA        DM_ID,
    AREA_SERVIDOR  DM_NOME
);

CREATE TABLE ARQUIVOS (
    IDARQUIVOS      DM_ID,
    DATA            DM_DATA,
    DESCRICAO       DM_VARCHAR100,
    ID_INTERNO      DM_INTEGER,
    ARQUIVO         DM_FOTO,
    ID_FUNCIONARIO  DM_INTEGER,
    HISTORICO       DM_VARCHAR1000
);

CREATE TABLE ARTIGO (
    ID_ARTIGO  DM_ID,
    ARTIGO     DM_VARCHAR8192
);

CREATE TABLE ARTIGO_PERFIL (
    ID_ARTIGO_PERFIL  DM_ID,
    ARTIGO_PERFIL     DM_VARCHAR8192
);

CREATE TABLE ATENDIMENTO_PSICOSSOCIAL (
    ID_ATENDIMENTO         DM_ID,
    IDINTERNO              DM_INTEGER,
    DATAATENDIMENTO        DM_DATA,
    IDTECNICO              DM_INTEGER,
    DESCRICAO_ATENDIMENTO  DM_MEMO
);

CREATE TABLE BACKUP_SINCRONISMO (
    IDBACKUP_SINCRONISMO    DM_ID,
    IDSINCRONISMO           DM_ID,
    IDSINCRONISMO_CONTROLE  DM_ID,
    SCRIPT                  DM_VARCHAR8192,
    STATUS                  DM_VARCHAR1,
    ORDEM                   DM_INTEGER,
    DATA_HORA               DM_DATA,
    RETORNO                 DM_VARCHAR1,
    ERRO                    DM_VARCHAR32000,
    TRANSACAO               DM_NOME,
    USUARIO                 DM_NOME
);

CREATE TABLE BACKUP_SINCRONISMO_BLOB (
    IDBACKUP_SINCRONISMO_BLOB  DM_ID,
    DATA_HORA_BACKUP           DM_DATA NOT NULL,
    IDSINCRONISMO_BLOB         DM_ID,
    IDSINCRONISMO_CONTROLE     DM_ID,
    DATA_HORA                  DM_DATA NOT NULL,
    USUARIO                    DM_NOME,
    TABELA                     DM_NOME,
    CAMPO                      DM_NOME,
    NOME_PK                    DM_NOME,
    VALOR_PK                   DM_NOME_OBRIGA
);

CREATE TABLE BACKUP_VISITANTE (
    IDBACKUP_VISITANTE  DM_ID,
    DATA_HORA           DM_DATA,
    ID_VISITANTE        DM_ID,
    VISITANTE           DM_NOME,
    ID_GRAU_PARENTESCO  DM_INTEGER,
    ID_INTERNO          DM_INTEGER,
    NUMERO_CARTEIRINHA  DM_VARCHAR30,
    CPF                 DM_CPF,
    RG                  DM_VARCHAR30,
    ORGAO_EXPEDIDOR     DM_VARCHAR30,
    SEXO                DM_FONE,
    DATA_CADASTRO       DM_DATA,
    STATUS              DM_VARCHAR1,
    DATA_ULT_VISITA     DM_DATA,
    FOTO                DM_FOTO,
    TIPO_REGISTRO       DM_VARCHAR1,
    MOTIVO_INATIVO      DM_VARCHAR200
);

CREATE TABLE CALC_SETOR_TRABALHO (
    IDCALC_SETOR_TRABALHO  DM_ID,
    ID_INTERNO             DM_INTEGER,
    DATA_INICIAL           DM_DATA,
    DATA_FINAL             DM_DATA,
    QTDEDIASTRABALHADO     DM_INTEGER,
    DIANAOREMIDO           DM_INTEGER,
    QTDEDIASREMIDO         DM_INTEGER,
    DIASTRABALHADOEXTENSO  DM_VARCHAR100,
    DIASREMIDOEXTENSO      DM_VARCHAR100,
    TOTALDIASTRABALHO      DM_INTEGER,
    TOTALDIASREMIDO        DM_INTEGER,
    ID_SETOR_TRABALHO      DM_INTEGER
);

CREATE TABLE CALC_TRABALHO_ITENS (
    ID_CALC_TRABALHO_ITENS  DM_ID,
    ID_CALC_TRABALHO        DM_INTEGER,
    DATA_INICIAL            DM_DATA,
    DATA_FINAL              DM_DATA,
    ID_SETOR_TRABALHO       DM_INTEGER,
    DIASTRABALHADO          DM_INTEGER,
    DIASREMIDO              DM_INTEGER
);

CREATE TABLE CELA (
    ID_CELA            DM_ID,
    CELA               DM_NOME,
    IDSOLARIO          DM_INTEGER,
    IDPAVILHAO         DM_INTEGER,
    IDGALERIA          DM_INTEGER,
    ISOLAMENTO         DM_VARCHAR1,
    LIMITE_POR_CELA    DM_INTEGER,
    EM_MANUTENCAO      DM_VARCHAR1,
    MOTIVO_MANUTENCAO  DM_VARCHAR100
);

CREATE TABLE CIDADE (
    ID_CIDADE         DM_ID,
    CIDADE            DM_VARCHAR100,
    UF                DM_UF,
    ID_ESTADO         DM_INTEGER,
    ID_NACIONALIDADE  DM_INTEGER
);

CREATE TABLE CODIGO_PENAL (
    IDCODIGO_PENAL    DM_ID,
    ARTIGO            DM_NOME,
    DESCRICAO_ARTIGO  DM_MEMO
);

CREATE TABLE CONDENACAO_INTERNO (
    IDCONDENACAO_INTERNO  DM_ID,
    IDINTERNO             DM_ID,
    ARTIGO                DM_VARCHAR100,
    OBSERVACAO            DM_VARCHAR100,
    TOTAL_PENA_ANO        DM_INTEGER,
    TOTAL_PENA_MES        DM_INTEGER,
    TOTAL_PENA_DIA        DM_INTEGER,
    IDCOMARCA             DM_INTEGER,
    VARA                  DM_VARCHAR100,
    PRISAO                DM_VARCHAR100,
    REU                   DM_VARCHAR100,
    NPROCESSO             DM_VARCHAR100,
    GR                    DM_VARCHAR100,
    SITUACAOJURIDICA      DM_VARCHAR100,
    TIPOJUSTICA           DM_VARCHAR30
);

CREATE TABLE CONDICAO_INTERNO (
    IDCONDICAO_INTERNO  DM_ID,
    DESCRICAO           DM_VARCHAR100
);

CREATE TABLE CONEXAO (
    IDCONEXAO          DM_ID,
    ID_FUNCIOANRIO     DM_INTEGER,
    DATA_HORA_ENTRADA  DM_DATA,
    DATA_HORA_SAIDA    DM_DATA,
    IP_MAQUINA         DM_VARCHAR100,
    TELA_MOMENTO       DM_VARCHAR100
);

CREATE TABLE CONFERE (
    IDCONFERE                 DM_INTEGER,
    NOME                      DM_VARCHAR100,
    PAVILHAO                  DM_NOME,
    SOLARIO                   DM_NOME,
    CELA                      DM_NOME,
    GALERIA                   DM_NOME,
    DATA                      DM_DATA,
    NOME_PAI                  DM_NOME,
    NOME_MAE                  DM_NOME,
    HISTORICO                 DM_VARCHAR16386,
    CAMPO1                    DM_NOME,
    STATUS                    DM_VARCHAR1,
    LOCAL_SAIDA               DM_VARCHAR1000,
    PROFISSAO                 DM_NOME,
    ARTIGO                    DM_NOME,
    CONDENACAO                DM_NOME,
    DATA_PRISAO               DM_DATA,
    DATA_SETOR                DM_DATA,
    TOTAL_DIAS_MES            DM_INTEGER,
    OBSERVACAO                DM_VARCHAR16386,
    IDSETOR                   DM_INTEGER,
    FUNCAO_SETOR              DM_NOME,
    DATA_EXCLUSAO             DM_DATA,
    DATA_NASCIMENTO           DM_DATA,
    NATURALIDADE              DM_NOME,
    NASCIMENTO                DM_NOME,
    ENDERECO                  DM_VARCHAR100,
    FONE                      DM_VARCHAR10,
    CONTATO                   DM_NOME,
    TIPODOCUMENTO             DM_NOME,
    LOCALDOCUMENTO            DM_NOME,
    RACA                      DM_NOME,
    ESCOLARIDADE              DM_NOME,
    NOME_UP_ESTUDOU           DM_NOME,
    ESCOLA_UP                 DM_NOME,
    STATUS_ARTIGO             DM_NOME,
    ADVOGADO                  DM_NOME,
    RELIGIAO                  DM_NOME,
    IDPROFISSAO               DM_INTEGER,
    VISITA                    DM_NOME,
    APOIOFINANCEIRO           DM_NOME,
    CASAPROPRIA               DM_NOME,
    BENEFICIOGOVERNO          DM_NOME,
    APOIOAFAMILIA             DM_NOME,
    INSERIDO_ESCOLA           DM_NOME,
    CASTIGO_DISCIPLINAR       DM_NOME,
    DOENCA_INFECCIOSA         DM_NOME,
    DOENCA_NAO_TRASMISSIVEL   DM_NOME,
    TIPO_TRATAMENTO           DM_NOME,
    USA_DROGA                 DM_NOME,
    CURSO_PROFISSIONALIZANTE  DM_NOME,
    BENEFICIO_REGIME          DM_VARCHAR16386,
    IDARTIGO                  DM_INTEGER,
    IDCELA                    DM_INTEGER,
    IDSOLARIO                 DM_INTEGER,
    IDGALERIA                 DM_INTEGER,
    IDPAVILHAO                DM_INTEGER
);

CREATE TABLE CONTROLE_PERMANENCIA (
    ID_CONTROLE_PERMANENCIA  DM_ID,
    DATA_INICIAL             DM_DATA,
    DATA_FINAL               DM_DATA,
    AUTORIZACAO              DM_VARCHAR200,
    OBS                      DM_VARCHAR8192,
    ID_INTERNO               DM_INTEGER,
    DIASAUTORIZADOS          DM_INTEGER,
    NAUTOS                   DM_VARCHAR100,
    AVISADO                  DM_VARCHAR1
);

CREATE TABLE CTC (
    IDCTC                        DM_ID,
    IDINTERNO                    DM_INTEGER,
    STATUS                       DM_VARCHAR30,
    INCIDENCIA_PENAL             DM_VARCHAR200,
    ANALISE_CRIME_PRATICADO      DM_VARCHAR100,
    SITUACAO_PROCESSUAL          DM_BLOB_WORD,
    PASSAGEM_SPF                 DM_VARCHAR100,
    REINCIDENCIA                 DM_VARCHAR100,
    FACCAO_CRIMINOSA             DM_VARCHAR100,
    SITUACAO_FACCAO              DM_VARCHAR100,
    INFORMACOES_INTELIGENCIA     DM_BLOB_WORD,
    CONFIRMACAO_PEDIDO_INCLUSAO  DM_BLOB_WORD,
    CONDUTA_UNIDADE_PENAL        DM_BLOB_WORD,
    SERVICO_SOCIAL               DM_BLOB_WORD,
    ENFERMAGEM                   DM_BLOB_WORD,
    FARMACIA                     DM_BLOB_WORD,
    CLINICA_MEDICA               DM_BLOB_WORD,
    PSIQUIATRIA                  DM_BLOB_WORD,
    ODONTOLOGIA                  DM_BLOB_WORD,
    PSICOLOGIA                   DM_BLOB_WORD,
    TERAPIA_OCUPACIONAL          DM_BLOB_WORD,
    PEDAGOGIA                    DM_BLOB_WORD,
    ASSISTENCIA_RELIGIOSA        DM_BLOB_WORD,
    ASSISTENCIA_MATERIAL         DM_BLOB_WORD,
    ASSISTENCIA_JURIDICA         DM_BLOB_WORD,
    PROJETO_DEMAIS_ACOES         DM_BLOB_WORD,
    CONCLUSAO                    DM_BLOB_WORD,
    DATA_INICIO                  DM_DATA,
    DATA_FINAL                   DM_DATA,
    REQUISITO_INCLUSAO           DM_BLOB_WORD
);

CREATE TABLE CURSO (
    ID_CURSO  DM_ID,
    CURSO     DM_VARCHAR100
);

CREATE TABLE DESTINO (
    ID_DESTINO  DM_ID,
    DESTINO     DM_VARCHAR100,
    CAPITAL     DM_VARCHAR30
);

CREATE TABLE DETRACAO (
    IDDETRACAO        DM_ID,
    ID_FUNCIONARIO    DM_INTEGER,
    DATA_LANCAMENTO   DM_DATA,
    ID_INTERNO        DM_INTEGER,
    MOTIVO            DM_MEMO,
    DATA_INICIAL      DM_DATA,
    DATA_FINAL        DM_DATA,
    ANO               DM_INTEGER,
    MES               DM_INTEGER,
    DIA               DM_INTEGER,
    NUMERO_DOCUMENTO  DM_VARCHAR100,
    NOME_ARQUIVO      DM_VARCHAR200 COLLATE WIN_PTBR,
    ARQUIVO           DM_FOTO
);

CREATE TABLE DOCUMENTOS_DIGITALIZADOS (
    ID_DOCUMENTO_DIGITALIZADO  DM_ID,
    ID_POSTO_TRABALHO          DM_INTEGER,
    DESCRICAO                  DM_VARCHAR200,
    ID_TIPO_DOCUMENTO          DM_INTEGER,
    DOCUMENTO                  DM_FOTO,
    DATA                       DM_DATA,
    ID_INTERNO                 DM_INTEGER
);

CREATE TABLE DOCUMENTOS_PROCESSO (
    IDDOCUMENTOS_PROCESSO  DM_ID,
    DESCRICAO              DM_VARCHAR200,
    DOCUMENTOS             DM_FOTO,
    IDPROCESSO             DM_INTEGER
);

CREATE TABLE EQUIPE (
    IDEQUIPE               DM_ID,
    EQUIPE                 DM_NOME,
    TIPO                   DM_VARCHAR1,
    IDHORARIO_FUNCIONARIO  DM_INTEGER
);

CREATE TABLE ESCALA_PLANTAO (
    IDESCALA_PLANTAO   DM_ID,
    IDEQUIPE           DM_ID,
    IDFUNCIONARIO      DM_ID,
    IDFUNC_SUBSTITUTO  DM_INTEGER,
    IDPOSTO_TRABALHO   DM_ID,
    DATA_PLANTAO       DM_DATA NOT NULL,
    HORA_INICIO        DM_HORA,
    HORA_FIM           DM_HORA,
    POSTO_ROTATIVO     DM_VARCHAR1,
    OBSERVACOES        DM_VARCHAR1000
);

CREATE TABLE ESCOLARIDADE (
    ID_ESCOLARIDADE  DM_ID,
    ESCOLARIDADE     DM_NOME
);

CREATE TABLE ESTADO (
    ID_ESTADO  DM_ID,
    ESTADO     DM_NOME,
    UF         DM_UF
);

CREATE TABLE EVENTOS (
    ID_EVENTOS        DM_ID,
    DESCRICAO_EVENTO  DM_VARCHAR200,
    CODIGO            DM_INTEGER,
    SUB_EVENTOS       DM_VARCHAR1
);

CREATE TABLE FALTA_DISCIPLINAR (
    ID_FALTA_DISCIPLINAR  DM_ID,
    FALTA_DISCIPLINAR     DM_VARCHAR8192,
    TEMPOREABILITACAO     DM_INTEGER,
    TIPOFALTA             DM_NOME
);

CREATE TABLE FILHOS (
    IDFILHOS         DM_ID,
    NOME             DM_NOME,
    DATA_NASCIMENTO  DM_DATA,
    ESCOLA           DM_VARCHAR100,
    ENDERECO         DM_VARCHAR100,
    IDCIDADE         DM_INTEGER,
    NOME_MAE         DM_NOME,
    IDINTERNO        DM_INTEGER
);

CREATE TABLE FORNECEDOR (
    ID_FORNECEDOR  DM_ID,
    FORNECEDOR     DM_NOME,
    ENDERECO       DM_NOME,
    BAIRRO         DM_NOME,
    COMPLEMENTO    DM_NOME,
    CEP            DM_CEP,
    ID_CIDADE      DM_INTEGER,
    CNPJ           DM_VARCHAR30,
    TELEFONE       DM_FONE,
    CONTATO        DM_NOME
);

CREATE TABLE FUNCAO_FUNCIONARIO (
    ID_FUNCAO_FUNCIONARIO  DM_ID,
    FUNCAO_FUNCIONARIO     DM_NOME
);

CREATE TABLE FUNCAO_INTERNO (
    ID_FUNCAO_INTERNO  DM_ID,
    FUNCAO_INTERNO     DM_NOME
);

CREATE TABLE FUNCIONARIO (
    ID_FUNCIONARIO                DM_ID,
    NOME_FUNCIONARIO              DM_VARCHAR100,
    MATRICULA                     DM_VARCHAR30,
    SENHA                         DM_VARCHAR30,
    CPF                           DM_CPF,
    ID_FUNCAO                     DM_INTEGER,
    LOGIN                         DM_VARCHAR30,
    ID_UP                         DM_INTEGER,
    PERMISSAO_CONFERE             PERMISSAO,
    PERMISSAO_VISITANTE           PERMISSAO,
    PERMISSAO_SETORTRABALHO       PERMISSAO,
    PERMISSAO_SETOREDUCACAO       PERMISSAO,
    CONFIGURACOES                 PERMISSAO,
    FUNCAO_TEMP                   DM_VARCHAR200,
    FUNCAO                        DM_VARCHAR30,
    ADMISSAO                      DM_DATA,
    CLASSE                        DM_VARCHAR1,
    MAE                           DM_NOME,
    PAI                           DM_NOME,
    RG                            DM_VARCHAR30,
    ORGAOEMISSOR                  DM_VARCHAR30,
    FATORRH                       DM_VARCHAR30,
    ID_NATURALIDADE               DM_INTEGER,
    DTNASCIMENTO                  DM_DATA,
    CARGO                         DM_VARCHAR30,
    AREA                          DM_VARCHAR30,
    FOTO                          DM_FOTO,
    IMPRIMIR                      DM_VARCHAR1,
    DIGITAL                       DM_FOTO,
    ENDERECO                      DM_VARCHAR100,
    BAIRRO                        DM_NOME,
    COMPLEMENTO                   DM_NOME,
    ID_CIDADE                     DM_INTEGER,
    CEP                           DM_VARCHAR30,
    FONE                          DM_FONE,
    CELULAR                       DM_VARCHAR30,
    EMAIL                         DM_VARCHAR100,
    NUMERO                        DM_VARCHAR30,
    DATA_LOTACAO                  DM_DATA,
    ESCOLARIDADE                  DM_VARCHAR30,
    SEXO                          DM_VARCHAR1,
    PLANTAO_EXPEDIENTE            DM_VARCHAR30,
    NFUNCIONAL                    DM_INTEGER,
    PERMISSAO_CADASTRO            PERMISSAO,
    PERMISSAO_PSICOSSOCIAL        DM_VARCHAR30,
    PERMISSAO_JURIDICA            DM_VARCHAR30,
    PERMISSAO_DISCIPLINA          DM_VARCHAR30,
    DIRETORIO_RELATORIO           DM_VARCHAR200,
    IDPOSTO_TRABALHO              DM_INTEGER,
    ID_CURSO                      DM_INTEGER,
    PERMISSAO_CLINICAMEDICA       DM_VARCHAR30,
    PERMISSAO_ENFERMAGEM          DM_VARCHAR30,
    PERMISSAO_FARMACIA            DM_VARCHAR30,
    PERMISSAO_PSIQUIATRIA         DM_VARCHAR30,
    PERMISSAO_SERVICOSOCIAL       DM_VARCHAR30,
    PERMISSAO_TERAPIAOCUPACIONAL  DM_VARCHAR30,
    PERMISSAO_ODONTOLOGIA         DM_VARCHAR30,
    PERMISSAO_PEDAGOGIA           DM_VARCHAR30,
    PERMISSAO_PSICOLOGIA          DM_VARCHAR30,
    PERMISSAO_SAUDE               DM_VARCHAR30,
    VISUALIZA_OUTRAS_UP           DM_VARCHAR1,
    PERMISSAO_INTELIGENCIA        DM_VARCHAR30,
    AUTORIZADO_DELPHI             DM_VARCHAR1,
    AUTORIZADO_WEB                DM_VARCHAR1,
    SENHA_WEB                     DM_VARCHAR100 COLLATE WIN_PTBR,
    PERMISSAO_ARMAS               DM_VARCHAR30
);

CREATE TABLE GALERIA (
    ID_GALERIA  DM_ID,
    GALERIA     DM_NOME,
    IDPAVILHAO  DM_INTEGER
);

CREATE TABLE GRAU_PARENTESCO (
    ID_GRAU_PARENTESCO  DM_ID,
    GRAU_PARENTESCO     DM_NOME
);

CREATE TABLE HISTORICO_CLINICA_MEDICA (
    ID_HISTORICO_CLINICA_MEDICA  DM_ID,
    DESCRICAO                    DM_VARCHAR8192,
    DATA                         DM_DATA,
    ID_FUNCIONARIO               DM_INTEGER,
    ID_INTERNO                   DM_INTEGER
);

CREATE TABLE HISTORICO_ENFERMAGEM (
    ID_HISTORICO_ENFERMAGEM  DM_ID,
    DESCRICAO                DM_VARCHAR8192,
    DATA                     DM_DATA,
    ID_FUNCIONARIO           DM_INTEGER,
    ID_INTERNO               DM_INTEGER
);

CREATE TABLE HISTORICO_ESTUDO (
    ID_HISTORICO_ESTUDO  DM_ID,
    DATA_HISTORICO       DM_DATA,
    ID_INTERNO           DM_INTEGER,
    HISTORICO            DM_VARCHAR16386
);

CREATE TABLE HISTORICO_FARMACIA (
    ID_HISTORICO_FARMACIA  DM_ID,
    DESCRICAO              DM_VARCHAR8192,
    DATA                   DM_DATA,
    ID_FUNCIONARIO         DM_INTEGER,
    ID_INTERNO             DM_INTEGER
);

CREATE TABLE HISTORICO_INTERNO (
    IDHISTORICO_INTERNO  DM_ID,
    DESCRICAO            DM_VARCHAR16386 NOT NULL,
    DATA_HORA            DM_DATA NOT NULL,
    IDINTERNO            DM_ID,
    STATUS               DM_VARCHAR1,
    MOTIVO_SAIDA         DM_NOME,
    IDPROCEDENCIA        DM_INTEGER,
    IDUP                 DM_INTEGER,
    SETOR                DM_NOME,
    ID_FUNCIONARIO       DM_INTEGER
);

CREATE TABLE HISTORICO_ODONTOLOGIA (
    ID_HISTORICO_ODONTOLOGIA  DM_ID,
    DESCRICAO                 DM_VARCHAR8192,
    DATA                      DM_DATA,
    ID_FUNCIONARIO            DM_INTEGER,
    ID_INTERNO                DM_INTEGER
);

CREATE TABLE HISTORICO_PEDAGOGIA (
    ID_HISTORICO_PEDAGOGIA  DM_ID,
    DESCRICAO               DM_VARCHAR8192,
    DATA                    DM_DATA,
    ID_FUNCIONARIO          DM_INTEGER,
    ID_INTERNO              DM_INTEGER
);

CREATE TABLE HISTORICO_PSICOLOGIA (
    ID_HISTORICO_PSICOLOGIA  DM_ID,
    DESCRICAO                DM_VARCHAR8192,
    DATA                     DM_DATA,
    ID_FUNCIONARIO           DM_INTEGER,
    ID_INTERNO               DM_INTEGER
);

CREATE TABLE HISTORICO_PSIQUIATRIA (
    ID_HISTORICO_PSIQUIATRIA  DM_ID,
    DESCRICAO                 DM_VARCHAR8192,
    DATA                      DM_DATA,
    ID_FUNCIONARIO            DM_INTEGER,
    ID_INTERNO                DM_INTEGER
);

CREATE TABLE HISTORICO_SERVICO_SOCIAL (
    ID_HISTORICO_SERVICO_SOCIAL  DM_ID,
    DESCRICAO                    DM_VARCHAR8192,
    DATA                         DM_DATA,
    ID_FUNCIONARIO               DM_INTEGER,
    ID_INTERNO                   DM_INTEGER
);

CREATE TABLE HISTORICO_TERAPIA_OCUP (
    ID_HISTORICO_TERAPIA_OCUP  DM_ID,
    DESCRICAO                  DM_VARCHAR8192,
    DATA                       DM_DATA,
    ID_FUNCIONARIO             DM_INTEGER,
    ID_INTERNO                 DM_INTEGER
);

CREATE TABLE HISTORICO_VISITANTE (
    ID_HISTORICO_VISITANTE  DM_ID,
    ID_VISITANTE            DM_ID,
    NOME_VISITANTE          DM_NOME,
    ID_GRAU_PARENTESCO      DM_INTEGER,
    ID_INTERNO              DM_INTEGER,
    NUMERO_CARTEIRINHA      DM_VARCHAR30,
    CPF                     DM_CPF,
    RG                      DM_CPF,
    ORGAO_EXPEDIDOR         DM_VARCHAR30,
    SEXO                    DM_CPF,
    DATA_VISITA             DM_DATA,
    HORA_VISITA             DM_DATA,
    ORDEM                   DM_INTEGER
);

CREATE TABLE HORARIO_FUNCIONARIO (
    IDHORARIO_FUNCIONARIO  DM_ID,
    HORARIO_FUNCIONARIO    DM_VARCHAR100,
    PLANTAO                DM_VARCHAR1,
    HORAS_TRABALHO         DM_INTEGER,
    HORAS_FOLGA            DM_INTEGER,
    HORA_INICIO_MANHA      DM_HORA,
    HORA_FIM_MANHA         DM_HORA,
    HORA_INICIO_TARDE      DM_HORA,
    HORA_FIM_TARDE         DM_HORA
);

CREATE TABLE INT_CT (
    NOME_INTERNO          DM_VARCHAR100,
    PAVILHAO              DM_VARCHAR100,
    CELA                  DM_VARCHAR100,
    TIPO_CELA             DM_VARCHAR100,
    VULGO                 DM_VARCHAR100,
    OUTRO_NOME            DM_VARCHAR100,
    PROCEDENCIA           DM_VARCHAR100,
    DATA_ENTRADA          DM_VARCHAR100,
    SETOR_TRABALHO        DM_VARCHAR100,
    DATA_INICIO_TRABALHO  DM_VARCHAR100,
    DATA_FINAL_TRABALHO   DM_VARCHAR100,
    STATUS                DM_VARCHAR100
);

CREATE TABLE INTELIGENCIA (
    ID_INTELIGENCIA  DM_ID,
    ID_INTERNO       DM_INTEGER,
    DATA             DM_DATA,
    DESCRICAO        DM_MEMO,
    ID_FUNCIONARIO   DM_INTEGER
);

CREATE TABLE INTERNO (
    ID_INTERNO               DM_ID,
    NOME_INTERNO             DM_NOME,
    RGI                      DM_VARCHAR30,
    IDPROFISSAO              DM_INTEGER,
    IDGALERIA                DM_INTEGER,
    IDPAVILHAO               DM_INTEGER,
    IDSOLARIO                DM_INTEGER,
    IDCELA                   DM_INTEGER,
    DATA_ENTRADA             DM_DATA,
    MAE                      DM_NOME,
    PAI                      DM_NOME,
    IDNATURALIDADE           DM_INTEGER,
    IDNACIONALIDADE          DM_INTEGER,
    IDRACA                   DM_INTEGER,
    IDESCOLARIDADE           DM_INTEGER,
    ENDERECO                 DM_NOME,
    NUMERO                   DM_FONE,
    BAIRRO                   DM_VARCHAR100,
    COMPLEMENETO             DM_VARCHAR100,
    CEP                      DM_CEP,
    IDCIDADE                 DM_INTEGER,
    FONE                     DM_FONE,
    CONTATO                  DM_NOME,
    RELIGIAO                 DM_NOME,
    IDADVOGADO               DM_INTEGER,
    ID_PROCEDENCIA           DM_INTEGER,
    CONDENACAO               DM_VARCHAR100,
    DATA_PRISAO              DM_DATA,
    HISTORICO                DM_VARCHAR8192,
    ST                       DM_VARCHAR1,
    SEXO                     DM_VARCHAR1,
    ID_UP                    DM_INTEGER,
    IDCONDICAO_INTERNO       DM_INTEGER,
    IDDESTINO                DM_INTEGER,
    ID_FUNCIONARIO           DM_INTEGER,
    STATUS_ISOLAMENTO        DM_VARCHAR30,
    IDSETOR_TRABALHO         DM_INTEGER,
    DATA_SETOR               DM_DATA,
    FOTO                     DM_FOTO,
    FOTO_PERFIL              DM_FOTO,
    FOTO_TATUAGEM            DM_FOTO,
    DATA_SAIDA               DM_DATA,
    MOTIVO_SAIDA             DM_VARCHAR100,
    ID_FUNCAOINTERNO         DM_INTEGER,
    OBSTRABALHO              DM_VARCHAR100,
    DATA_NASCIMENTO          DM_DATA,
    RG                       DM_VARCHAR30,
    CPF                      DM_CPF,
    ESTADO_CIVIL             DM_VARCHAR30,
    VULGO                    DM_VARCHAR100,
    OUTRO_NOME               DM_VARCHAR100,
    SINAIS_PARTICULARES      DM_VARCHAR200,
    ALTURA                   DM_VARCHAR30,
    PESO                     DM_VARCHAR30,
    CI                       DM_VARCHAR30,
    CISAIDA                  DM_VARCHAR30,
    FOTO_SINAIS              DM_FOTO,
    FOTO_SINAIS1             DM_FOTO,
    FOTO_SINAIS2             DM_FOTO,
    FOTO_SINAIS3             DM_FOTO,
    FOTO_SINAIS4             DM_FOTO,
    ARTIGO                   DM_VARCHAR100,
    DATA_ISOLAMENTO          DM_DATA,
    DATA_MATRICULA           DM_DATA,
    OBSEDUCACAO              DM_VARCHAR8192,
    DEFICIENCIA              DM_VARCHAR100,
    IDSERIEESTUDO            DM_INTEGER,
    COR_OLHOS                DM_VARCHAR100,
    COR_CABELOS              DM_VARCHAR100,
    NOME_SOCIAL              DM_NOME,
    ORIENTACAO_SEXUAL        DM_NOME,
    IDENTIDADE_GENERO        DM_NOME,
    HISTORICO_VELHO          DM_VARCHAR16386,
    TIPOPROCESSO             DM_VARCHAR100,
    CONCEITO_DISCIPLINAR     DM_VARCHAR200,
    TIPOCONDUTA              DM_VARCHAR30,
    PERIODO                  DM_VARCHAR30,
    FAMILIARPRESO            DM_VARCHAR30,
    PARENTESCOPRESO          DM_NOME,
    UPFAMILIARPRESO          DM_VARCHAR200,
    MOTIVODELITO             DM_VARCHAR200,
    MAIORPERDA               DM_VARCHAR200,
    PAISVIVOS                DM_VARCHAR30,
    PAISSEPARADOS            DM_VARCHAR30,
    IDADEPAISSEPARADOS       DM_VARCHAR30,
    PROFISSAOPAIS            DM_VARCHAR100,
    QUEMCRIOU                DM_VARCHAR100,
    TRABALHOFAMILIA          DM_VARCHAR100,
    QTDEIRMAOS               DM_VARCHAR30,
    CRIADOIRMAOS             DM_VARCHAR30,
    MORADIA                  DM_VARCHAR100,
    REPRESENTACAOPAIS        DM_VARCHAR200,
    EDUCACAORECEBIDA         DM_VARCHAR200,
    MUDANCAFAMILIA           DM_VARCHAR100,
    FUGACASA                 DM_VARCHAR100,
    CONDICOESCRIACAO         DM_VARCHAR30,
    INSTITUICAOASSISTENCIAL  DM_VARCHAR100,
    VIOLENCIADOMESTICA       DM_VARCHAR200,
    MORADIAANTESPRESO        DM_VARCHAR100,
    RESIDENCIAFAMILIAR       DM_VARCHAR100,
    QTDEFILHOS               DM_VARCHAR100,
    FILHOSMENORES16          DM_VARCHAR100,
    FILHOSVIVEM              DM_VARCHAR200,
    FILHOADOCAO              DM_VARCHAR200,
    PROVEDORFAMILIA          DM_VARCHAR30,
    RENDIMENTOFAMILIAR       DM_VARCHAR200,
    PROGRAMASOCIAL           DM_VARCHAR200,
    AUXRECLUSAO              DM_VARCHAR200,
    REPROVADOESCOLA          DM_VARCHAR200,
    IDADETRABALHO            DM_VARCHAR200,
    CURSOPROFISSIONALIZANTE  DM_VARCHAR200,
    EXERCICIATRABALHO        DM_VARCHAR100,
    REGISTROCARTEIRA         DM_VARCHAR100,
    TRABALHOUPANTERIOR       DM_VARCHAR200,
    DOCUMENTOS               DM_VARCHAR200,
    USODROGAS                DM_VARCHAR200,
    DATADEPENDENCIA          DM_VARCHAR100,
    ABANDONODROGAS           DM_VARCHAR200,
    DROGASCOMCRIME           DM_VARCHAR200,
    DOENCAGRAVE              DM_VARCHAR30,
    DOENCAMENTAL             DM_VARCHAR30,
    PROBLEMASAUDE            DM_VARCHAR200,
    DOENCALABORAL            DM_VARCHAR200,
    VISITAOUTRAPESSOA        DM_VARCHAR200,
    ESTUDOCUMPENA            DM_VARCHAR100,
    TRABALHOCUMPENA          DM_VARCHAR100,
    PROFISSAOCUMPENA         DM_VARCHAR100,
    DATAPSICOSSOCIAL         DM_DATA,
    IDTECNICO                DM_INTEGER,
    OBSPSICOSSOCIAL          DM_VARCHAR200,
    DATA_DELITO              DM_DATA,
    DATA_REABILITACAO        DM_DATA,
    MP                       DM_INTEGER,
    SUICIDIO                 DM_VARCHAR100,
    CID                      DM_VARCHAR100,
    EFEITOSDROGA             DM_VARCHAR200,
    SINTOMASDEPRESSIVOS      DM_VARCHAR200,
    EPISODIOSHUMOR           DM_VARCHAR200,
    SINTOMASPSICOTICOS       DM_VARCHAR200,
    DELIRIOS                 DM_VARCHAR200,
    ALUCINACOES              DM_VARCHAR100,
    PERSONALIDADE            DM_VARCHAR100,
    VISITANTES               DM_VARCHAR200,
    MEDICACAOCONTROLADA      DM_VARCHAR200,
    DOENCAINFECTOCONTAGIOSA  DM_VARCHAR200,
    TRATAMENTOINFECTO        DM_VARCHAR200,
    RESULTADOINFECTO         DM_VARCHAR200,
    SITUACAOCIVIL            DM_VARCHAR100,
    MEDIDASEGURANCA          DM_VARCHAR30,
    FACCAO                   DM_VARCHAR100,
    VARA_ORIGEM              DM_VARCHAR100,
    EM_TRANSITO              DM_VARCHAR1,
    NUMERO_INFOPEN           DM_VARCHAR30,
    REINCERSAO               DM_VARCHAR1,
    IDPAIS_ENDERECO          DM_INTEGER,
    OUTROS_ADVOGADOS         DM_VARCHAR1000,
    TITULO_ELEITOR           DM_VARCHAR30,
    TIPOREGIME               DM_VARCHAR100,
    DATA_PERMANENCIA         DM_DATA,
    PASSAGEM_SPF             DM_VARCHAR1000,
    MOTIVACAO_INCLUSAO       DM_VARCHAR8192,
    NUMERO_ROUPA             DM_VARCHAR100 COLLATE WIN_PTBR,
    ORGAO_EMISSOR_RG         DM_VARCHAR30
);

CREATE TABLE INTERRUPCAO (
    IDINTERRUPCAO     DM_ID,
    ID_FUNCIONARIO    DM_INTEGER,
    DATA_LANCAMENTO   DM_DATA,
    ID_INTERNO        DM_INTEGER,
    MOTIVO            DM_MEMO,
    DATA_INICIAL      DM_DATA,
    DATA_FINAL        DM_DATA,
    ANO               DM_INTEGER,
    MES               DM_INTEGER,
    DIA               DM_INTEGER,
    NUMERO_DOCUMENTO  DM_VARCHAR100,
    NOME_ARQUIVO      DM_VARCHAR200 COLLATE WIN_PTBR,
    ARQUIVO           DM_FOTO
);

CREATE TABLE ITENS_PATRIMONIO (
    ID_ITENS_PATRIMONIO  DM_ID,
    ID_PATRIMONIO        DM_INTEGER,
    ID_ACESSORIOS        DM_INTEGER,
    QTDE                 DM_INTEGER
);

CREATE TABLE LIVRO (
    ID_LIVRO       DM_ID,
    LIVRO          DM_VARCHAR200,
    ID_FORNECEDOR  DM_INTEGER
);

CREATE TABLE LIVRO_INTERNO (
    ID_LIVRO_INTERNO  DM_ID,
    ID_LIVRO          DM_INTEGER,
    ID_INTERNO        DM_INTEGER,
    DATA              DM_DATA,
    OBS               DM_VARCHAR8192
);

CREATE TABLE LOG_SISTEMA (
    IDLOG_SISTEMA    DM_ID,
    ID_FUNCIONARIO   DM_INTEGER,
    DATA_HORA        DM_DATA,
    TABELA           DM_VARCHAR100,
    ID_PK            DM_INTEGER,
    TIPO             DM_VARCHAR1,
    SCRIPT_REVERSAO  DM_MEMO,
    IP_MAQUINA       DM_VARCHAR200
);

CREATE TABLE MENORES (
    ID_MENORES                  DM_ID,
    NOME_MENORES                DM_NOME,
    ID_VISITANTE                DM_INTEGER,
    NUMERO_CERTIDAO_NASCIMENTO  DM_VARCHAR100,
    DATA_NASCIMENTO             DM_DATA,
    ID_GRAU_PARENTESCO          DM_INTEGER
);

CREATE TABLE MENSAGEM_BANCO_DADOS (
    IDMENSAGEM_BANCO_DADOS  DM_ID,
    MENSAGEM_BANCO_DADOS    DM_VARCHAR1000
);

CREATE TABLE MOV_CAUTELA (
    IDMOV_CAUTELA              DM_ID,
    IDFUNCIONARIO_LANCAMENTO   DM_ID,
    IDPOSTO_TRABALHO           DM_INTEGER,
    IDFUNCIONARIO_RESPONSAVEL  DM_ID,
    IDPATRIMONIO               DM_ID,
    ID_UP                      DM_ID,
    NUMERO_CAUTELA             DM_VARCHAR10 NOT NULL,
    DATA_MOVIMENTO             DM_DATA NOT NULL,
    HORA_MOVIMENTO             DM_HORA NOT NULL,
    QUANTIDADE                 DM_VALOR NOT NULL,
    TIPO_MOVIMENTO             DM_VARCHAR1 NOT NULL,
    HISTORICO                  DM_VARCHAR100,
    OBSERVACAO                 DM_VARCHAR100,
    DADOS_ADICIONAIS           DM_VARCHAR100,
    QUANTIDADE_DEVOLVIDA       SMALLINT,
    IDMOV_CAUTELA2             DM_INTEGER,
    MISSAO_CAUTELA             DM_VARCHAR100,
    DATA_DEV_CAUTELA           DM_DATA
);

CREATE TABLE MOV_DIARIO_VISITANTES (
    ID_MOV_DIARIO_VISITANTES  DM_ID,
    ID_VISITANTE              DM_ID,
    NOME_VISITANTE            DM_NOME,
    ID_GRAU_PARENTESCO        DM_INTEGER,
    ID_INTERNO                DM_INTEGER,
    NUMERO_CARTEIRINHA        DM_VARCHAR30,
    CPF                       DM_CPF,
    RG                        DM_VARCHAR100,
    ORGAO_EXPEDIDOR           DM_CPF,
    SEXO                      DM_CPF,
    DATA_VISITA               DM_DATA,
    HORA_VISITA               DM_HORA,
    ORDEM_VISITA              DM_INTEGER,
    CANCELADO                 DM_VARCHAR1,
    QUANTIDADE_MENOR          DM_INTEGER,
    ID_UP                     DM_INTEGER,
    STATUS                    DM_VARCHAR10,
    LOCAL                     DM_VARCHAR200,
    CONTATO                   DM_NOME
);

CREATE TABLE MOV_EVENTOS (
    IDMOV_EVENTOS          DM_ID,
    IDFUNCIONARIO          DM_INTEGER,
    IDPOSTO_TRABALHO       DM_INTEGER,
    ID_UP                  DM_INTEGER,
    ID_EVENTOS             DM_INTEGER,
    ID_SUB_EVENTOS         DM_INTEGER,
    OBSERVACAO             DM_VARCHAR1000,
    IDFUNCIONARIO_MONITOR  DM_INTEGER,
    DATA_EVENTO            DM_DATA,
    HORA_EVENTO            DM_HORA,
    STATUS                 DM_VARCHAR1,
    ARQUIVO_RELACIONADO    DM_VARCHAR200,
    IDEQUIPE               DM_INTEGER
);

CREATE TABLE MOV_INTERNO (
    ID_MOV_INTERNO     DM_ID,
    ID_INTERNO         DM_ID,
    ID_UNIDADE_PENAL   DM_ID,
    TIPO_MOVIMENTACAO  DM_VARCHAR16386,
    DATA_MOVIMENTACAO  DM_DATA,
    HORA_MOVIMENTACAO  DM_HORA,
    ID_FUNCIONARIO     DM_INTEGER,
    ID_PROCEDENCIA     DM_INTEGER,
    ID_DESTINO         DM_INTEGER,
    IDPAVILHAO         DM_INTEGER,
    IDGALERIA          DM_INTEGER,
    IDSOLARIO          DM_INTEGER,
    IDCELA             DM_INTEGER,
    ST_INTERNO         DM_VARCHAR1,
    FOTO_INTERNO       DM_FOTO
);

CREATE TABLE MOV_OCORRENCIA (
    IDMOV_OCORRENCIA     DM_ID,
    IDOCORRENCIA         DM_ID,
    DATA                 DM_DATA,
    HORA                 DM_HORA,
    DESCRICAO            DM_NOME,
    IDMOV_PROCEDIMENTOS  DM_ID
);

CREATE TABLE MOV_OCORRENCIA_ADV (
    IDMOV_OCORRENCIA_ADV  DM_ID,
    IDMOV_OCORRENCIA      DM_ID,
    IDADVOGADO            DM_ID
);

CREATE TABLE MOV_OCORRENCIA_FUNC (
    IDMOV_OCORRENCIA_FUNC  DM_ID,
    IDMOV_OCORRENCIA       DM_ID,
    IDFUNCIONARIO          DM_ID
);

CREATE TABLE MOV_OCORRENCIA_INT (
    IDMOV_OCORRENCIA_INT  DM_ID,
    IDMOV_OCORRENCIA      DM_ID,
    IDINTERNO             DM_ID
);

CREATE TABLE MOV_OCORRENCIA_QUEST (
    IDMOV_OCORRENCIA_QUEST  DM_ID,
    IDMOV_OCORRENCIA        DM_ID,
    IDQUESTIONAMENTO        DM_ID,
    PERGUNTA                DM_VARCHAR100,
    TIPO_RESPOSTA           DM_VARCHAR30,
    RESPOSTA                DM_VARCHAR16386,
    RESPOSTA_DEFAULT        DM_VARCHAR16386
);

CREATE TABLE MOV_OCORRENCIA_VIS (
    IDMOV_OCORRENCIA_VIS  DM_ID,
    IDMOV_OCORRENCIA      DM_ID,
    IDVISITANTE           DM_ID
);

CREATE TABLE MOV_PROCEDIMENTOS (
    IDMOV_PROCEDIMENTOS            DM_ID,
    IDPROCEDIMENTOS                DM_ID,
    DATA                           DM_DATA,
    HORA_INICIAL                   DM_HORA,
    HORA_FINAL                     DM_HORA,
    OBSERVACAO                     DM_VARCHAR1000,
    ST                             DM_VARCHAR1,
    DATA_ENCERRAMENTO              DM_DATA,
    MOTIVO_ENCERRAMENTO            DM_VARCHAR100,
    ID_UP                          DM_INTEGER,
    IDMOV_OCORRENCIA_ORIGEM        DM_INTEGER,
    IDMOV_PROCEDIMENTOS_PRINCIPAL  DM_INTEGER
);

CREATE TABLE MOV_PROCEDIMENTOS_ADV (
    IDMOV_PROCEDIMENTOS_ADV  DM_ID,
    IDMOV_PROCEDIMENTOS      DM_ID,
    IDADVOGADO               DM_ID
);

CREATE TABLE MOV_PROCEDIMENTOS_FUNC (
    IDMOV_PROCEDIMENTOS_FUNC  DM_ID,
    IDMOV_PROCEDIMENTOS       DM_ID,
    IDFUNCIONARIO             DM_ID
);

CREATE TABLE MOV_PROCEDIMENTOS_INT (
    IDMOV_PROCEDIMENTOS_INT  DM_ID,
    IDMOV_PROCEDIMENTOS      DM_ID,
    IDINTERNO                DM_ID
);

CREATE TABLE MOV_PROCEDIMENTOS_VIS (
    IDMOV_PROCEDIMENTOS_VIS  DM_ID,
    IDMOV_PROCEDIMENTOS      DM_ID,
    IDVISITANTE              DM_ID
);

CREATE TABLE MOV_TRABALHO (
    ID_MOV_TRABALHO    DM_ID,
    ID_TRABALHO        DM_ID,
    ID_INTERNO         DM_INTEGER,
    ID_SETOR_TRABALHO  DM_INTEGER,
    ID_FUNCAO_INTERNO  DM_INTEGER,
    DATA_MOV_TRABALHO  DM_DATA,
    OBS_MOV_TRABALHO   DM_MEMO,
    TIPO_MOV_TRABALHO  DM_VARCHAR30,
    ID_UNIDADE_PENAL   DM_INTEGER
);

CREATE TABLE NACIONALIDADE (
    ID_NACIONALIDADE  DM_ID,
    NACIONALIDADE     DM_NOME
);

CREATE TABLE OCORRENCIA (
    IDOCORRENCIA           DM_ID,
    DESCRICAO              DM_NOME,
    ST                     DM_VARCHAR1,
    IDPROCEDIMENTO_NOVO    DM_INTEGER,
    PROCEDIMENTO_TEM_DATA  DM_VARCHAR1,
    MULTIPLOS_REGISTROS    DM_VARCHAR1
);

CREATE TABLE OCORRENCIA_PROCEDIMENTOS (
    IDOCORRENCIA_PROCEDIMENTOS  DM_ID,
    IDOCORRENCIA                DM_ID,
    IDPROCEDIMENTOS             DM_ID
);

CREATE TABLE PADRAO (
    IDPADRAO           DM_ID,
    COD_UP             DM_ID,
    SISTEMA            DM_NOME,
    NOME_PAVILHAO      DM_NOME,
    NOME_GALERIA       DM_NOME,
    NOME_SOLARIO       DM_NOME,
    NOME_CELA          DM_NOME,
    NUMERO_VISITANTES  DM_INTEGER
);

CREATE TABLE PATRIMONIO (
    IDPATRIMONIO              DM_ID,
    TOMBO                     DM_VARCHAR100,
    NUM_SERIAL                DM_VARCHAR100,
    NOME                      DM_VARCHAR100,
    COMPLEMENTO               DM_VARCHAR100,
    MARCA                     DM_VARCHAR100,
    MODELO                    DM_VARCHAR100,
    ESTADO                    DM_VARCHAR100,
    IDTIPO_PATRIMONIO         DM_INTEGER,
    VALOR                     DM_VALOR,
    UTILIZACAO                DM_VARCHAR100,
    DISPONIBILIDADE           DM_VARCHAR1,
    ID_UP                     DM_INTEGER,
    IDPOSTO_TRABALHO          DM_INTEGER,
    OBSERVACAO                DM_VARCHAR100,
    IDFUNCIONARIO_CADASTROU   DM_INTEGER,
    DATA_CADASTRO             DM_DATA,
    DATA_CAUTELA              DM_DATA,
    CAUTELA                   DM_VARCHAR1,
    IDPOSTO_TRABALHO_CAUTELA  DM_INTEGER,
    IDFUNCIONARIO_CAUTELA     DM_INTEGER,
    MISSAO_CAUTELA            DM_VARCHAR100,
    OBS_CAUTELA               DM_VARCHAR100,
    FOTO_PATRIMONIO           DM_FOTO,
    NOTA_FISCAL               DM_VARCHAR100,
    TIPO_PESSOA               DM_VARCHAR1,
    NUMERO_ARMA               DM_VARCHAR100,
    CAPACIDADE                DM_INTEGER,
    NUMEROS_CANOS             DM_INTEGER,
    NUMERO_RAIAS              DM_INTEGER,
    REGISTRO_DATA_EMISSAO     DM_DATA,
    REGISTRO_ESTADUAL         DM_VARCHAR100,
    REGISTRO_ORGAO_EXPEDIDOR  DM_VARCHAR100,
    REGISTRO_UF               DM_UF,
    CADASTRO_SINARM           DM_VARCHAR100,
    ESPECIE                   DM_VARCHAR100,
    CALIBRE                   DM_VARCHAR100,
    PAIS_FABRICACAO           DM_VARCHAR100,
    COMPRIMENTO_CANO          DM_VARCHAR100,
    ARMA_ALMA                 DM_VARCHAR100,
    SENTIDO_RAIA              DM_VARCHAR1,
    FUNCAO_ARMA               DM_VARCHAR100,
    ACABAMENTO                DM_VARCHAR100,
    SITUACAO_GERAL            DM_VARCHAR100,
    OBS_SITUACAO_GERAL        DM_VARCHAR100,
    ORIGEM                    DM_VARCHAR100,
    ACESSORIOS                DM_VARCHAR100,
    DATA_ULTIMA_MANUTENCAO    DM_DATA,
    TIPO_BASE                 DM_VARCHAR100,
    TIPO_EXPLOSIVO            DM_VARCHAR100,
    COMPOSTO_QUIMICO          DM_VARCHAR100,
    DATA_FABRICACAO           DM_DATA,
    DATA_VALIDADE             DM_DATA,
    ESTADO_GERAL              DM_VARCHAR100,
    FABRICACAO                DM_VARCHAR100,
    TIPO_ESPARGIDORES         DM_VARCHAR100,
    PROJETIL                  DM_VARCHAR100,
    DATA_NOTA_FISCAL          DM_DATA,
    QUANTIDADE                DM_VALOR,
    CNPJ_NOTA_FISCAL          DM_VARCHAR100,
    PESO                      DM_VALOR,
    DATA_EXPEDICAO            DM_DATA,
    REGISTRO_SINARM           DM_VARCHAR100,
    EXPLOSIVO_TIPO_EMPREGO    DM_VARCHAR100,
    EXPLOSIVO_COD_REFERENCIA  DM_VARCHAR100,
    MUNICAO_EMPREGO           DM_VARCHAR100,
    DATA_DEV_CAUTELA          DM_DATA
);

CREATE TABLE PAVILHAO (
    ID_PAVILHAO  DM_ID,
    PAVILHAO     DM_NOME,
    ID_UP        DM_INTEGER
);

CREATE TABLE PERMANENCIA_SCANER (
    ID_PERMANENCIA_SCANER    DM_ID,
    DESCRICAO_PERMANENCIA    DM_VARCHAR200,
    DOC_SCANER               DM_FOTO,
    ID_CONTROLE_PERMANENCIA  DM_INTEGER
);

CREATE TABLE PLANILHA_DINAMICA (
    IDPLANILHA_DINAMICA  DM_ID,
    NOME_RELATORIO       DM_VARCHAR100,
    COLUNAS_VISIVEIS     DM_VARCHAR16386,
    CONDICAO_APLICADA    DM_VARCHAR1000,
    DATA                 DM_DATA,
    ID_FUNCIONARIO       DM_INTEGER,
    INDEX_TABELA         DM_INTEGER,
    CONDICAO_VISUAL      DM_VARCHAR1000,
    INDEXFIELDNAMES      DM_VARCHAR100
);

CREATE TABLE POSTO_TRABALHO (
    IDPOSTO_TRABALHO  DM_ID,
    POSTO_TRABALHO    DM_NOME,
    POSTO_ROTATIVO    DM_VARCHAR1,
    HORAS_TRABALHO    DM_INTEGER
);

CREATE TABLE PROCEDENCIA (
    ID_PROCEDENCIA  DM_ID,
    PROEDENCIA      DM_NOME,
    CAPITAL         DM_VARCHAR30,
    UF              DM_UF
);

CREATE TABLE PROCEDIMENTO_POSTO (
    IDPROCEDIMENTO_POSTO  DM_ID,
    IDPOSTO_TRABALHO      DM_ID,
    IDPROCEDIMENTO        DM_ID
);

CREATE TABLE PROCEDIMENTOS (
    IDPROCEDIMENTOS         DM_ID,
    DESCRICAO               DM_NOME,
    ENVOLVE_ADVOGADO        DM_VARCHAR1,
    ENVOLVE_FUNCIONARIO     DM_VARCHAR1,
    ENVOLVE_INTERNO         DM_VARCHAR1,
    ENVOLVE_VISITANTE       DM_VARCHAR1,
    APROVACAO_DIRETA        DM_VARCHAR1,
    HORA_INICIAL            DM_HORA,
    HORA_FINAL              DM_HORA,
    OBSERVACAO              DM_VARCHAR1000,
    FUNCAO_FUNCIONARIO      DM_VARCHAR30,
    ST                      DM_VARCHAR1,
    IDPROCEDIMENTOS_MESTRE  DM_INTEGER
);

CREATE TABLE PROCESSO (
    IDPROCESSO              DM_ID,
    IDINTERNO               DM_ID,
    OBSERVACAO              DM_VARCHAR100,
    TOTAL_PENA_ANO          DM_INTEGER,
    TOTAL_PENA_MES          DM_INTEGER,
    TOTAL_PENA_DIA          DM_INTEGER,
    IDCOMARCA               DM_INTEGER,
    VARA                    DM_VARCHAR100,
    PRISAO                  DM_VARCHAR100,
    REU                     DM_VARCHAR100,
    NPROCESSO               DM_VARCHAR100,
    GR                      DM_VARCHAR100,
    SITUACAOJURIDICA        DM_VARCHAR100,
    TIPOJUSTICA             DM_VARCHAR30,
    DATA_PROCESSO           DM_DATA,
    PARTICIPACAO_CRIME      DM_VARCHAR100,
    DATA_FATO_CONDENACAO    DM_DATA,
    DATA_INICIO_CONDENACAO  DM_DATA,
    PROGRESSAO_REGIME       DM_VARCHAR1,
    LIVRAMENTO_CONDICIONAL  DM_VARCHAR1
);

CREATE TABLE PROFISSAO (
    ID_PROFISSAO  DM_ID,
    PROFISSAO     DM_NOME
);

CREATE TABLE QUESTIONAMENTO (
    IDQUESTIONAMENTO  DM_ID,
    IDOCORRENCIA      DM_ID,
    PERGUNTA          DM_VARCHAR100,
    TIPO_RESPOSTA     DM_VARCHAR30,
    RESPOSTA          DM_VARCHAR16386
);

CREATE TABLE RACA (
    ID_RACA  DM_ID,
    RACA     DM_NOME
);

CREATE TABLE REMEDIO (
    ID_REMEDIO     DM_ID,
    NOME_REMEDIO   DM_VARCHAR200,
    QTDE           DM_INTEGER,
    UNIDADEMEDIDA  DM_VARCHAR30,
    ID_FORNECEDOR  DM_INTEGER
);

CREATE TABLE REMEDIO_INTERNO (
    ID_REMEDIO_INTERNO  DM_ID,
    ID_REMEDIO          DM_INTEGER,
    ID_INTERNO          DM_INTEGER,
    DATA                DM_DATA,
    OBS                 DM_VARCHAR8192,
    ID_FUNCIONARIO      DM_INTEGER
);

CREATE TABLE REMICAO (
    IDREMICAO         DM_ID,
    ID_FUNCIONARIO    DM_INTEGER,
    DATA_LANCAMENTO   DM_DATA,
    ID_INTERNO        DM_INTEGER,
    MOTIVO            DM_MEMO,
    NUMERO_DOCUMENTO  DM_VARCHAR100,
    DIAS_REMIDOS      DM_INTEGER,
    NOME_ARQUIVO      DM_VARCHAR200 COLLATE WIN_PTBR,
    ARQUIVO           DM_FOTO
);

CREATE TABLE REPLICACAO_RECEBIDA (
    IDREPLICACAO_RECEBIDA   DM_ID,
    IDSINCRONISMO_CONTROLE  DM_INTEGER NOT NULL,
    IDSINCRONISMO_ORIGEM    DM_INTEGER NOT NULL,
    DATA_HORA               DM_DATA NOT NULL
);

CREATE TABLE SERIE_ESTUDO (
    ID_SERIE_ESTUDO  DM_ID,
    SERIE_ESTUDO     DM_VARCHAR100
);

CREATE TABLE SETOR_TRABALHO (
    ID_SETOR_TRABALHO  DM_ID,
    SETOR_TRABALHO     DM_NOME
);

CREATE TABLE SINCRONISMO (
    IDSINCRONISMO           DM_ID,
    IDSINCRONISMO_CONTROLE  DM_ID,
    SCRIPT                  DM_VARCHAR8192,
    STATUS                  DM_VARCHAR1,
    ORDEM                   DM_INTEGER,
    DATA_HORA               DM_DATA,
    RETORNO                 DM_VARCHAR1,
    USUARIO                 DM_NOME
);

CREATE TABLE SINCRONISMO_BLOB (
    IDSINCRONISMO_BLOB      DM_ID,
    IDSINCRONISMO_CONTROLE  DM_ID,
    DATA_HORA               DM_DATA NOT NULL,
    USUARIO                 DM_NOME,
    TABELA                  DM_NOME,
    CAMPO                   DM_NOME,
    NOME_PK                 DM_NOME,
    VALOR_PK                DM_NOME_OBRIGA
);

CREATE TABLE SINCRONISMO_CONTROLE (
    IDSINCRONISMO_CONTROLE  DM_ID,
    DESCRICAO               DM_NOME_OBRIGA,
    CONEXAO                 DM_NOME_OBRIGA,
    TIPO_CONTROLE           DM_VARCHAR10,
    IDEMPRESA               DM_INTEGER,
    USUARIO                 DM_NOME,
    SENHA                   DM_NOME,
    BANCO_DADOS_RETORNO     DM_VARCHAR100
);

CREATE TABLE SOLARIO (
    ID_SOLARIO      DM_ID,
    SOLARIO         DM_NOME,
    IDGALERIA       DM_INTEGER,
    IDPAVILHAO      DM_INTEGER,
    DIA_VISITA      DM_VARCHAR1,
    PERIODO_VISITA  DM_VARCHAR1
);

CREATE TABLE SUB_EVENTOS (
    ID_SUB_EVENTOS     DM_ID,
    DESCRICAO_EVENTOS  DM_VARCHAR200,
    CODIGO_SUB_EVENTO  DM_INTEGER
);

CREATE TABLE TIPO_DOCUMENTO (
    ID_TIPO_DOCUMENTO  DM_ID,
    TIPODOCUMENTO      DM_VARCHAR200
);

CREATE TABLE TIPO_PATRIMONIO (
    IDTIPO_PATRIMONIO  DM_ID,
    DESCRICAO          DM_VARCHAR100
);

CREATE TABLE TRABALHO (
    ID_TRABALHO          DM_ID,
    ID_INTERNO           DM_ID,
    ID_SETOR_TRABALHO    DM_INTEGER,
    ID_FUNCAO_INTERNO    DM_INTEGER,
    DATA_TRABALHO        DM_DATA,
    OBSERVACAO_TRABALHO  DM_MEMO,
    ID_UNIDADE_PENAL     DM_INTEGER
);

CREATE TABLE UNIDADE_PENAL (
    ID_UP        DM_ID,
    NOME_UP      DM_NOME,
    ENDERECO     DM_NOME,
    NUMERO       DM_VARCHAR30,
    BAIRRO       DM_NOME,
    COMPLEMENTO  DM_NOME,
    CEP          DM_CEP,
    ID_CIDADE    DM_INTEGER,
    FONE         DM_FONE,
    FAX          DM_FONE,
    CONTATO      DM_NOME,
    FOTO         DM_MEMO,
    CAPITAL      DM_VARCHAR30,
    REGIAO       DM_NOME,
    SIGLA        DM_NOME,
    REGIME       DM_VARCHAR30,
    GENERO       DM_VARCHAR30,
    EMAIL        DM_VARCHAR100,
    CNPJ         DM_VARCHAR30
);

CREATE TABLE VINC_ARTIGO (
    ID_VINC_ARTIGO  DM_ID,
    ID_ARTIGO       DM_INTEGER,
    ID_PROCESSO     DM_INTEGER
);

CREATE TABLE VINC_ARTIGO_PERFIL (
    ID_VINC_ARTIGO_PERFIL  DM_ID,
    ARTIGO_PERFIL          DM_VARCHAR8192,
    ID_INTERNO             DM_INTEGER
);

CREATE TABLE VINC_FALTA_DISCIPLINAR (
    ID_VINC_FALTA_DISCIPLINAR  DM_ID,
    ID_FALTA_DISCIPLINAR       DM_INTEGER,
    ID_INTERNO                 DM_INTEGER,
    DATA_INCIDENCIA            DM_DATA,
    DATA_REABILITACAO          DM_DATA,
    OBS                        DM_VARCHAR200,
    CONCLUSAOCD                DM_VARCHAR100,
    NUMERO_PDI                 DM_VARCHAR30,
    DATA_CONDENACAO            DM_DATA,
    RESULTADO                  DM_NOME,
    DATA_RESULTADO             DM_DATA
);

CREATE TABLE VISITANTE (
    ID_VISITANTE                   DM_ID,
    VISITANTE                      DM_NOME,
    ID_GRAU_PARENTESCO             DM_INTEGER,
    ID_INTERNO                     DM_INTEGER,
    NUMERO_CARTEIRINHA             DM_VARCHAR30,
    CPF                            DM_CPF,
    RG                             DM_VARCHAR100,
    ORGAO_EXPEDIDOR                DM_VARCHAR30,
    SEXO                           DM_FONE,
    DATA_CADASTRO                  DM_DATA,
    STATUS                         DM_VARCHAR1,
    DATA_ULT_VISITA                DM_DATA,
    FOTO                           DM_FOTO,
    MOTIVO_INATIVO                 DM_VARCHAR200,
    QUANTIDADE_MENOR               DM_INTEGER,
    ID_UP                          DM_INTEGER,
    DATA_EMISSAO_RG                DM_DATA,
    COMPROVANTE_RESIDENCIA         DM_VARCHAR100,
    CERTIDAO                       DM_VARCHAR200,
    CERTIDAO_ANTECEDENTE_CRIMINAL  DM_VARCHAR100,
    PAI                            DM_VARCHAR100,
    MAE                            DM_VARCHAR100,
    ENDERECO                       DM_VARCHAR100,
    NUMERO                         DM_VARCHAR100,
    BAIRRO                         DM_VARCHAR100,
    COMPLEMENETO                   DM_VARCHAR100,
    IDCIDADE                       DM_INTEGER,
    CEP                            DM_VARCHAR100,
    FONE                           DM_VARCHAR100,
    CONTATO                        DM_VARCHAR100,
    DATA_NASCIMENTO                DM_DATA,
    TIPO_VISITANTE                 DM_VARCHAR100,
    NEGATIVO_CERTIDAO_FEDERAL      DM_VARCHAR100,
    NEGATIVO_CERTIDAO_ESTADUAL     DM_VARCHAR100,
    TEM_COMPROVANTE_RESIDENCIA     DM_VARCHAR100,
    NUMERO_CERTIDAO_NASCIMENTO     DM_VARCHAR100,
    ID_NACIONALIDADE               DM_INTEGER,
    ID_NATURALIDADE                DM_INTEGER,
    TITULO_ELEITOR                 DM_VARCHAR100
);

CREATE TABLE VISITANTE_INTERNO (
    ID_VISITANTE_INTERNO  DM_ID,
    ID_VISITANTE          DM_ID,
    ID_INTERNO            DM_ID,
    ID_GRAU_PARENTESCO    DM_ID
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: VW_ACESSOS_DEPEN */
CREATE VIEW VW_ACESSOS_DEPEN(
    NOME_FUNCIONARIO,
    IDCONEXAO,
    ID_FUNCIOANRIO,
    DATA_HORA_ENTRADA,
    DATA_HORA_SAIDA,
    IP_MAQUINA,
    TELA_MOMENTO)
AS
select F.nome_funcionario,C.*
from CONEXAO C
JOIN FUNCIONARIO F ON C.id_funcioanrio=F.id_funcionario
where C.idconexao like '20%'
AND C.data_hora_entrada>='07.04.2012'
AND C.ip_maquina<>'10.0.5.32'
;



/* View: VW_CONEXAO_DEPEN */
CREATE VIEW VW_CONEXAO_DEPEN(
    DATA,
    PENITENCIARIA,
    NOME_FUNCIONARIO,
    HORA)
AS
SELECT
CAST(C.DATA_HORA_ENTRADA AS DATE) DATA,
IIF(SUBSTR(C.IDCONEXAO,1,2)='10','PFCG',
   IIF(SUBSTR(C.IDCONEXAO,1,2)='20','DEPEN',
     IIF(SUBSTR(C.IDCONEXAO,1,2)='30','PFMOS',
       IIF(SUBSTR(C.IDCONEXAO,1,2)='40','PFCAT','PFPV')))) PENITENCIARIA,
       F.NOME_FUNCIONARIO,
       CAST(C.DATA_HORA_ENTRADA AS TIME) HORA
FROM CONEXAO C
JOIN FUNCIONARIO F ON (C.ID_FUNCIOANRIO=F.ID_FUNCIONARIO)
WHERE C.IDCONEXAO NOT LIKE '20%'
--GROUP BY SUBSTR(C.IDCONEXAO,1,2), CAST(C.DATA_HORA_ENTRADA AS DATE)
ORDER BY 1,2
;



/* View: VW_FUNCIONARIO */
CREATE VIEW VW_FUNCIONARIO(
    "Codigo",
    "Nome Funcionario",
    "Matricula",
    CPF,
    "Login",
    "Lotacao",
    "Funcao",
    "Admissao",
    "Classe",
    "Mae",
    "Pai",
    RG,
    "Orgao Emissor",
    "Fator RH",
    "Naturalidade",
    "Data Nascimento",
    "Cargo",
    "Area",
    "Endereco",
    "Cidade",
    "Telefone",
    "Celular",
    "Email",
    "Data Lotacao",
    "Escolaridade",
    "Sexo",
    "Posto de Trabalho",
    "Curso")
AS
select f.id_funcionario as "Codigo",
       f.nome_funcionario as "Nome Funcionario",
       f.matricula as "Matricula",
       f.cpf as "CPF",
       f.login as "Login",
       u.nome_up as "Lotacao",
       f.funcao as "Funcao",
       f.admissao as "Admissao",
       f.classe as "Classe",
       f.mae as "Mae",
       f.pai as "Pai",
       f.rg as "RG",
       f.orgaoemissor as "Orgao Emissor",
       f.fatorrh as "Fator RH",
       c.cidade||' - '||c.uf as "Naturalidade",
       f.dtnascimento as "Data Nascimento",
       f.cargo as "Cargo",
       f.area as "Area",
       f.endereco||', '||f.numero||' '||f.complemento||', '||f.bairro||' - '||f.cep as "Endereco",
       cid.cidade||' - '||cid.uf as "Cidade",
       f.fone as "Telefone",
       f.celular as "Celular",
       f.email as "Email",
       f.data_lotacao as "Data Lotacao",
       f.escolaridade as "Escolaridade",
       f.sexo as "Sexo",
       p.posto_trabalho as "Posto de Trabalho",
       cr.curso as "Curso"
from funcionario f
left join cidade c on (f.id_naturalidade = c.id_cidade)
left join cidade cid on (f.id_cidade = cid.id_cidade)
left join posto_trabalho p on (p.idposto_trabalho = f.idposto_trabalho)
left join curso cr on (cr.id_curso = f.id_curso)
left join unidade_penal u on (u.id_up = f.id_up)
where coalesce(f.nome_funcionario,'')<>''
;



/* View: VW_INTERNO */
CREATE VIEW VW_INTERNO(
    "Codigo",
    "Nome Interno",
    "Prontuario",
    "Profissao",
    "Pavilhao",
    "Galeria",
    "Solario",
    "Cela",
    "Data de Entrada",
    "Mae",
    "Pai",
    "Naturalidade",
    "Nacionalidade",
    "Raca",
    "Escolaridade",
    "Endereco",
    "Cidade",
    "Telefone",
    "Contato",
    "Religiao",
    "Procedencia",
    "Condenacao",
    "Data Prisao",
    "Status",
    "Sexo",
    "Unidade Penal",
    "Condicao Interno",
    "Destino",
    "Isolamento",
    "Data Saida",
    "Motivo Saida",
    "Data Nascimento",
    RG,
    CPF,
    "Estado Civil",
    "Vulgo",
    "Outro Nome",
    "Sinais Particulares",
    "Altura",
    "Peso",
    "Artigo",
    "Cor de Olhos",
    "Cor Cabelo",
    "Relacao de Drogas Com o Crime",
    "Doenca Grave",
    "Doenca Mental",
    "Problema de Saude",
    "Sintomas Depressao",
    "Sintomas Psicoticos",
    "Personalidade",
    "Medicacao Controlada",
    "Doenca Contagiosa",
    "Faccao",
    "Numero Infopen",
    "Titulo de Eleitor",
    "Numero Roupa",
    "Sigla")
AS
select i.id_interno as "Codigo",
       i.nome_interno as "Nome Interno",
       i.rgi as "Prontuario",
       i.idprofissao as "Profissao",
       pa.pavilhao as "Pavilhao",
       g.galeria as "Galeria",
       s.solario as "Solario",
       c.cela as "Cela",
       i.data_entrada as "Data de Entrada",
       i.mae as "Mae",
       i.pai as "Pai",
       ci.cidade||' - '||ci.uf as "Naturalidade",
       n.nacionalidade as "Nacionalidade",
       r.raca as "Raca",
       e.escolaridade as "Escolaridade",
       i.endereco||', '||i.numero||' '||i.complemeneto||', '||i.bairro||' - '||i.cep as "Endereco",
       cid.cidade||' - '||cid.uf as "Cidade",
       i.fone as "Telefone",
       i.contato as "Contato",
       i.religiao as "Religiao",
       pr.proedencia as "Procedencia",
       i.condenacao as "Condenacao",
       i.data_prisao as "Data Prisao",
       i.st as "Status",
       i.sexo as "Sexo",
       u.nome_up as "Unidade Penal",
       co.descricao as "Condicao Interno",
       d.destino as "Destino",
       i.status_isolamento as "Isolamento",
       i.data_saida as "Data Saida",
       i.motivo_saida as "Motivo Saida",
       i.data_nascimento as "Data Nascimento",
       i.rg as "RG",
       i.cpf as "CPF",
       i.estado_civil as "Estado Civil",
       i.vulgo as "Vulgo",
       i.outro_nome as "Outro Nome",
       i.sinais_particulares as "Sinais Particulares",
       i.altura as "Altura",
       i.peso as "Peso",
       i.artigo as "Artigo",
       i.cor_olhos as "Cor de Olhos",
       i.cor_cabelos as "Cor Cabelo",
       i.drogascomcrime as "Relacao de Drogas Com o Crime",
       i.doencagrave as "Doenca Grave",
       i.doencamental as "Doenca Mental",
       i.problemasaude as "Problema de Saude",
       i.sintomasdepressivos as "Sintomas Depressao",
       i.sintomaspsicoticos as "Sintomas Psicoticos",
       i.personalidade as "Personalidade",
       i.medicacaocontrolada as "Medicacao Controlada",
       i.doencainfectocontagiosa as "Doenca Contagiosa",
       i.faccao as "Faccao",
       i.numero_infopen as "Numero Infopen",
       i.titulo_eleitor as "Titulo de Eleitor",
       i.numero_roupa as "Numero Roupa",
       u.sigla as "Sigla"
from interno i
left join profissao p on (i.idprofissao = p.id_profissao)
left join pavilhao pa on (i.idpavilhao = pa.id_pavilhao)
left join galeria g on (i.idgaleria = g.id_galeria)
left join solario s on (i.idsolario = s.id_solario)
left join cela c on (i.idcela = c.id_cela)
left join unidade_penal u on (pa.id_up = u.id_up)
left join cidade ci on (i.idnaturalidade = ci.id_cidade)
left join nacionalidade n on (i.idnacionalidade = n.id_nacionalidade)
left join raca r on (i.idraca = r.id_raca)
left join cidade cid on (i.idcidade = cid.id_cidade)
left join escolaridade e on (i.idescolaridade = e.id_escolaridade)
left join procedencia pr on (i.id_procedencia = pr.id_procedencia)
left join destino d on (i.iddestino = d.id_destino)
left join condicao_interno co on (i.idcondicao_interno = co.idcondicao_interno)
WHERE COALESCE(I.NOME_INTERNO,'')<>''
;



/* View: VW_MIGRA_CENTRO_TRIAGEM */
CREATE VIEW VW_MIGRA_CENTRO_TRIAGEM(
    NOME_INTERNO,
    IDPAVILHAO,
    IDGALERIA,
    IDSOLARIO,
    IDCELA,
    VULGO,
    OUTRO_NOME,
    ID_PROCEDENCIA,
    IDSETOR_TRABALHO,
    ST)
AS
select nome_interno, 
       510 idpavilhao,
       519 idGALERIA,
       552 idSOLARIO,
       (select id_cela
       from cela
       where cela.idpavilhao=510
       and cela.cela='C'||i.cela ) idcela,
--       tipo_cela,
       vulgo, 
       outro_nome, 
       (select first 1 id_procedencia
       from procedencia
       where procedencia.proedencia like '%'||i.procedencia||'%' ) id_procedencia,
       --data_entrada,
       (select first 1 id_setor_trabalho
       from setor_trabalho
       where setor_trabalho.setor_trabalho like '%'||UPPER(i.setor_trabalho)||'%' ) idsetor_trabalho,
--       data_inicio_trabalho,
--       data_final_trabalho,
       SUBSTR(status,1,1) AS ST
from int_ct i
;



/* View: VW_MOV_VISITANTE */
CREATE VIEW VW_MOV_VISITANTE(
    DATA_VISITA,
    ORDEM_VISITA,
    NOME_VISITANTE,
    TOTAL_MENORES,
    SEXO,
    NUMERO_CARTEIRINHA,
    NOME_INTERNO,
    GRAU_PARENTESCO)
AS
select distinct
    m.data_visita,
    m.ordem_visita,
    m.nome_visitante,
    (SELECT COUNT(*) FROM menores MN
     WHERE MN.id_visitante = M.id_visitante),
    M.SEXO,
    m.numero_carteirinha,
    (select list(distinct i.nome_interno,' / ')
     from interno i
     join visitante_interno v on (m.id_visitante = v.id_visitante)
     where (i.id_interno = v.id_interno) ) as nome_interno,
    (select list(distinct g.grau_parentesco,' / ')
     from interno i
     join visitante_interno v on (m.id_visitante = v.id_visitante)
     JOIN grau_parentesco g ON (v.id_grau_parentesco = G.id_grau_parentesco)
     where (i.id_interno = v.id_interno) ) as grau_parentesco
from mov_diario_visitantes m
where m.cancelado is null
;



/* View: VW_STATUS_REPLICACAO_RECEBIDA */
CREATE VIEW VW_STATUS_REPLICACAO_RECEBIDA(
    TOTAL,
    STATUS)
AS
select
max(idreplicacao_recebida) TOTAL,
iif(count(*)-max(idreplicacao_recebida)<>0, 'PROBLEMA', 'OK') STATUS
from replicacao_recebida
;



/* View: VW_VISITANTE_INTERNO */
CREATE VIEW VW_VISITANTE_INTERNO(
    NOME_INTERNO,
    GRAU_PARENTESCO,
    ID_VISITANTE,
    ID_INTERNO,
    ID_GRAU_PARENTESCO,
    ID_VISITANTE_INTERNO)
AS
select
i.nome_interno,
g.grau_parentesco,
v.id_visitante,
v.id_interno,
v.id_grau_parentesco,
v.id_visitante_interno
from visitante_interno v
inner join interno i on (v.id_interno=i.id_interno)
inner join grau_parentesco g on (v.id_grau_parentesco=g.id_grau_parentesco)
;



/* View: VW_VISITANTES */
CREATE VIEW VW_VISITANTES(
    "Tipo",
    "Codigo",
    "Nome Visitante",
    "Grau de Parentesco",
    "Nome Interno",
    "Numero Cartao",
    CPF,
    RG,
    "Orgao Expedidor",
    "Data Emissao RG",
    "Sexo",
    "Data Cadastro",
    "Status",
    "Motivo Inativo",
    "Comprovante de Residencia",
    "Certidoes",
    "Certidao de Antecedentes Crimin",
    "Pai",
    "Mae",
    "Endereco",
    "Telefone",
    "Contato",
    "Cidade",
    "Data Nascimento",
    "Tipo de Visita",
    "Certidao Justica Federal",
    "Certidao Justica Estadual",
    "Comprovante de Residencia1",
    "Certidao de Nascimento",
    "Naturalidade",
    "Nacionalidade")
AS
select 'Maior' "Tipo",
       v.id_visitante as "Codigo",
       v.visitante as "Nome Visitante",
       g.grau_parentesco as "Grau de Parentesco",
       i.nome_interno as "Nome Interno",
       v.numero_carteirinha as "Numero Cartao",
       v.cpf as "CPF",
       v.rg as "RG",
       v.orgao_expedidor as "Orgao Expedidor",
       v.data_emissao_rg as "Data Emissao RG",
       v.sexo as "Sexo",
       v.data_cadastro as "Data Cadastro",
       v.status as "Status",
       v.motivo_inativo as "Motivo Inativo",
       v.comprovante_residencia as "Comprovante de Residencia",
       v.certidao as "Certidoes",
       v.certidao_antecedente_criminal as "Certidao de Antecedentes Criminais",
       v.pai as "Pai",
       v.mae as "Mae",
       v.endereco||', '||v.numero||' '||v.complemeneto||', '||v.bairro||' - '||v.cep as "Endereco",
       v.fone as "Telefone",
       v.contato as "Contato",
       cid.cidade||' - '||cid.uf as "Cidade",
       v.data_nascimento as "Data Nascimento",
       v.tipo_visitante as "Tipo de Visita",
       v.negativo_certidao_federal as "Certidao Justica Federal",
       v.negativo_certidao_estadual as "Certidao Justica Estadual",
       v.tem_comprovante_residencia as "Comprovante de Residencia",
       v.numero_certidao_nascimento as "Certidao de Nascimento",
       ci.cidade||' - '||ci.uf as "Naturalidade",
       n.nacionalidade as "Nacionalidade"
from visitante v
inner join visitante_interno vi on (v.id_visitante = vi.id_visitante)
inner join interno i on (vi.id_interno = i.id_interno)
left join grau_parentesco g on (g.id_grau_parentesco = vi.id_grau_parentesco)
left join cidade ci on (v.id_naturalidade = ci.id_cidade)
left join nacionalidade n on (v.id_nacionalidade = n.id_nacionalidade)
left join cidade cid on (v.idcidade = cid.id_cidade)
where coalesce(v.visitante,'')<>''
union all
select 'Menor' "Tipo",
       m.id_menores as "Codigo",
       m.nome_menores as "Nome Visitante",
       gr.grau_parentesco as "Grau de Parentesco",
       it.nome_interno as "Nome Interno",
       null as "Numero Cartao",
       null as "CPF",
       null as "RG",
       null as "Orgao Expedidor",
       null as "Data Emissao RG",
       null as "Sexo",
       null as "Data Cadastro",
       t.status as "Status",
       t.motivo_inativo as "Motivo Inativo",
       t.comprovante_residencia as "Comprovante de Residencia",
       null as "Certidoes",
       null as "Certidao de Antecedentes Criminais",
       null as "Pai",
       null as "Mae",
       t.endereco||', '||t.numero||' '||t.complemeneto||', '||t.bairro||' - '||t.cep as "Endereco",
       t.fone as "Telefone",
       t.contato as "Contato",
       cidade.cidade||' - '||cidade.uf as "Cidade",
       m.data_nascimento as "Data Nascimento",
       null as "Tipo de Visita",
       null as "Certidao Justica Federal",
       null as "Certidao Justica Estadual",
       null as "Comprovante de Residencia",
       m.numero_certidao_nascimento as "Certidao de Nascimento",
       null as "Naturalidade",
       null as "Nacionalidade"
from visitante t
inner join visitante_interno vis on (t.id_visitante = vis.id_visitante)
left join menores m on (t.id_visitante = m.id_visitante)
left join interno it on (it.id_interno = vis.id_interno)
left join cidade on (t.idcidade = cidade.id_cidade)
left join grau_parentesco gr on (gr.id_grau_parentesco = m.id_grau_parentesco)
where coalesce(m.nome_menores,'')<>''
;



/* View: WV_ACOMPANHAR_SINCRONISMO */
CREATE VIEW WV_ACOMPANHAR_SINCRONISMO(
    DESCRICAO,
    TOTAL)
AS
select C.descricao, count(*)
from sincronismo S
JOIN SINCRONISMO_CONTROLE C ON (C.idsincronismo_controle=S.idsincronismo_controle)
group by C.descricao
;




/******************************************************************************/
/***                           Unique Constraints                           ***/
/******************************************************************************/

ALTER TABLE CONDICAO_INTERNO ADD CONSTRAINT UNQ1_CONDICAO_INTERNO UNIQUE (DESCRICAO);
ALTER TABLE FUNCAO_INTERNO ADD CONSTRAINT UNQ1_FUNCAO_INTERNO UNIQUE (FUNCAO_INTERNO);
ALTER TABLE GALERIA ADD CONSTRAINT UNQ1_GALERIA UNIQUE (GALERIA, IDPAVILHAO);
ALTER TABLE MOV_OCORRENCIA_ADV ADD CONSTRAINT UNQ1_MOV_OCORRENCIA_ADV UNIQUE (IDMOV_OCORRENCIA, IDADVOGADO);
ALTER TABLE MOV_OCORRENCIA_FUNC ADD CONSTRAINT UNQ1_MOV_OCORRENCIA_FUNC UNIQUE (IDMOV_OCORRENCIA, IDFUNCIONARIO);
ALTER TABLE MOV_OCORRENCIA_INT ADD CONSTRAINT UNQ1_MOV_OCORRENCIA_INT UNIQUE (IDMOV_OCORRENCIA, IDINTERNO);
ALTER TABLE MOV_OCORRENCIA_VIS ADD CONSTRAINT UNQ1_MOV_OCORRENCIA_VIS UNIQUE (IDMOV_OCORRENCIA, IDVISITANTE);
ALTER TABLE MOV_PROCEDIMENTOS_ADV ADD CONSTRAINT UNQ1_MOV_PROCEDIMENTOS_ADV UNIQUE (IDMOV_PROCEDIMENTOS, IDADVOGADO);
ALTER TABLE MOV_PROCEDIMENTOS_FUNC ADD CONSTRAINT UNQ1_MOV_PROCEDIMENTOS_FUNC UNIQUE (IDMOV_PROCEDIMENTOS, IDFUNCIONARIO);
ALTER TABLE MOV_PROCEDIMENTOS_INT ADD CONSTRAINT UNQ1_MOV_PROCEDIMENTOS_INT UNIQUE (IDMOV_PROCEDIMENTOS, IDINTERNO);
ALTER TABLE MOV_PROCEDIMENTOS_VIS ADD CONSTRAINT UNQ1_MOV_PROCEDIMENTOS_VIS UNIQUE (IDMOV_PROCEDIMENTOS, IDVISITANTE);
ALTER TABLE NACIONALIDADE ADD CONSTRAINT UNQ1_NACIONALIDADE UNIQUE (NACIONALIDADE);
ALTER TABLE REPLICACAO_RECEBIDA ADD CONSTRAINT UNQ1_REPLICACAO_RECEBIDA UNIQUE (IDSINCRONISMO_ORIGEM, IDSINCRONISMO_CONTROLE);
ALTER TABLE SINCRONISMO_CONTROLE ADD CONSTRAINT UNQ1_SINCRONISMO_CONTROLE UNIQUE (CONEXAO);
ALTER TABLE SOLARIO ADD CONSTRAINT UNQ1_SOLARIO UNIQUE (SOLARIO, IDGALERIA);
ALTER TABLE VISITANTE_INTERNO ADD CONSTRAINT UNQ1_VISITANTE_INTERNO UNIQUE (ID_VISITANTE, ID_INTERNO);


/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE ACESSORIOS ADD CONSTRAINT PK_ACESSORIOS PRIMARY KEY (ID_ACESSORIO);
ALTER TABLE ADVOGADO ADD CONSTRAINT PK_ADVOGADO PRIMARY KEY (ID_ADVOGADO);
ALTER TABLE ADVOGADOS_INTERNOS ADD CONSTRAINT PK_ADVOGADOS_INTERNOS PRIMARY KEY (ID_ADVOGADOS_INTERNOS);
ALTER TABLE AGENDA_ASSUNTOS ADD CONSTRAINT PK_AGENDA_ASSUNTOS PRIMARY KEY (IDAGENDA_ASSUNTOS);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT PK_AGENDA_ATENDIMENTO PRIMARY KEY (IDAGENDA_ATENDIMENTO);
ALTER TABLE AGENDA_SITUACAO ADD CONSTRAINT PK_AGENDA_SITUACAO PRIMARY KEY (IDAGENDA_SITUACAO);
ALTER TABLE AGENDA_TIPO_CONTATOS ADD CONSTRAINT PK_AGENDA_TIPO_CONTATOS PRIMARY KEY (IDAGENDA_TIPO_CONTATOS);
ALTER TABLE AGENTE_EQUIPE ADD CONSTRAINT PK_AGENTE_EQUIPE PRIMARY KEY (IDAGENTE_EQUIPE);
ALTER TABLE AREA_SERVIDOR ADD CONSTRAINT PK_AREA_SERVIDOR PRIMARY KEY (ID_AREA);
ALTER TABLE ARQUIVOS ADD CONSTRAINT PK_ARQUIVOS PRIMARY KEY (IDARQUIVOS);
ALTER TABLE ARTIGO ADD CONSTRAINT PK_ARTIGO PRIMARY KEY (ID_ARTIGO);
ALTER TABLE ARTIGO_PERFIL ADD CONSTRAINT PK_ARTIGO_PERFIL PRIMARY KEY (ID_ARTIGO_PERFIL);
ALTER TABLE ATENDIMENTO_PSICOSSOCIAL ADD CONSTRAINT PK_ATENDIMENTO_PSICOSSOCIAL PRIMARY KEY (ID_ATENDIMENTO);
ALTER TABLE BACKUP_SINCRONISMO ADD CONSTRAINT PK_BACKUP_SINCRONISMO PRIMARY KEY (IDBACKUP_SINCRONISMO);
ALTER TABLE BACKUP_SINCRONISMO_BLOB ADD CONSTRAINT PK_BACKUP_SINCRONISMO_BLOB PRIMARY KEY (IDBACKUP_SINCRONISMO_BLOB);
ALTER TABLE BACKUP_VISITANTE ADD CONSTRAINT PK_BACKUP_VISITANTE PRIMARY KEY (IDBACKUP_VISITANTE);
ALTER TABLE CALC_SETOR_TRABALHO ADD CONSTRAINT PK_CALC_SETOR_TRABALHO PRIMARY KEY (IDCALC_SETOR_TRABALHO);
ALTER TABLE CALC_TRABALHO_ITENS ADD CONSTRAINT PK_CALC_TRABALHO_ITENS PRIMARY KEY (ID_CALC_TRABALHO_ITENS);
ALTER TABLE CELA ADD CONSTRAINT PK_CELA PRIMARY KEY (ID_CELA);
ALTER TABLE CIDADE ADD CONSTRAINT PK_CIDADE PRIMARY KEY (ID_CIDADE);
ALTER TABLE CODIGO_PENAL ADD CONSTRAINT PK_CODIGO_PENAL PRIMARY KEY (IDCODIGO_PENAL);
ALTER TABLE CONDENACAO_INTERNO ADD CONSTRAINT PK_CONDENACAO_INTERNO PRIMARY KEY (IDCONDENACAO_INTERNO);
ALTER TABLE CONDICAO_INTERNO ADD CONSTRAINT PK_CONDICAO_INTERNO PRIMARY KEY (IDCONDICAO_INTERNO);
ALTER TABLE CONEXAO ADD CONSTRAINT PK_CONEXAO PRIMARY KEY (IDCONEXAO);
ALTER TABLE CONTROLE_PERMANENCIA ADD CONSTRAINT PK_CONTROLE_PERMANENCIA PRIMARY KEY (ID_CONTROLE_PERMANENCIA);
ALTER TABLE CTC ADD CONSTRAINT PK_CTC PRIMARY KEY (IDCTC);
ALTER TABLE CURSO ADD CONSTRAINT PK_CURSO PRIMARY KEY (ID_CURSO);
ALTER TABLE DESTINO ADD CONSTRAINT PK_DESTINO PRIMARY KEY (ID_DESTINO);
ALTER TABLE DETRACAO ADD CONSTRAINT PK_DETRACAO PRIMARY KEY (IDDETRACAO);
ALTER TABLE DOCUMENTOS_DIGITALIZADOS ADD CONSTRAINT PK_DOCUMENTOS_DIGITALIZADOS PRIMARY KEY (ID_DOCUMENTO_DIGITALIZADO);
ALTER TABLE DOCUMENTOS_PROCESSO ADD CONSTRAINT PK_DOCUMENTOS_PROCESSO PRIMARY KEY (IDDOCUMENTOS_PROCESSO);
ALTER TABLE EQUIPE ADD CONSTRAINT PK_EQUIPE PRIMARY KEY (IDEQUIPE);
ALTER TABLE ESCALA_PLANTAO ADD CONSTRAINT PK_ESCALA_PLANTAO PRIMARY KEY (IDESCALA_PLANTAO);
ALTER TABLE ESCOLARIDADE ADD CONSTRAINT PK_ESCOLARIDADE PRIMARY KEY (ID_ESCOLARIDADE);
ALTER TABLE ESTADO ADD CONSTRAINT PK_ESTADO PRIMARY KEY (ID_ESTADO);
ALTER TABLE EVENTOS ADD CONSTRAINT PK_EVENTOS PRIMARY KEY (ID_EVENTOS);
ALTER TABLE FALTA_DISCIPLINAR ADD CONSTRAINT PK_FALTA_DISCIPLINAR PRIMARY KEY (ID_FALTA_DISCIPLINAR);
ALTER TABLE FILHOS ADD CONSTRAINT PK_FILHOS PRIMARY KEY (IDFILHOS);
ALTER TABLE FORNECEDOR ADD CONSTRAINT PK_FORNECEDOR PRIMARY KEY (ID_FORNECEDOR);
ALTER TABLE FUNCAO_FUNCIONARIO ADD CONSTRAINT PK_FUNCAO_FUNCIONARIO PRIMARY KEY (ID_FUNCAO_FUNCIONARIO);
ALTER TABLE FUNCAO_INTERNO ADD CONSTRAINT PK_FUNCAO_INTERNO PRIMARY KEY (ID_FUNCAO_INTERNO);
ALTER TABLE FUNCIONARIO ADD CONSTRAINT PK_FUNCIONARIO PRIMARY KEY (ID_FUNCIONARIO);
ALTER TABLE GALERIA ADD CONSTRAINT PK_GALERIA PRIMARY KEY (ID_GALERIA);
ALTER TABLE GRAU_PARENTESCO ADD CONSTRAINT PK_GRAU_PARENTESCO PRIMARY KEY (ID_GRAU_PARENTESCO);
ALTER TABLE HISTORICO_CLINICA_MEDICA ADD CONSTRAINT PK_HISTORICO_CLINICA_MEDICA PRIMARY KEY (ID_HISTORICO_CLINICA_MEDICA);
ALTER TABLE HISTORICO_ENFERMAGEM ADD CONSTRAINT PK_HISTORICO_ENFERMAGEM PRIMARY KEY (ID_HISTORICO_ENFERMAGEM);
ALTER TABLE HISTORICO_ESTUDO ADD CONSTRAINT PK_HISTORICO_ESTUDO PRIMARY KEY (ID_HISTORICO_ESTUDO);
ALTER TABLE HISTORICO_FARMACIA ADD CONSTRAINT PK_HISTORICO_FARMACIA PRIMARY KEY (ID_HISTORICO_FARMACIA);
ALTER TABLE HISTORICO_INTERNO ADD CONSTRAINT PK_HISTORICO_INTERNO PRIMARY KEY (IDHISTORICO_INTERNO);
ALTER TABLE HISTORICO_ODONTOLOGIA ADD CONSTRAINT PK_HISTORICO_ODONTOLOGIA PRIMARY KEY (ID_HISTORICO_ODONTOLOGIA);
ALTER TABLE HISTORICO_PEDAGOGIA ADD CONSTRAINT PK_HISTORICO_PEDAGOGIA PRIMARY KEY (ID_HISTORICO_PEDAGOGIA);
ALTER TABLE HISTORICO_PSICOLOGIA ADD CONSTRAINT PK_HISTORICO_PSICOLOGIA PRIMARY KEY (ID_HISTORICO_PSICOLOGIA);
ALTER TABLE HISTORICO_PSIQUIATRIA ADD CONSTRAINT PK_HISTORICO_PSIQUIATRIA PRIMARY KEY (ID_HISTORICO_PSIQUIATRIA);
ALTER TABLE HISTORICO_SERVICO_SOCIAL ADD CONSTRAINT PK_HISTORICO_SERVICO_SOCIAL PRIMARY KEY (ID_HISTORICO_SERVICO_SOCIAL);
ALTER TABLE HISTORICO_TERAPIA_OCUP ADD CONSTRAINT PK_HISTORICO_TERAPIA_OCUP PRIMARY KEY (ID_HISTORICO_TERAPIA_OCUP);
ALTER TABLE HISTORICO_VISITANTE ADD CONSTRAINT PK_HISTORICO_VISITANTE PRIMARY KEY (ID_HISTORICO_VISITANTE);
ALTER TABLE HORARIO_FUNCIONARIO ADD CONSTRAINT PK_HORARIO_FUNCIONARIO PRIMARY KEY (IDHORARIO_FUNCIONARIO);
ALTER TABLE INTELIGENCIA ADD CONSTRAINT PK_INTELIGENCIA PRIMARY KEY (ID_INTELIGENCIA);
ALTER TABLE INTERNO ADD CONSTRAINT PK_INTERNO PRIMARY KEY (ID_INTERNO);
ALTER TABLE INTERRUPCAO ADD CONSTRAINT PK_INTERRUPCAO PRIMARY KEY (IDINTERRUPCAO);
ALTER TABLE ITENS_PATRIMONIO ADD CONSTRAINT PK_ITENS_PATRIMONIO PRIMARY KEY (ID_ITENS_PATRIMONIO);
ALTER TABLE LIVRO ADD CONSTRAINT PK_LIVRO PRIMARY KEY (ID_LIVRO);
ALTER TABLE LIVRO_INTERNO ADD CONSTRAINT PK_LIVRO_INTERNO PRIMARY KEY (ID_LIVRO_INTERNO);
ALTER TABLE MENORES ADD CONSTRAINT PK_MENORES PRIMARY KEY (ID_MENORES);
ALTER TABLE MENSAGEM_BANCO_DADOS ADD CONSTRAINT PK_MENSAGEM_BANCO_DADOS PRIMARY KEY (IDMENSAGEM_BANCO_DADOS);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT PK_MOV_CAUTELA PRIMARY KEY (IDMOV_CAUTELA);
ALTER TABLE MOV_DIARIO_VISITANTES ADD CONSTRAINT PK_MOV_DIARIO_VISITANTES PRIMARY KEY (ID_MOV_DIARIO_VISITANTES);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT PK_MOV_EVENTOS PRIMARY KEY (IDMOV_EVENTOS);
ALTER TABLE MOV_INTERNO ADD CONSTRAINT PK_MOV_INTERNO PRIMARY KEY (ID_MOV_INTERNO);
ALTER TABLE MOV_OCORRENCIA ADD CONSTRAINT PK_MOV_OCORRENCIA PRIMARY KEY (IDMOV_OCORRENCIA);
ALTER TABLE MOV_OCORRENCIA_ADV ADD CONSTRAINT PK_MOV_OCORRENCIA_ADV PRIMARY KEY (IDMOV_OCORRENCIA_ADV);
ALTER TABLE MOV_OCORRENCIA_FUNC ADD CONSTRAINT PK_MOV_OCORRENCIA_FUNC PRIMARY KEY (IDMOV_OCORRENCIA_FUNC);
ALTER TABLE MOV_OCORRENCIA_INT ADD CONSTRAINT PK_MOV_OCORRENCIA_INT PRIMARY KEY (IDMOV_OCORRENCIA_INT);
ALTER TABLE MOV_OCORRENCIA_QUEST ADD CONSTRAINT PK_MOV_OCORRENCIA_QUEST PRIMARY KEY (IDMOV_OCORRENCIA_QUEST);
ALTER TABLE MOV_OCORRENCIA_VIS ADD CONSTRAINT PK_MOV_OCORRENCIA_VIS PRIMARY KEY (IDMOV_OCORRENCIA_VIS);
ALTER TABLE MOV_PROCEDIMENTOS ADD CONSTRAINT PK_MOV_PROCEDIMENTOS PRIMARY KEY (IDMOV_PROCEDIMENTOS);
ALTER TABLE MOV_PROCEDIMENTOS_ADV ADD CONSTRAINT PK_MOV_PROCEDIMENTOS_ADV PRIMARY KEY (IDMOV_PROCEDIMENTOS_ADV);
ALTER TABLE MOV_PROCEDIMENTOS_FUNC ADD CONSTRAINT PK_MOV_PROCEDIMENTOS_FUNC PRIMARY KEY (IDMOV_PROCEDIMENTOS_FUNC);
ALTER TABLE MOV_PROCEDIMENTOS_INT ADD CONSTRAINT PK_MOV_PROCEDIMENTOS_INT PRIMARY KEY (IDMOV_PROCEDIMENTOS_INT);
ALTER TABLE MOV_PROCEDIMENTOS_VIS ADD CONSTRAINT PK_MOV_PROCEDIMENTOS_VIS PRIMARY KEY (IDMOV_PROCEDIMENTOS_VIS);
ALTER TABLE MOV_TRABALHO ADD CONSTRAINT PK_MOV_TRABALHO PRIMARY KEY (ID_MOV_TRABALHO);
ALTER TABLE NACIONALIDADE ADD CONSTRAINT PK_NACIONALIDADE PRIMARY KEY (ID_NACIONALIDADE);
ALTER TABLE OCORRENCIA ADD CONSTRAINT PK_OCORRENCIA PRIMARY KEY (IDOCORRENCIA);
ALTER TABLE OCORRENCIA_PROCEDIMENTOS ADD CONSTRAINT PK_OCORRENCIA_PROCEDIMENTOS PRIMARY KEY (IDOCORRENCIA_PROCEDIMENTOS);
ALTER TABLE PADRAO ADD CONSTRAINT PK_PADRAO PRIMARY KEY (IDPADRAO);
ALTER TABLE PATRIMONIO ADD CONSTRAINT PK_PATRIMONIO PRIMARY KEY (IDPATRIMONIO);
ALTER TABLE PAVILHAO ADD CONSTRAINT PK_PAVILHAO PRIMARY KEY (ID_PAVILHAO);
ALTER TABLE PERMANENCIA_SCANER ADD CONSTRAINT PK_PERMANENCIA_SCANER PRIMARY KEY (ID_PERMANENCIA_SCANER);
ALTER TABLE PLANILHA_DINAMICA ADD CONSTRAINT PK_PLANILHA_DINAMICA PRIMARY KEY (IDPLANILHA_DINAMICA);
ALTER TABLE POSTO_TRABALHO ADD CONSTRAINT PK_POSTO_TRABALHO PRIMARY KEY (IDPOSTO_TRABALHO);
ALTER TABLE PROCEDENCIA ADD CONSTRAINT PK_PROCEDENCIA PRIMARY KEY (ID_PROCEDENCIA);
ALTER TABLE PROCEDIMENTOS ADD CONSTRAINT PK_PROCEDIMENTOS PRIMARY KEY (IDPROCEDIMENTOS);
ALTER TABLE PROCEDIMENTO_POSTO ADD CONSTRAINT PK_PROCEDIMENTO_POSTO PRIMARY KEY (IDPROCEDIMENTO_POSTO);
ALTER TABLE PROCESSO ADD CONSTRAINT PK_PROCESSO PRIMARY KEY (IDPROCESSO);
ALTER TABLE PROFISSAO ADD CONSTRAINT PK_PROFISSAO PRIMARY KEY (ID_PROFISSAO);
ALTER TABLE QUESTIONAMENTO ADD CONSTRAINT PK_QUESTIONAMENTO PRIMARY KEY (IDQUESTIONAMENTO);
ALTER TABLE RACA ADD CONSTRAINT PK_RACA PRIMARY KEY (ID_RACA);
ALTER TABLE REMEDIO ADD CONSTRAINT PK_REMEDIO PRIMARY KEY (ID_REMEDIO);
ALTER TABLE REMEDIO_INTERNO ADD CONSTRAINT PK_REMEDIO_INTERNO PRIMARY KEY (ID_REMEDIO_INTERNO);
ALTER TABLE REMICAO ADD CONSTRAINT PK_REMICAO PRIMARY KEY (IDREMICAO);
ALTER TABLE REPLICACAO_RECEBIDA ADD CONSTRAINT PK_REPLICACAO_RECEBIDA PRIMARY KEY (IDREPLICACAO_RECEBIDA);
ALTER TABLE SERIE_ESTUDO ADD CONSTRAINT PK_SERIE_ESTUDO PRIMARY KEY (ID_SERIE_ESTUDO);
ALTER TABLE SETOR_TRABALHO ADD CONSTRAINT PK_SETOR_TRABALHO PRIMARY KEY (ID_SETOR_TRABALHO);
ALTER TABLE SINCRONISMO ADD CONSTRAINT PK_SINCRONISMO PRIMARY KEY (IDSINCRONISMO);
ALTER TABLE SINCRONISMO_BLOB ADD CONSTRAINT PK_SINCRONISMO_BLOB PRIMARY KEY (IDSINCRONISMO_BLOB);
ALTER TABLE SINCRONISMO_CONTROLE ADD CONSTRAINT PK_SINCRONISMO_CONTROLE PRIMARY KEY (IDSINCRONISMO_CONTROLE);
ALTER TABLE SOLARIO ADD CONSTRAINT PK_SOLARIO PRIMARY KEY (ID_SOLARIO);
ALTER TABLE SUB_EVENTOS ADD CONSTRAINT PK_SUB_EVENTOS PRIMARY KEY (ID_SUB_EVENTOS);
ALTER TABLE TIPO_DOCUMENTO ADD CONSTRAINT PK_TIPO_DOCUMENTO PRIMARY KEY (ID_TIPO_DOCUMENTO);
ALTER TABLE TIPO_PATRIMONIO ADD CONSTRAINT PK_TIPO_PATRIMONIO PRIMARY KEY (IDTIPO_PATRIMONIO);
ALTER TABLE TRABALHO ADD CONSTRAINT PK_TRABALHO PRIMARY KEY (ID_TRABALHO);
ALTER TABLE UNIDADE_PENAL ADD CONSTRAINT PK_UNIDADE_PENAL PRIMARY KEY (ID_UP);
ALTER TABLE VINC_ARTIGO ADD CONSTRAINT PK_VINC_ARTIGO PRIMARY KEY (ID_VINC_ARTIGO);
ALTER TABLE VINC_ARTIGO_PERFIL ADD CONSTRAINT PK_VINC_ARTIGO_PERFIL PRIMARY KEY (ID_VINC_ARTIGO_PERFIL);
ALTER TABLE VINC_FALTA_DISCIPLINAR ADD CONSTRAINT PK_VINC_FALTA_DISCIPLINAR PRIMARY KEY (ID_VINC_FALTA_DISCIPLINAR);
ALTER TABLE VISITANTE ADD CONSTRAINT PK_VISITANTE PRIMARY KEY (ID_VISITANTE);
ALTER TABLE VISITANTE_INTERNO ADD CONSTRAINT PK_VISITANTE_INTERNO PRIMARY KEY (ID_VISITANTE_INTERNO);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE ADVOGADO ADD CONSTRAINT FK_ADVOGADO_1 FOREIGN KEY (ID_CIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE ADVOGADOS_INTERNOS ADD CONSTRAINT FK_ADVOGADOS_INTERNOS_1 FOREIGN KEY (ID_ADVOGADO) REFERENCES ADVOGADO (ID_ADVOGADO);
ALTER TABLE ADVOGADOS_INTERNOS ADD CONSTRAINT FK_ADVOGADOS_INTERNOS_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO) ON UPDATE CASCADE;
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_3 FOREIGN KEY (IDAGENDA_TIPO_CONTATOS) REFERENCES AGENDA_TIPO_CONTATOS (IDAGENDA_TIPO_CONTATOS);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_4 FOREIGN KEY (IDAGENDA_ASSUNTOS) REFERENCES AGENDA_ASSUNTOS (IDAGENDA_ASSUNTOS);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_5 FOREIGN KEY (IDAGENDA_SITUACAO) REFERENCES AGENDA_SITUACAO (IDAGENDA_SITUACAO);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_6 FOREIGN KEY (ID_VISITANTE) REFERENCES VISITANTE (ID_VISITANTE);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_7 FOREIGN KEY (ID_ADVOGADO) REFERENCES ADVOGADO (ID_ADVOGADO);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_8 FOREIGN KEY (ID_FUNCIONARIO_AGENDA) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE AGENDA_ATENDIMENTO ADD CONSTRAINT FK_AGENDA_ATENDIMENTO_9 FOREIGN KEY (ID_UP) REFERENCES UNIDADE_PENAL (ID_UP);
ALTER TABLE AGENTE_EQUIPE ADD CONSTRAINT FK_AGENTE_EQUIPE_1 FOREIGN KEY (IDEQUIPE) REFERENCES EQUIPE (IDEQUIPE);
ALTER TABLE AGENTE_EQUIPE ADD CONSTRAINT FK_AGENTE_EQUIPE_2 FOREIGN KEY (IDFUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE AGENTE_EQUIPE ADD CONSTRAINT FK_AGENTE_EQUIPE_3 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE ATENDIMENTO_PSICOSSOCIAL ADD CONSTRAINT FK_ATENDIMENTO_PSICOSSOCIAL_1 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE ATENDIMENTO_PSICOSSOCIAL ADD CONSTRAINT FK_ATENDIMENTO_PSICOSSOCIAL_2 FOREIGN KEY (IDTECNICO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE BACKUP_SINCRONISMO_BLOB ADD CONSTRAINT FK_BACKUP_SINCRONISMO_BLOB_1 FOREIGN KEY (IDSINCRONISMO_CONTROLE) REFERENCES SINCRONISMO_CONTROLE (IDSINCRONISMO_CONTROLE);
ALTER TABLE CALC_SETOR_TRABALHO ADD CONSTRAINT FK_CALC_SETOR_TRABALHO_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE CALC_SETOR_TRABALHO ADD CONSTRAINT FK_CALC_SETOR_TRABALHO_2 FOREIGN KEY (ID_SETOR_TRABALHO) REFERENCES SETOR_TRABALHO (ID_SETOR_TRABALHO);
ALTER TABLE CALC_TRABALHO_ITENS ADD CONSTRAINT FK_CALC_TRABALHO_ITENS_1 FOREIGN KEY (ID_CALC_TRABALHO) REFERENCES CALC_SETOR_TRABALHO (IDCALC_SETOR_TRABALHO);
ALTER TABLE CALC_TRABALHO_ITENS ADD CONSTRAINT FK_CALC_TRABALHO_ITENS_2 FOREIGN KEY (ID_SETOR_TRABALHO) REFERENCES SETOR_TRABALHO (ID_SETOR_TRABALHO);
ALTER TABLE CIDADE ADD CONSTRAINT FK_CIDADE_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO (ID_ESTADO);
ALTER TABLE CIDADE ADD CONSTRAINT FK_CIDADE_NACIONALIDADE FOREIGN KEY (ID_NACIONALIDADE) REFERENCES NACIONALIDADE (ID_NACIONALIDADE);
ALTER TABLE CONDENACAO_INTERNO ADD CONSTRAINT FK_CONDENACAO_INTERNO_2 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO) ON UPDATE CASCADE;
ALTER TABLE CONEXAO ADD CONSTRAINT FK_CONEXAO_1 FOREIGN KEY (ID_FUNCIOANRIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE CONTROLE_PERMANENCIA ADD CONSTRAINT FK_CONTROLE_PERMANENCIA_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE CTC ADD CONSTRAINT FK_CTC_1 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE DETRACAO ADD CONSTRAINT FK_DETRACAO_FUNCIONARIO FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE DETRACAO ADD CONSTRAINT FK_DETRACAO_INTERNO FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE DOCUMENTOS_DIGITALIZADOS ADD CONSTRAINT FK_DOCUMENTOS_DIGITALIZADOS_1 FOREIGN KEY (ID_POSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE DOCUMENTOS_DIGITALIZADOS ADD CONSTRAINT FK_DOCUMENTOS_DIGITALIZADOS_2 FOREIGN KEY (ID_TIPO_DOCUMENTO) REFERENCES TIPO_DOCUMENTO (ID_TIPO_DOCUMENTO);
ALTER TABLE DOCUMENTOS_DIGITALIZADOS ADD CONSTRAINT FK_DOCUMENTOS_DIGITALIZADOS_3 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE DOCUMENTOS_PROCESSO ADD CONSTRAINT FK_DOCUMENTOS_PROCESSO_1 FOREIGN KEY (IDPROCESSO) REFERENCES PROCESSO (IDPROCESSO);
ALTER TABLE EQUIPE ADD CONSTRAINT FK_EQUIPE_1 FOREIGN KEY (IDHORARIO_FUNCIONARIO) REFERENCES HORARIO_FUNCIONARIO (IDHORARIO_FUNCIONARIO);
ALTER TABLE ESCALA_PLANTAO ADD CONSTRAINT FK_ESCALA_PLANTAO_1 FOREIGN KEY (IDEQUIPE) REFERENCES EQUIPE (IDEQUIPE);
ALTER TABLE ESCALA_PLANTAO ADD CONSTRAINT FK_ESCALA_PLANTAO_2 FOREIGN KEY (IDFUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE ESCALA_PLANTAO ADD CONSTRAINT FK_ESCALA_PLANTAO_4 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE FILHOS ADD CONSTRAINT FK_FILHOS_1 FOREIGN KEY (IDCIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE FILHOS ADD CONSTRAINT FK_FILHOS_2 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE FORNECEDOR ADD CONSTRAINT FK_FORNECEDOR_1 FOREIGN KEY (ID_CIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE FUNCIONARIO ADD CONSTRAINT FK_FUNCIONARIO_1 FOREIGN KEY (ID_FUNCAO) REFERENCES FUNCAO_FUNCIONARIO (ID_FUNCAO_FUNCIONARIO);
ALTER TABLE FUNCIONARIO ADD CONSTRAINT FK_FUNCIONARIO_2 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE FUNCIONARIO ADD CONSTRAINT FK_FUNCIONARIO_3 FOREIGN KEY (ID_CURSO) REFERENCES CURSO (ID_CURSO);
ALTER TABLE HISTORICO_CLINICA_MEDICA ADD CONSTRAINT FK_HISTORICO_CLINICA_MEDICA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_CLINICA_MEDICA ADD CONSTRAINT FK_HISTORICO_CLINICA_MEDICA_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_ENFERMAGEM ADD CONSTRAINT FK_HISTORICO_ENFERMAGEM_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_ENFERMAGEM ADD CONSTRAINT FK_HISTORICO_ENFERMAGEM_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_ESTUDO ADD CONSTRAINT FK_HISTORICO_ESTUDO_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_FARMACIA ADD CONSTRAINT FK_HISTORICO_FARMACIA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_FARMACIA ADD CONSTRAINT FK_HISTORICO_FARMACIA_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_INTERNO ADD CONSTRAINT FK_HISTORICO_INTERNO_1 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO) ON UPDATE CASCADE;
ALTER TABLE HISTORICO_ODONTOLOGIA ADD CONSTRAINT FK_HISTORICO_ODONTOLOGIA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_ODONTOLOGIA ADD CONSTRAINT FK_HISTORICO_ODONTOLOGIA_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_PEDAGOGIA ADD CONSTRAINT FK_HISTORICO_PEDAGOGIA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_PEDAGOGIA ADD CONSTRAINT FK_HISTORICO_PEDAGOGIA_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_PSICOLOGIA ADD CONSTRAINT FK_HISTORICO_PSICOLOGIA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_PSICOLOGIA ADD CONSTRAINT FK_HISTORICO_PSICOLOGIA_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_PSIQUIATRIA ADD CONSTRAINT FK_HISTORICO_PSIQUIATRIA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_PSIQUIATRIA ADD CONSTRAINT FK_HISTORICO_PSIQUIATRIA_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_SERVICO_SOCIAL ADD CONSTRAINT FK_HISTORICO_SERVICO_SOCIAL_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_SERVICO_SOCIAL ADD CONSTRAINT FK_HISTORICO_SERVICO_SOCIAL_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_TERAPIA_OCUP ADD CONSTRAINT FK_HISTORICO_TERAPIA_OCUP_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE HISTORICO_TERAPIA_OCUP ADD CONSTRAINT FK_HISTORICO_TERAPIA_OCUP_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE HISTORICO_VISITANTE ADD CONSTRAINT FK_HISTORICO_VISITANTE_1 FOREIGN KEY (ID_VISITANTE) REFERENCES VISITANTE (ID_VISITANTE);
ALTER TABLE HISTORICO_VISITANTE ADD CONSTRAINT FK_HISTORICO_VISITANTE_2 FOREIGN KEY (ID_GRAU_PARENTESCO) REFERENCES GRAU_PARENTESCO (ID_GRAU_PARENTESCO);
ALTER TABLE HISTORICO_VISITANTE ADD CONSTRAINT FK_HISTORICO_VISITANTE_3 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE INTELIGENCIA ADD CONSTRAINT FK_INTELIGENCIA_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE INTELIGENCIA ADD CONSTRAINT FK_INTELIGENCIA_2 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_1 FOREIGN KEY (IDPROFISSAO) REFERENCES PROFISSAO (ID_PROFISSAO);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_10 FOREIGN KEY (IDCIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_11 FOREIGN KEY (IDADVOGADO) REFERENCES ADVOGADO (ID_ADVOGADO);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_12 FOREIGN KEY (ID_PROCEDENCIA) REFERENCES PROCEDENCIA (ID_PROCEDENCIA);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_13 FOREIGN KEY (IDCONDICAO_INTERNO) REFERENCES CONDICAO_INTERNO (IDCONDICAO_INTERNO);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_14 FOREIGN KEY (IDDESTINO) REFERENCES DESTINO (ID_DESTINO);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_17 FOREIGN KEY (IDSERIEESTUDO) REFERENCES SERIE_ESTUDO (ID_SERIE_ESTUDO);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_6 FOREIGN KEY (IDNATURALIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_7 FOREIGN KEY (IDNACIONALIDADE) REFERENCES NACIONALIDADE (ID_NACIONALIDADE);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_8 FOREIGN KEY (IDRACA) REFERENCES RACA (ID_RACA);
ALTER TABLE INTERNO ADD CONSTRAINT FK_INTERNO_9 FOREIGN KEY (IDESCOLARIDADE) REFERENCES ESCOLARIDADE (ID_ESCOLARIDADE);
ALTER TABLE INTERRUPCAO ADD CONSTRAINT FK_INTERRUPCAO_FUNCIONARIO FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE INTERRUPCAO ADD CONSTRAINT FK_INTERRUPCAO_INTERNO FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE ITENS_PATRIMONIO ADD CONSTRAINT FK_ITENS_PATRIMONIO_1 FOREIGN KEY (ID_PATRIMONIO) REFERENCES PATRIMONIO (IDPATRIMONIO);
ALTER TABLE ITENS_PATRIMONIO ADD CONSTRAINT FK_ITENS_PATRIMONIO_2 FOREIGN KEY (ID_ACESSORIOS) REFERENCES ACESSORIOS (ID_ACESSORIO);
ALTER TABLE LIVRO ADD CONSTRAINT FK_LIVRO_1 FOREIGN KEY (ID_FORNECEDOR) REFERENCES FORNECEDOR (ID_FORNECEDOR);
ALTER TABLE LIVRO_INTERNO ADD CONSTRAINT FK_LIVRO_INTERNO_1 FOREIGN KEY (ID_LIVRO) REFERENCES LIVRO (ID_LIVRO);
ALTER TABLE LIVRO_INTERNO ADD CONSTRAINT FK_LIVRO_INTERNO_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE MENORES ADD CONSTRAINT FK_MENORES_1 FOREIGN KEY (ID_VISITANTE) REFERENCES VISITANTE (ID_VISITANTE);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT FK_MOV_CAUTELA_1 FOREIGN KEY (IDPATRIMONIO) REFERENCES PATRIMONIO (IDPATRIMONIO);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT FK_MOV_CAUTELA_2 FOREIGN KEY (IDFUNCIONARIO_RESPONSAVEL) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT FK_MOV_CAUTELA_3 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT FK_MOV_CAUTELA_4 FOREIGN KEY (ID_UP) REFERENCES UNIDADE_PENAL (ID_UP);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT FK_MOV_CAUTELA_5 FOREIGN KEY (IDFUNCIONARIO_LANCAMENTO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE MOV_CAUTELA ADD CONSTRAINT FK_MOV_CAUTELA_6 FOREIGN KEY (IDMOV_CAUTELA2) REFERENCES MOV_CAUTELA (IDMOV_CAUTELA);
ALTER TABLE MOV_DIARIO_VISITANTES ADD CONSTRAINT FK_MOV_DIARIO_VISITANTES_1 FOREIGN KEY (ID_GRAU_PARENTESCO) REFERENCES GRAU_PARENTESCO (ID_GRAU_PARENTESCO);
ALTER TABLE MOV_DIARIO_VISITANTES ADD CONSTRAINT FK_MOV_DIARIO_VISITANTES_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE MOV_DIARIO_VISITANTES ADD CONSTRAINT FK_MOV_DIARIO_VISITANTES_3 FOREIGN KEY (ID_VISITANTE) REFERENCES VISITANTE (ID_VISITANTE);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_1 FOREIGN KEY (IDFUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_2 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_3 FOREIGN KEY (ID_UP) REFERENCES UNIDADE_PENAL (ID_UP);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_4 FOREIGN KEY (ID_EVENTOS) REFERENCES EVENTOS (ID_EVENTOS);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_5 FOREIGN KEY (ID_SUB_EVENTOS) REFERENCES SUB_EVENTOS (ID_SUB_EVENTOS);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_6 FOREIGN KEY (IDEQUIPE) REFERENCES EQUIPE (IDEQUIPE);
ALTER TABLE MOV_EVENTOS ADD CONSTRAINT FK_MOV_EVENTOS_7 FOREIGN KEY (IDFUNCIONARIO_MONITOR) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE MOV_INTERNO ADD CONSTRAINT FK_MOV_INTERNO_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO) ON UPDATE CASCADE;
ALTER TABLE MOV_INTERNO ADD CONSTRAINT FK_MOV_INTERNO_4 FOREIGN KEY (ID_PROCEDENCIA) REFERENCES PROCEDENCIA (ID_PROCEDENCIA);
ALTER TABLE MOV_INTERNO ADD CONSTRAINT FK_MOV_INTERNO_5 FOREIGN KEY (ID_DESTINO) REFERENCES DESTINO (ID_DESTINO);
ALTER TABLE MOV_OCORRENCIA ADD CONSTRAINT FK_MOV_OCORRENCIA_1 FOREIGN KEY (IDOCORRENCIA) REFERENCES OCORRENCIA (IDOCORRENCIA);
ALTER TABLE MOV_OCORRENCIA ADD CONSTRAINT FK_MOV_OCORRENCIA_2 FOREIGN KEY (IDMOV_PROCEDIMENTOS) REFERENCES MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS);
ALTER TABLE MOV_OCORRENCIA_ADV ADD CONSTRAINT FK_MOV_OCORRENCIA_ADV_1 FOREIGN KEY (IDMOV_OCORRENCIA) REFERENCES MOV_OCORRENCIA (IDMOV_OCORRENCIA);
ALTER TABLE MOV_OCORRENCIA_ADV ADD CONSTRAINT FK_MOV_OCORRENCIA_ADV_2 FOREIGN KEY (IDADVOGADO) REFERENCES ADVOGADO (ID_ADVOGADO);
ALTER TABLE MOV_OCORRENCIA_FUNC ADD CONSTRAINT FK_MOV_OCORRENCIA_FUNC_1 FOREIGN KEY (IDMOV_OCORRENCIA) REFERENCES MOV_OCORRENCIA (IDMOV_OCORRENCIA);
ALTER TABLE MOV_OCORRENCIA_FUNC ADD CONSTRAINT FK_MOV_OCORRENCIA_FUNC_2 FOREIGN KEY (IDFUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE MOV_OCORRENCIA_INT ADD CONSTRAINT FK_MOV_OCORRENCIA_INT_1 FOREIGN KEY (IDMOV_OCORRENCIA) REFERENCES MOV_OCORRENCIA (IDMOV_OCORRENCIA);
ALTER TABLE MOV_OCORRENCIA_INT ADD CONSTRAINT FK_MOV_OCORRENCIA_INT_2 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE MOV_OCORRENCIA_QUEST ADD CONSTRAINT FK_MOV_OCORRENCIA_QUEST_1 FOREIGN KEY (IDMOV_OCORRENCIA) REFERENCES MOV_OCORRENCIA (IDMOV_OCORRENCIA);
ALTER TABLE MOV_OCORRENCIA_QUEST ADD CONSTRAINT FK_MOV_OCORRENCIA_QUEST_2 FOREIGN KEY (IDQUESTIONAMENTO) REFERENCES QUESTIONAMENTO (IDQUESTIONAMENTO);
ALTER TABLE MOV_OCORRENCIA_VIS ADD CONSTRAINT FK_MOV_OCORRENCIA_VIS_1 FOREIGN KEY (IDMOV_OCORRENCIA) REFERENCES MOV_OCORRENCIA (IDMOV_OCORRENCIA);
ALTER TABLE MOV_OCORRENCIA_VIS ADD CONSTRAINT FK_MOV_OCORRENCIA_VIS_2 FOREIGN KEY (IDVISITANTE) REFERENCES VISITANTE (ID_VISITANTE);
ALTER TABLE MOV_PROCEDIMENTOS ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_1 FOREIGN KEY (IDPROCEDIMENTOS) REFERENCES PROCEDIMENTOS (IDPROCEDIMENTOS);
ALTER TABLE MOV_PROCEDIMENTOS_ADV ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_ADV_1 FOREIGN KEY (IDMOV_PROCEDIMENTOS) REFERENCES MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS);
ALTER TABLE MOV_PROCEDIMENTOS_ADV ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_ADV_2 FOREIGN KEY (IDADVOGADO) REFERENCES ADVOGADO (ID_ADVOGADO);
ALTER TABLE MOV_PROCEDIMENTOS_FUNC ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_FUNC_1 FOREIGN KEY (IDFUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE MOV_PROCEDIMENTOS_FUNC ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_FUNC_2 FOREIGN KEY (IDMOV_PROCEDIMENTOS) REFERENCES MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS);
ALTER TABLE MOV_PROCEDIMENTOS_INT ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_INT_1 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE MOV_PROCEDIMENTOS_INT ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_INT_2 FOREIGN KEY (IDMOV_PROCEDIMENTOS) REFERENCES MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS);
ALTER TABLE MOV_PROCEDIMENTOS_VIS ADD CONSTRAINT FK_MOV_PROCEDIMENTOS_VIS_1 FOREIGN KEY (IDMOV_PROCEDIMENTOS) REFERENCES MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS);
ALTER TABLE MOV_TRABALHO ADD CONSTRAINT FK_MOV_TRABALHO_1 FOREIGN KEY (ID_TRABALHO) REFERENCES TRABALHO (ID_TRABALHO);
ALTER TABLE MOV_TRABALHO ADD CONSTRAINT FK_MOV_TRABALHO_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE MOV_TRABALHO ADD CONSTRAINT FK_MOV_TRABALHO_3 FOREIGN KEY (ID_SETOR_TRABALHO) REFERENCES SETOR_TRABALHO (ID_SETOR_TRABALHO);
ALTER TABLE MOV_TRABALHO ADD CONSTRAINT FK_MOV_TRABALHO_4 FOREIGN KEY (ID_FUNCAO_INTERNO) REFERENCES FUNCAO_INTERNO (ID_FUNCAO_INTERNO);
ALTER TABLE MOV_TRABALHO ADD CONSTRAINT FK_MOV_TRABALHO_5 FOREIGN KEY (ID_UNIDADE_PENAL) REFERENCES UNIDADE_PENAL (ID_UP);
ALTER TABLE OCORRENCIA ADD CONSTRAINT FK_OCORRENCIA_IDPROCEDIMENTO_NO FOREIGN KEY (IDPROCEDIMENTO_NOVO) REFERENCES PROCEDIMENTOS (IDPROCEDIMENTOS);
ALTER TABLE OCORRENCIA_PROCEDIMENTOS ADD CONSTRAINT FK_OCORRENCIA_PROCEDIMENTOS_1 FOREIGN KEY (IDOCORRENCIA) REFERENCES OCORRENCIA (IDOCORRENCIA);
ALTER TABLE OCORRENCIA_PROCEDIMENTOS ADD CONSTRAINT FK_OCORRENCIA_PROCEDIMENTOS_2 FOREIGN KEY (IDPROCEDIMENTOS) REFERENCES PROCEDIMENTOS (IDPROCEDIMENTOS);
ALTER TABLE PATRIMONIO ADD CONSTRAINT FK_PATRIMONIO_1 FOREIGN KEY (IDTIPO_PATRIMONIO) REFERENCES TIPO_PATRIMONIO (IDTIPO_PATRIMONIO);
ALTER TABLE PATRIMONIO ADD CONSTRAINT FK_PATRIMONIO_2 FOREIGN KEY (ID_UP) REFERENCES UNIDADE_PENAL (ID_UP);
ALTER TABLE PATRIMONIO ADD CONSTRAINT FK_PATRIMONIO_3 FOREIGN KEY (IDFUNCIONARIO_CADASTROU) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE PATRIMONIO ADD CONSTRAINT FK_PATRIMONIO_4 FOREIGN KEY (IDPOSTO_TRABALHO_CAUTELA) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE PATRIMONIO ADD CONSTRAINT FK_PATRIMONIO_5 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE PATRIMONIO ADD CONSTRAINT FK_PATRIMONIO_6 FOREIGN KEY (IDFUNCIONARIO_CAUTELA) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE PERMANENCIA_SCANER ADD CONSTRAINT FK_PERMANENCIA_SCANER_1 FOREIGN KEY (ID_CONTROLE_PERMANENCIA) REFERENCES CONTROLE_PERMANENCIA (ID_CONTROLE_PERMANENCIA);
ALTER TABLE PLANILHA_DINAMICA ADD CONSTRAINT FK_PLANILHA_DINAMICA_1 FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE PROCEDIMENTOS ADD CONSTRAINT FK_PROCEDIMENTOS_1 FOREIGN KEY (IDPROCEDIMENTOS_MESTRE) REFERENCES PROCEDIMENTOS (IDPROCEDIMENTOS);
ALTER TABLE PROCEDIMENTO_POSTO ADD CONSTRAINT FK_PROCEDIMENTO_POSTO_1 FOREIGN KEY (IDPOSTO_TRABALHO) REFERENCES POSTO_TRABALHO (IDPOSTO_TRABALHO);
ALTER TABLE PROCEDIMENTO_POSTO ADD CONSTRAINT FK_PROCEDIMENTO_POSTO_2 FOREIGN KEY (IDPROCEDIMENTO) REFERENCES PROCEDIMENTOS (IDPROCEDIMENTOS);
ALTER TABLE PROCESSO ADD CONSTRAINT FK_PROCESSO_2 FOREIGN KEY (IDINTERNO) REFERENCES INTERNO (ID_INTERNO) ON UPDATE CASCADE;
ALTER TABLE QUESTIONAMENTO ADD CONSTRAINT FK_QUESTIONAMENTO_1 FOREIGN KEY (IDOCORRENCIA) REFERENCES OCORRENCIA (IDOCORRENCIA);
ALTER TABLE REMEDIO ADD CONSTRAINT FK_REMEDIO_1 FOREIGN KEY (ID_FORNECEDOR) REFERENCES FORNECEDOR (ID_FORNECEDOR);
ALTER TABLE REMEDIO_INTERNO ADD CONSTRAINT FK_REMEDIO_INTERNO_1 FOREIGN KEY (ID_REMEDIO) REFERENCES REMEDIO (ID_REMEDIO);
ALTER TABLE REMEDIO_INTERNO ADD CONSTRAINT FK_REMEDIO_INTERNO_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE REMICAO ADD CONSTRAINT FK_REMICAO_FUNCIONARIO FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE REMICAO ADD CONSTRAINT FK_REMICAO_INTERNO FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE REPLICACAO_RECEBIDA ADD CONSTRAINT FK_REPLICACAO_RECEBIDA_1 FOREIGN KEY (IDSINCRONISMO_CONTROLE) REFERENCES SINCRONISMO_CONTROLE (IDSINCRONISMO_CONTROLE);
ALTER TABLE SINCRONISMO ADD CONSTRAINT FK_SINCRONISMO FOREIGN KEY (IDSINCRONISMO_CONTROLE) REFERENCES SINCRONISMO_CONTROLE (IDSINCRONISMO_CONTROLE);
ALTER TABLE SINCRONISMO_BLOB ADD CONSTRAINT FK_SINCRONISMO_BLOB_1 FOREIGN KEY (IDSINCRONISMO_CONTROLE) REFERENCES SINCRONISMO_CONTROLE (IDSINCRONISMO_CONTROLE);
ALTER TABLE TRABALHO ADD CONSTRAINT FK_TRABALHO_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE TRABALHO ADD CONSTRAINT FK_TRABALHO_2 FOREIGN KEY (ID_SETOR_TRABALHO) REFERENCES SETOR_TRABALHO (ID_SETOR_TRABALHO);
ALTER TABLE TRABALHO ADD CONSTRAINT FK_TRABALHO_3 FOREIGN KEY (ID_FUNCAO_INTERNO) REFERENCES FUNCAO_INTERNO (ID_FUNCAO_INTERNO);
ALTER TABLE UNIDADE_PENAL ADD CONSTRAINT FK_UNIDADE_PENAL_1 FOREIGN KEY (ID_CIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE VINC_ARTIGO ADD CONSTRAINT FK_VINC_ARTIGO_1 FOREIGN KEY (ID_ARTIGO) REFERENCES ARTIGO (ID_ARTIGO);
ALTER TABLE VINC_ARTIGO ADD CONSTRAINT FK_VINC_ARTIGO_2 FOREIGN KEY (ID_PROCESSO) REFERENCES PROCESSO (IDPROCESSO);
ALTER TABLE VINC_ARTIGO_PERFIL ADD CONSTRAINT FK_VINC_ARTIGO_PERFIL_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE VINC_FALTA_DISCIPLINAR ADD CONSTRAINT FK_VINC_FALTA_DISCIPLINAR_1 FOREIGN KEY (ID_FALTA_DISCIPLINAR) REFERENCES FALTA_DISCIPLINAR (ID_FALTA_DISCIPLINAR);
ALTER TABLE VINC_FALTA_DISCIPLINAR ADD CONSTRAINT FK_VINC_FALTA_DISCIPLINAR_2 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE VISITANTE ADD CONSTRAINT FK_VISITANTE_1 FOREIGN KEY (ID_INTERNO) REFERENCES INTERNO (ID_INTERNO);
ALTER TABLE VISITANTE ADD CONSTRAINT FK_VISITANTE_2 FOREIGN KEY (ID_GRAU_PARENTESCO) REFERENCES GRAU_PARENTESCO (ID_GRAU_PARENTESCO);
ALTER TABLE VISITANTE ADD CONSTRAINT FK_VISITANTE_3 FOREIGN KEY (ID_NACIONALIDADE) REFERENCES NACIONALIDADE (ID_NACIONALIDADE);
ALTER TABLE VISITANTE ADD CONSTRAINT FK_VISITANTE_4 FOREIGN KEY (ID_NATURALIDADE) REFERENCES CIDADE (ID_CIDADE);
ALTER TABLE VISITANTE_INTERNO ADD CONSTRAINT FK_VISITANTE_INTERNO_1 FOREIGN KEY (ID_VISITANTE) REFERENCES VISITANTE (ID_VISITANTE);
ALTER TABLE VISITANTE_INTERNO ADD CONSTRAINT FK_VISITANTE_INTERNO_3 FOREIGN KEY (ID_GRAU_PARENTESCO) REFERENCES GRAU_PARENTESCO (ID_GRAU_PARENTESCO);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX BACKUP_SINC_BLOB_CAMPO ON BACKUP_SINCRONISMO_BLOB (CAMPO);
CREATE INDEX BACKUP_SINC_BLOB_DATA ON BACKUP_SINCRONISMO_BLOB (DATA_HORA);
CREATE INDEX BACKUP_SINC_BLOB_NOME_PK ON BACKUP_SINCRONISMO_BLOB (NOME_PK);
CREATE INDEX BACKUP_SINC_BLOB_TABELA ON BACKUP_SINCRONISMO_BLOB (TABELA);
CREATE INDEX HISTORICO_INTERNO_IDX1 ON HISTORICO_INTERNO (IDINTERNO);
CREATE INDEX INTERNO_IDX1 ON INTERNO (NOME_INTERNO);
CREATE INDEX INTERNO_IDX2 ON INTERNO (RGI);
CREATE INDEX INTERNO_IDX3 ON INTERNO (ST);
CREATE INDEX INTERNO_IDX4 ON INTERNO (ID_UP);
CREATE INDEX INTERNO_IDX5 ON INTERNO (FACCAO);
CREATE INDEX INTERNO_IDX_DTE ON INTERNO (DATA_ENTRADA);
CREATE INDEX INTERNO_IDX_DTS ON INTERNO (DATA_SAIDA);
CREATE INDEX INTERNO_IDX_MAE ON INTERNO (MAE);
CREATE INDEX INTERNO_IDX_OUTN ON INTERNO (OUTRO_NOME);
CREATE INDEX INTERNO_IDX_PAI ON INTERNO (PAI);
CREATE INDEX INTERNO_IDX_VULGO ON INTERNO (VULGO);
CREATE INDEX MOV_CAUTELA_IDX1 ON MOV_CAUTELA (NUMERO_CAUTELA);
CREATE INDEX MOV_CAUTELA_IDX2 ON MOV_CAUTELA (DATA_MOVIMENTO);
CREATE INDEX MOV_CAUTELA_IDX3 ON MOV_CAUTELA (TIPO_MOVIMENTO);
CREATE INDEX MOV_INTERNO_IDX1 ON MOV_INTERNO (ID_INTERNO);
CREATE INDEX MOV_INTERNO_IDX2 ON MOV_INTERNO (ID_UNIDADE_PENAL);
CREATE INDEX MOV_INTERNO_IDX3 ON MOV_INTERNO (DATA_MOVIMENTACAO);
CREATE INDEX MOV_INTERNO_IDX4 ON MOV_INTERNO (HORA_MOVIMENTACAO);
CREATE INDEX MOV_INTERNO_IDX5 ON MOV_INTERNO (ID_FUNCIONARIO);
CREATE UNIQUE INDEX PADRAO_CODUP ON PADRAO (COD_UP);
CREATE INDEX PATR_IDXACABAMENTO ON PATRIMONIO (ACABAMENTO);
CREATE INDEX PATR_IDXACESSORIOS ON PATRIMONIO (ACESSORIOS);
CREATE INDEX PATR_IDXARMA_ALMA ON PATRIMONIO (ARMA_ALMA);
CREATE INDEX PATR_IDXCADASTRO_SINARM ON PATRIMONIO (CADASTRO_SINARM);
CREATE INDEX PATR_IDXCALIBRE ON PATRIMONIO (CALIBRE);
CREATE INDEX PATR_IDXCAUTELA ON PATRIMONIO (CAUTELA);
CREATE INDEX PATR_IDXCOMPLEMENTO ON PATRIMONIO (COMPLEMENTO);
CREATE INDEX PATR_IDXCOMPOSTO_QUIMICO ON PATRIMONIO (COMPOSTO_QUIMICO);
CREATE INDEX PATR_IDXCOMPRIMENTO_CANO ON PATRIMONIO (COMPRIMENTO_CANO);
CREATE INDEX PATR_IDXDATA_FABRICACAO ON PATRIMONIO (DATA_FABRICACAO);
CREATE INDEX PATR_IDXDATA_ULTIMA_MANUTENCAO ON PATRIMONIO (DATA_ULTIMA_MANUTENCAO);
CREATE INDEX PATR_IDXDATA_VALIDADE ON PATRIMONIO (DATA_VALIDADE);
CREATE INDEX PATR_IDXDISPONIBILIDADE ON PATRIMONIO (DISPONIBILIDADE);
CREATE INDEX PATR_IDXESPECIE ON PATRIMONIO (ESPECIE);
CREATE INDEX PATR_IDXESTADO ON PATRIMONIO (ESTADO);
CREATE INDEX PATR_IDXESTADO_GERAL ON PATRIMONIO (ESTADO_GERAL);
CREATE INDEX PATR_IDXFABRICACAO ON PATRIMONIO (FABRICACAO);
CREATE INDEX PATR_IDXFUNCAO_ARMA ON PATRIMONIO (FUNCAO_ARMA);
CREATE INDEX PATR_IDXMARCA ON PATRIMONIO (MARCA);
CREATE INDEX PATR_IDXMISSAO_CAUTELA ON PATRIMONIO (MISSAO_CAUTELA);
CREATE INDEX PATR_IDXMODELO ON PATRIMONIO (MODELO);
CREATE INDEX PATR_IDXNOME ON PATRIMONIO (NOME);
CREATE INDEX PATR_IDXNOTA_FISCAL ON PATRIMONIO (NOTA_FISCAL);
CREATE INDEX PATR_IDXNUMERO_ARMA ON PATRIMONIO (NUMERO_ARMA);
CREATE INDEX PATR_IDXNUM_SERIAL ON PATRIMONIO (NUM_SERIAL);
CREATE INDEX PATR_IDXOBSERVACAO ON PATRIMONIO (OBSERVACAO);
CREATE INDEX PATR_IDXOBS_CAUTELA ON PATRIMONIO (OBS_CAUTELA);
CREATE INDEX PATR_IDXOBS_SITUACAO_GERAL ON PATRIMONIO (OBS_SITUACAO_GERAL);
CREATE INDEX PATR_IDXORIGEM ON PATRIMONIO (ORIGEM);
CREATE INDEX PATR_IDXPAIS_FABRICACAO ON PATRIMONIO (PAIS_FABRICACAO);
CREATE INDEX PATR_IDXPROJETIL ON PATRIMONIO (PROJETIL);
CREATE INDEX PATR_IDXREGISTRO_ESTADUAL ON PATRIMONIO (REGISTRO_ESTADUAL);
CREATE INDEX PATR_IDXREGISTRO_UF ON PATRIMONIO (REGISTRO_UF);
CREATE INDEX PATR_IDXREG_ORGAO_EXPED ON PATRIMONIO (REGISTRO_ORGAO_EXPEDIDOR);
CREATE INDEX PATR_IDXSENTIDO_RAIA ON PATRIMONIO (SENTIDO_RAIA);
CREATE INDEX PATR_IDXSITUACAO_GERAL ON PATRIMONIO (SITUACAO_GERAL);
CREATE INDEX PATR_IDXTIPO_BASE ON PATRIMONIO (TIPO_BASE);
CREATE INDEX PATR_IDXTIPO_ESPARGIDORES ON PATRIMONIO (TIPO_ESPARGIDORES);
CREATE INDEX PATR_IDXTIPO_EXPLOSIVO ON PATRIMONIO (TIPO_EXPLOSIVO);
CREATE INDEX PATR_IDXTIPO_PESSOA ON PATRIMONIO (TIPO_PESSOA);
CREATE INDEX PATR_IDXTOMBO ON PATRIMONIO (TOMBO);
CREATE INDEX PATR_IDXUTILIZACAO ON PATRIMONIO (UTILIZACAO);
CREATE INDEX REPLICACAO_RECEBIDA_IDX1 ON REPLICACAO_RECEBIDA (DATA_HORA);
CREATE INDEX SINCRONISMO_IDX1 ON SINCRONISMO (ORDEM);
CREATE INDEX SINCRONISMO_IDX2 ON SINCRONISMO (STATUS);
CREATE INDEX SINCRONISMO_IDX3 ON SINCRONISMO (ORDEM, IDSINCRONISMO);
CREATE INDEX SINCRONISMO_BLOB_CAMPO ON SINCRONISMO_BLOB (CAMPO);
CREATE INDEX SINCRONISMO_BLOB_DATA ON SINCRONISMO_BLOB (DATA_HORA);
CREATE INDEX SINCRONISMO_BLOB_NOME_PK ON SINCRONISMO_BLOB (NOME_PK);
CREATE INDEX SINCRONISMO_BLOB_TABELA ON SINCRONISMO_BLOB (TABELA);
CREATE INDEX SINCRONISMO_CONTROLE_IDX1 ON SINCRONISMO_CONTROLE (BANCO_DADOS_RETORNO);
CREATE INDEX SINCRONISMO_CONTROLE_IDX2 ON SINCRONISMO_CONTROLE (USUARIO);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                        Database event triggers                         ***/
/******************************************************************************/



/* Trigger: TR_DISCONNECT */
CREATE TRIGGER TR_DISCONNECT
ACTIVE ON DISCONNECT POSITION 0
as
DECLARE VARIABLE GLOBAL_IDCONEXAO INTEGER;
begin

GLOBAL_IDCONEXAO = rdb$get_context('USER_SESSION', 'IDCONEXAO');

UPDATE CONEXAO SET DATA_HORA_SAIDA=CURRENT_TIMESTAMP, TELA_MOMENTO = 'SISTEMA FECHADO.'
WHERE IDCONEXAO = :GLOBAL_IDCONEXAO AND DATA_HORA_SAIDA IS NULL;

end
^

/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: ACESSORIOS_AD_SINCRONISMO */
CREATE TRIGGER ACESSORIOS_AD_SINCRONISMO FOR ACESSORIOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ACESSORIOS WHERE ID_ACESSORIO = '||OLD.ID_ACESSORIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ACESSORIOS_AI_SINCRONISMO */
CREATE TRIGGER ACESSORIOS_AI_SINCRONISMO FOR ACESSORIOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ACESSORIOS (ID_ACESSORIO,'
||' DESCRICAO_ACESSORIO) VALUES ('
||COALESCE(NEW.ID_ACESSORIO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_ACESSORIO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ACESSORIOS_AU_SINCRONISMO */
CREATE TRIGGER ACESSORIOS_AU_SINCRONISMO FOR ACESSORIOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_ACESSORIO,'')<>COALESCE(OLD.DESCRICAO_ACESSORIO,'')) THEN TXT=TXT||',DESCRICAO_ACESSORIO = '||COALESCE(''''||NEW.DESCRICAO_ACESSORIO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ACESSORIOS SET ID_ACESSORIO = '''||NEW.ID_ACESSORIO||''''||TXT||' WHERE ID_ACESSORIO = '''||NEW.ID_ACESSORIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ACESSORIOS_BD_LOG */
CREATE TRIGGER ACESSORIOS_BD_LOG FOR ACESSORIOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ACESSORIOS (ID_ACESSORIO,'
||' DESCRICAO_ACESSORIO) VALUES ('
||COALESCE(OLD.ID_ACESSORIO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO_ACESSORIO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ACESSORIOS', OLD.ID_ACESSORIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ACESSORIOS_BI0 */
CREATE TRIGGER ACESSORIOS_BI0 FOR ACESSORIOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.id_acessorio,0)=0) THEN
  BEGIN
    NEW.id_acessorio = GEN_ID(COD_UP,0)||GEN_ID(idacessorio,1);
  END

END
^

/* Trigger: ACESSORIOS_BI_LOG */
CREATE TRIGGER ACESSORIOS_BI_LOG FOR ACESSORIOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ACESSORIOS (ID_ACESSORIO,'
||' DESCRICAO_ACESSORIO) VALUES ('
||COALESCE(NEW.ID_ACESSORIO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_ACESSORIO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ACESSORIOS', NEW.ID_ACESSORIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ACESSORIOS_BU_LOG */
CREATE TRIGGER ACESSORIOS_BU_LOG FOR ACESSORIOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_ACESSORIO,'')<>COALESCE(OLD.DESCRICAO_ACESSORIO,'')) THEN TXT=TXT||',DESCRICAO_ACESSORIO = '||COALESCE(''''||NEW.DESCRICAO_ACESSORIO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ACESSORIOS SET ID_ACESSORIO = '''||NEW.ID_ACESSORIO||''''||TXT||' WHERE ID_ACESSORIO = '''||NEW.ID_ACESSORIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ACESSORIOS', NEW.ID_ACESSORIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ADVOGADOS_INTERNOS_AD_SINCRONIS */
CREATE TRIGGER ADVOGADOS_INTERNOS_AD_SINCRONIS FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ADVOGADOS_INTERNOS WHERE ID_ADVOGADOS_INTERNOS = '||OLD.ID_ADVOGADOS_INTERNOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ADVOGADOS_INTERNOS_AI_SINCRONIS */
CREATE TRIGGER ADVOGADOS_INTERNOS_AI_SINCRONIS FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ADVOGADOS_INTERNOS (ID_ADVOGADOS_INTERNOS,'
||' ID_ADVOGADO,'
||' ID_INTERNO,'
||' OBSADVOGADO_INTERNO) VALUES ('
||COALESCE(NEW.ID_ADVOGADOS_INTERNOS,'NULL')||','
||COALESCE(NEW.ID_ADVOGADO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.OBSADVOGADO_INTERNO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ADVOGADOS_INTERNOS_AU_SINCRONIS */
CREATE TRIGGER ADVOGADOS_INTERNOS_AU_SINCRONIS FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_ADVOGADO,'')<>COALESCE(OLD.ID_ADVOGADO,'')) THEN TXT=TXT||',ID_ADVOGADO = '||COALESCE(NEW.ID_ADVOGADO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.OBSADVOGADO_INTERNO,'')<>COALESCE(OLD.OBSADVOGADO_INTERNO,'')) THEN TXT=TXT||',OBSADVOGADO_INTERNO = '||COALESCE(''''||NEW.OBSADVOGADO_INTERNO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ADVOGADOS_INTERNOS SET ID_ADVOGADOS_INTERNOS = '''||NEW.ID_ADVOGADOS_INTERNOS||''''||TXT||' WHERE ID_ADVOGADOS_INTERNOS = '''||NEW.ID_ADVOGADOS_INTERNOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ADVOGADOS_INTERNOS_BD_LOG */
CREATE TRIGGER ADVOGADOS_INTERNOS_BD_LOG FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ADVOGADOS_INTERNOS (ID_ADVOGADOS_INTERNOS,'
||' ID_ADVOGADO,'
||' ID_INTERNO,'
||' OBSADVOGADO_INTERNO) VALUES ('
||COALESCE(OLD.ID_ADVOGADOS_INTERNOS,'NULL')||','
||COALESCE(OLD.ID_ADVOGADO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.OBSADVOGADO_INTERNO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ADVOGADOS_INTERNOS', OLD.ID_ADVOGADOS_INTERNOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ADVOGADOS_INTERNOS_BI0 */
CREATE TRIGGER ADVOGADOS_INTERNOS_BI0 FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_advogados_internos IS null or (new.id_advogados_internos = 0)  ) then
    new.id_advogados_internos = gen_id (cod_up, 0) || gen_id (id_advogados_internos, 1);
end
^

/* Trigger: ADVOGADOS_INTERNOS_BI_LOG */
CREATE TRIGGER ADVOGADOS_INTERNOS_BI_LOG FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ADVOGADOS_INTERNOS (ID_ADVOGADOS_INTERNOS,'
||' ID_ADVOGADO,'
||' ID_INTERNO,'
||' OBSADVOGADO_INTERNO) VALUES ('
||COALESCE(NEW.ID_ADVOGADOS_INTERNOS,'NULL')||','
||COALESCE(NEW.ID_ADVOGADO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.OBSADVOGADO_INTERNO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ADVOGADOS_INTERNOS', NEW.ID_ADVOGADOS_INTERNOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ADVOGADOS_INTERNOS_BU_LOG */
CREATE TRIGGER ADVOGADOS_INTERNOS_BU_LOG FOR ADVOGADOS_INTERNOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_ADVOGADO,'')<>COALESCE(OLD.ID_ADVOGADO,'')) THEN TXT=TXT||',ID_ADVOGADO = '||COALESCE(NEW.ID_ADVOGADO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.OBSADVOGADO_INTERNO,'')<>COALESCE(OLD.OBSADVOGADO_INTERNO,'')) THEN TXT=TXT||',OBSADVOGADO_INTERNO = '||COALESCE(''''||NEW.OBSADVOGADO_INTERNO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ADVOGADOS_INTERNOS SET ID_ADVOGADOS_INTERNOS = '''||NEW.ID_ADVOGADOS_INTERNOS||''''||TXT||' WHERE ID_ADVOGADOS_INTERNOS = '''||NEW.ID_ADVOGADOS_INTERNOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ADVOGADOS_INTERNOS', NEW.ID_ADVOGADOS_INTERNOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ADVOGADO_AD_SINCRONISMO */
CREATE TRIGGER ADVOGADO_AD_SINCRONISMO FOR ADVOGADO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-04-24 12:02:43.0160
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ADVOGADO WHERE ID_ADVOGADO = '||OLD.ID_ADVOGADO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ADVOGADO_AI_SINCRONISMO */
CREATE TRIGGER ADVOGADO_AI_SINCRONISMO FOR ADVOGADO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-04-24 12:02:43.0160

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ADVOGADO (ID_ADVOGADO,'
||' ADVOGADO,'
||' OAB,'
||' ENDERECO,'
||' CEP,'
||' BAIRRO,'
||' ID_CIDADE,'
||' EMAIL,'
||' CPF,'
||' RG,'
||' FONE,'
||' CELULAR,'
||' OBS) VALUES ('
||COALESCE(NEW.ID_ADVOGADO,'NULL')||','
||COALESCE(''''||NEW.ADVOGADO||'''','NULL')||','
||COALESCE(''''||NEW.OAB||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.EMAIL||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CELULAR||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ADVOGADO_AU_SINCRONISMO */
CREATE TRIGGER ADVOGADO_AU_SINCRONISMO FOR ADVOGADO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-04-24 12:02:43.0160
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ADVOGADO,'')<>COALESCE(OLD.ADVOGADO,'')) THEN TXT=TXT||',ADVOGADO = '||COALESCE(''''||NEW.ADVOGADO||'''','NULL');
IF (COALESCE(NEW.OAB,'')<>COALESCE(OLD.OAB,'')) THEN TXT=TXT||',OAB = '||COALESCE(''''||NEW.OAB||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.EMAIL,'')<>COALESCE(OLD.EMAIL,'')) THEN TXT=TXT||',EMAIL = '||COALESCE(''''||NEW.EMAIL||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CELULAR,'')<>COALESCE(OLD.CELULAR,'')) THEN TXT=TXT||',CELULAR = '||COALESCE(''''||NEW.CELULAR||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ADVOGADO SET ID_ADVOGADO = '''||NEW.ID_ADVOGADO||''''||TXT||' WHERE ID_ADVOGADO = '''||NEW.ID_ADVOGADO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ADVOGADO_BD_LOG */
CREATE TRIGGER ADVOGADO_BD_LOG FOR ADVOGADO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-04-24 12:01:01.6570

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ADVOGADO (ID_ADVOGADO,'
||' ADVOGADO,'
||' OAB,'
||' ENDERECO,'
||' CEP,'
||' BAIRRO,'
||' ID_CIDADE,'
||' EMAIL,'
||' CPF,'
||' RG,'
||' FONE,'
||' CELULAR,'
||' OBS) VALUES ('
||COALESCE(OLD.ID_ADVOGADO,'NULL')||','
||COALESCE(''''||OLD.ADVOGADO||'''','NULL')||','
||COALESCE(''''||OLD.OAB||'''','NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(''''||OLD.CEP||'''','NULL')||','
||COALESCE(''''||OLD.BAIRRO||'''','NULL')||','
||COALESCE(OLD.ID_CIDADE,'NULL')||','
||COALESCE(''''||OLD.EMAIL||'''','NULL')||','
||COALESCE(''''||OLD.CPF||'''','NULL')||','
||COALESCE(''''||OLD.RG||'''','NULL')||','
||COALESCE(''''||OLD.FONE||'''','NULL')||','
||COALESCE(''''||OLD.CELULAR||'''','NULL')||','
||COALESCE(''''||OLD.OBS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ADVOGADO', OLD.ID_ADVOGADO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ADVOGADO_BI0 */
CREATE TRIGGER ADVOGADO_BI0 FOR ADVOGADO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_advogado IS null or (new.id_advogado = 0)  ) then
    new.id_advogado = gen_id (cod_up, 0) || gen_id (id_advogado, 1);
end
^

/* Trigger: ADVOGADO_BI_LOG */
CREATE TRIGGER ADVOGADO_BI_LOG FOR ADVOGADO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-04-24 12:01:01.6570

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ADVOGADO (ID_ADVOGADO,'
||' ADVOGADO,'
||' OAB,'
||' ENDERECO,'
||' CEP,'
||' BAIRRO,'
||' ID_CIDADE,'
||' EMAIL,'
||' CPF,'
||' RG,'
||' FONE,'
||' CELULAR,'
||' OBS) VALUES ('
||COALESCE(NEW.ID_ADVOGADO,'NULL')||','
||COALESCE(''''||NEW.ADVOGADO||'''','NULL')||','
||COALESCE(''''||NEW.OAB||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.EMAIL||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CELULAR||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ADVOGADO', NEW.ID_ADVOGADO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ADVOGADO_BU_LOG */
CREATE TRIGGER ADVOGADO_BU_LOG FOR ADVOGADO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-04-24 12:01:01.6570
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ADVOGADO,'')<>COALESCE(OLD.ADVOGADO,'')) THEN TXT=TXT||',ADVOGADO = '||COALESCE(''''||NEW.ADVOGADO||'''','NULL');
IF (COALESCE(NEW.OAB,'')<>COALESCE(OLD.OAB,'')) THEN TXT=TXT||',OAB = '||COALESCE(''''||NEW.OAB||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.EMAIL,'')<>COALESCE(OLD.EMAIL,'')) THEN TXT=TXT||',EMAIL = '||COALESCE(''''||NEW.EMAIL||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CELULAR,'')<>COALESCE(OLD.CELULAR,'')) THEN TXT=TXT||',CELULAR = '||COALESCE(''''||NEW.CELULAR||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ADVOGADO SET ID_ADVOGADO = '''||NEW.ID_ADVOGADO||''''||TXT||' WHERE ID_ADVOGADO = '''||NEW.ID_ADVOGADO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ADVOGADO', NEW.ID_ADVOGADO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ADVOGADO_IU_SINC_BLOB */
CREATE TRIGGER ADVOGADO_IU_SINC_BLOB FOR ADVOGADO
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-04-24 12:02:43.0160
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.FOTO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'ADVOGADO', 'FOTO', 'ID_ADVOGADO', NEW.ID_ADVOGADO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.FOTO <> NEW.FOTO) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'ADVOGADO', 'FOTO', 'ID_ADVOGADO', NEW.ID_ADVOGADO);
        END

    END

   END

END
^

/* Trigger: AGENDA_ASSUNTOS_AD_SINCRONISMO */
CREATE TRIGGER AGENDA_ASSUNTOS_AD_SINCRONISMO FOR AGENDA_ASSUNTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM AGENDA_ASSUNTOS WHERE IDAGENDA_ASSUNTOS = '||OLD.IDAGENDA_ASSUNTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: AGENDA_ASSUNTOS_AI_SINCRONISMO */
CREATE TRIGGER AGENDA_ASSUNTOS_AI_SINCRONISMO FOR AGENDA_ASSUNTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO AGENDA_ASSUNTOS (IDAGENDA_ASSUNTOS,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDAGENDA_ASSUNTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: AGENDA_ASSUNTOS_AU_SINCRONISMO */
CREATE TRIGGER AGENDA_ASSUNTOS_AU_SINCRONISMO FOR AGENDA_ASSUNTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_ASSUNTOS SET IDAGENDA_ASSUNTOS = '''||NEW.IDAGENDA_ASSUNTOS||''''||TXT||' WHERE IDAGENDA_ASSUNTOS = '''||NEW.IDAGENDA_ASSUNTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: AGENDA_ASSUNTOS_BD_LOG */
CREATE TRIGGER AGENDA_ASSUNTOS_BD_LOG FOR AGENDA_ASSUNTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_ASSUNTOS (IDAGENDA_ASSUNTOS,'
||' DESCRICAO) VALUES ('
||COALESCE(OLD.IDAGENDA_ASSUNTOS,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_ASSUNTOS', OLD.IDAGENDA_ASSUNTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_ASSUNTOS_BI0 */
CREATE TRIGGER AGENDA_ASSUNTOS_BI0 FOR AGENDA_ASSUNTOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idagenda_assuntos,0)=0) then
  new.idagenda_assuntos = gen_id(cod_up,0)||gen_id(idagenda_assuntos,1);
end
^

/* Trigger: AGENDA_ASSUNTOS_BI_LOG */
CREATE TRIGGER AGENDA_ASSUNTOS_BI_LOG FOR AGENDA_ASSUNTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_ASSUNTOS (IDAGENDA_ASSUNTOS,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDAGENDA_ASSUNTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_ASSUNTOS', NEW.IDAGENDA_ASSUNTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_ASSUNTOS_BU_LOG */
CREATE TRIGGER AGENDA_ASSUNTOS_BU_LOG FOR AGENDA_ASSUNTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_ASSUNTOS SET IDAGENDA_ASSUNTOS = '''||NEW.IDAGENDA_ASSUNTOS||''''||TXT||' WHERE IDAGENDA_ASSUNTOS = '''||NEW.IDAGENDA_ASSUNTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_ASSUNTOS', NEW.IDAGENDA_ASSUNTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: AGENDA_ATENDIMENTO_AD_SINCRONIS */
CREATE TRIGGER AGENDA_ATENDIMENTO_AD_SINCRONIS FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM AGENDA_ATENDIMENTO WHERE IDAGENDA_ATENDIMENTO = '||OLD.IDAGENDA_ATENDIMENTO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: AGENDA_ATENDIMENTO_AI_SINCRONIS */
CREATE TRIGGER AGENDA_ATENDIMENTO_AI_SINCRONIS FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO AGENDA_ATENDIMENTO (IDAGENDA_ATENDIMENTO,'
||' ID_UP,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO,'
||' ID_VISITANTE,'
||' ID_ADVOGADO,'
||' IDAGENDA_TIPO_CONTATOS,'
||' IDAGENDA_ASSUNTOS,'
||' IDAGENDA_SITUACAO,'
||' DATA_LANCAMENTO,'
||' ID_FUNCIONARIO_AGENDA,'
||' DATA_AGENDA,'
||' HORA_AGENDA,'
||' OBSERVACAO,'
||' SETOR,'
||' DATA_AUDIENCIA,'
||' HORA_AUDIENCIA,'
||' VARA_AUDIENCIA,'
||' LOCAL_AUDIENCIA,'
||' STATUS) VALUES ('
||COALESCE(NEW.IDAGENDA_ATENDIMENTO,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(NEW.ID_ADVOGADO,'NULL')||','
||COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'NULL')||','
||COALESCE(NEW.IDAGENDA_ASSUNTOS,'NULL')||','
||COALESCE(NEW.IDAGENDA_SITUACAO,'NULL')||','
||COALESCE(''''||NEW.DATA_LANCAMENTO||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO_AGENDA,'NULL')||','
||COALESCE(''''||NEW.DATA_AGENDA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_AGENDA||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.SETOR||'''','NULL')||','
||COALESCE(''''||NEW.DATA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.VARA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.LOCAL_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: AGENDA_ATENDIMENTO_AU_SINCRONIS */
CREATE TRIGGER AGENDA_ATENDIMENTO_AU_SINCRONIS FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.ID_ADVOGADO,'')<>COALESCE(OLD.ID_ADVOGADO,'')) THEN TXT=TXT||',ID_ADVOGADO = '||COALESCE(NEW.ID_ADVOGADO,'NULL');
IF (COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'')<>COALESCE(OLD.IDAGENDA_TIPO_CONTATOS,'')) THEN TXT=TXT||',IDAGENDA_TIPO_CONTATOS = '||COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'NULL');
IF (COALESCE(NEW.IDAGENDA_ASSUNTOS,'')<>COALESCE(OLD.IDAGENDA_ASSUNTOS,'')) THEN TXT=TXT||',IDAGENDA_ASSUNTOS = '||COALESCE(NEW.IDAGENDA_ASSUNTOS,'NULL');
IF (COALESCE(NEW.IDAGENDA_SITUACAO,'')<>COALESCE(OLD.IDAGENDA_SITUACAO,'')) THEN TXT=TXT||',IDAGENDA_SITUACAO = '||COALESCE(NEW.IDAGENDA_SITUACAO,'NULL');
IF (COALESCE(NEW.DATA_LANCAMENTO,'')<>COALESCE(OLD.DATA_LANCAMENTO,'')) THEN TXT=TXT||',DATA_LANCAMENTO = '||COALESCE(''''||NEW.DATA_LANCAMENTO||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO_AGENDA,'')<>COALESCE(OLD.ID_FUNCIONARIO_AGENDA,'')) THEN TXT=TXT||',ID_FUNCIONARIO_AGENDA = '||COALESCE(NEW.ID_FUNCIONARIO_AGENDA,'NULL');
IF (COALESCE(NEW.DATA_AGENDA,'')<>COALESCE(OLD.DATA_AGENDA,'')) THEN TXT=TXT||',DATA_AGENDA = '||COALESCE(''''||NEW.DATA_AGENDA||'''','NULL');
IF (COALESCE(NEW.HORA_AGENDA,'')<>COALESCE(OLD.HORA_AGENDA,'')) THEN TXT=TXT||',HORA_AGENDA = '||COALESCE(''''||NEW.HORA_AGENDA||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.SETOR,'')<>COALESCE(OLD.SETOR,'')) THEN TXT=TXT||',SETOR = '||COALESCE(''''||NEW.SETOR||'''','NULL');
IF (COALESCE(NEW.DATA_AUDIENCIA,'')<>COALESCE(OLD.DATA_AUDIENCIA,'')) THEN TXT=TXT||',DATA_AUDIENCIA = '||COALESCE(''''||NEW.DATA_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.HORA_AUDIENCIA,'')<>COALESCE(OLD.HORA_AUDIENCIA,'')) THEN TXT=TXT||',HORA_AUDIENCIA = '||COALESCE(''''||NEW.HORA_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.VARA_AUDIENCIA,'')<>COALESCE(OLD.VARA_AUDIENCIA,'')) THEN TXT=TXT||',VARA_AUDIENCIA = '||COALESCE(''''||NEW.VARA_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.LOCAL_AUDIENCIA,'')<>COALESCE(OLD.LOCAL_AUDIENCIA,'')) THEN TXT=TXT||',LOCAL_AUDIENCIA = '||COALESCE(''''||NEW.LOCAL_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_ATENDIMENTO SET IDAGENDA_ATENDIMENTO = '''||NEW.IDAGENDA_ATENDIMENTO||''''||TXT||' WHERE IDAGENDA_ATENDIMENTO = '''||NEW.IDAGENDA_ATENDIMENTO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: AGENDA_ATENDIMENTO_BD_LOG */
CREATE TRIGGER AGENDA_ATENDIMENTO_BD_LOG FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_ATENDIMENTO (IDAGENDA_ATENDIMENTO,'
||' ID_UP,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO,'
||' ID_VISITANTE,'
||' ID_ADVOGADO,'
||' IDAGENDA_TIPO_CONTATOS,'
||' IDAGENDA_ASSUNTOS,'
||' IDAGENDA_SITUACAO,'
||' DATA_LANCAMENTO,'
||' ID_FUNCIONARIO_AGENDA,'
||' DATA_AGENDA,'
||' HORA_AGENDA,'
||' OBSERVACAO,'
||' SETOR,'
||' DATA_AUDIENCIA,'
||' HORA_AUDIENCIA,'
||' VARA_AUDIENCIA,'
||' LOCAL_AUDIENCIA,'
||' STATUS) VALUES ('
||COALESCE(OLD.IDAGENDA_ATENDIMENTO,'NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.ID_VISITANTE,'NULL')||','
||COALESCE(OLD.ID_ADVOGADO,'NULL')||','
||COALESCE(OLD.IDAGENDA_TIPO_CONTATOS,'NULL')||','
||COALESCE(OLD.IDAGENDA_ASSUNTOS,'NULL')||','
||COALESCE(OLD.IDAGENDA_SITUACAO,'NULL')||','
||COALESCE(''''||OLD.DATA_LANCAMENTO||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO_AGENDA,'NULL')||','
||COALESCE(''''||OLD.DATA_AGENDA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_AGENDA||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||OLD.SETOR||'''','NULL')||','
||COALESCE(''''||OLD.DATA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||OLD.VARA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||OLD.LOCAL_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||OLD.STATUS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_ATENDIMENTO', OLD.IDAGENDA_ATENDIMENTO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_ATENDIMENTO_BI0 */
CREATE TRIGGER AGENDA_ATENDIMENTO_BI0 FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idagenda_atendimento,0)=0) then
    new.idagenda_atendimento = gen_id(cod_up,0)||gen_id(idagenda_atendimento,1);
end
^

/* Trigger: AGENDA_ATENDIMENTO_BI_LOG */
CREATE TRIGGER AGENDA_ATENDIMENTO_BI_LOG FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_ATENDIMENTO (IDAGENDA_ATENDIMENTO,'
||' ID_UP,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO,'
||' ID_VISITANTE,'
||' ID_ADVOGADO,'
||' IDAGENDA_TIPO_CONTATOS,'
||' IDAGENDA_ASSUNTOS,'
||' IDAGENDA_SITUACAO,'
||' DATA_LANCAMENTO,'
||' ID_FUNCIONARIO_AGENDA,'
||' DATA_AGENDA,'
||' HORA_AGENDA,'
||' OBSERVACAO,'
||' SETOR,'
||' DATA_AUDIENCIA,'
||' HORA_AUDIENCIA,'
||' VARA_AUDIENCIA,'
||' LOCAL_AUDIENCIA,'
||' STATUS) VALUES ('
||COALESCE(NEW.IDAGENDA_ATENDIMENTO,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(NEW.ID_ADVOGADO,'NULL')||','
||COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'NULL')||','
||COALESCE(NEW.IDAGENDA_ASSUNTOS,'NULL')||','
||COALESCE(NEW.IDAGENDA_SITUACAO,'NULL')||','
||COALESCE(''''||NEW.DATA_LANCAMENTO||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO_AGENDA,'NULL')||','
||COALESCE(''''||NEW.DATA_AGENDA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_AGENDA||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.SETOR||'''','NULL')||','
||COALESCE(''''||NEW.DATA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.VARA_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.LOCAL_AUDIENCIA||'''','NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_ATENDIMENTO', NEW.IDAGENDA_ATENDIMENTO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_ATENDIMENTO_BU_LOG */
CREATE TRIGGER AGENDA_ATENDIMENTO_BU_LOG FOR AGENDA_ATENDIMENTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.ID_ADVOGADO,'')<>COALESCE(OLD.ID_ADVOGADO,'')) THEN TXT=TXT||',ID_ADVOGADO = '||COALESCE(NEW.ID_ADVOGADO,'NULL');
IF (COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'')<>COALESCE(OLD.IDAGENDA_TIPO_CONTATOS,'')) THEN TXT=TXT||',IDAGENDA_TIPO_CONTATOS = '||COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'NULL');
IF (COALESCE(NEW.IDAGENDA_ASSUNTOS,'')<>COALESCE(OLD.IDAGENDA_ASSUNTOS,'')) THEN TXT=TXT||',IDAGENDA_ASSUNTOS = '||COALESCE(NEW.IDAGENDA_ASSUNTOS,'NULL');
IF (COALESCE(NEW.IDAGENDA_SITUACAO,'')<>COALESCE(OLD.IDAGENDA_SITUACAO,'')) THEN TXT=TXT||',IDAGENDA_SITUACAO = '||COALESCE(NEW.IDAGENDA_SITUACAO,'NULL');
IF (COALESCE(NEW.DATA_LANCAMENTO,'')<>COALESCE(OLD.DATA_LANCAMENTO,'')) THEN TXT=TXT||',DATA_LANCAMENTO = '||COALESCE(''''||NEW.DATA_LANCAMENTO||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO_AGENDA,'')<>COALESCE(OLD.ID_FUNCIONARIO_AGENDA,'')) THEN TXT=TXT||',ID_FUNCIONARIO_AGENDA = '||COALESCE(NEW.ID_FUNCIONARIO_AGENDA,'NULL');
IF (COALESCE(NEW.DATA_AGENDA,'')<>COALESCE(OLD.DATA_AGENDA,'')) THEN TXT=TXT||',DATA_AGENDA = '||COALESCE(''''||NEW.DATA_AGENDA||'''','NULL');
IF (COALESCE(NEW.HORA_AGENDA,'')<>COALESCE(OLD.HORA_AGENDA,'')) THEN TXT=TXT||',HORA_AGENDA = '||COALESCE(''''||NEW.HORA_AGENDA||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.SETOR,'')<>COALESCE(OLD.SETOR,'')) THEN TXT=TXT||',SETOR = '||COALESCE(''''||NEW.SETOR||'''','NULL');
IF (COALESCE(NEW.DATA_AUDIENCIA,'')<>COALESCE(OLD.DATA_AUDIENCIA,'')) THEN TXT=TXT||',DATA_AUDIENCIA = '||COALESCE(''''||NEW.DATA_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.HORA_AUDIENCIA,'')<>COALESCE(OLD.HORA_AUDIENCIA,'')) THEN TXT=TXT||',HORA_AUDIENCIA = '||COALESCE(''''||NEW.HORA_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.VARA_AUDIENCIA,'')<>COALESCE(OLD.VARA_AUDIENCIA,'')) THEN TXT=TXT||',VARA_AUDIENCIA = '||COALESCE(''''||NEW.VARA_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.LOCAL_AUDIENCIA,'')<>COALESCE(OLD.LOCAL_AUDIENCIA,'')) THEN TXT=TXT||',LOCAL_AUDIENCIA = '||COALESCE(''''||NEW.LOCAL_AUDIENCIA||'''','NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_ATENDIMENTO SET IDAGENDA_ATENDIMENTO = '''||NEW.IDAGENDA_ATENDIMENTO||''''||TXT||' WHERE IDAGENDA_ATENDIMENTO = '''||NEW.IDAGENDA_ATENDIMENTO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_ATENDIMENTO', NEW.IDAGENDA_ATENDIMENTO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: AGENDA_SITUACAO_AD_SINCRONISMO */
CREATE TRIGGER AGENDA_SITUACAO_AD_SINCRONISMO FOR AGENDA_SITUACAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM AGENDA_SITUACAO WHERE IDAGENDA_SITUACAO = '||OLD.IDAGENDA_SITUACAO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: AGENDA_SITUACAO_AI_SINCRONISMO */
CREATE TRIGGER AGENDA_SITUACAO_AI_SINCRONISMO FOR AGENDA_SITUACAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO AGENDA_SITUACAO (IDAGENDA_SITUACAO,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDAGENDA_SITUACAO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: AGENDA_SITUACAO_AU_SINCRONISMO */
CREATE TRIGGER AGENDA_SITUACAO_AU_SINCRONISMO FOR AGENDA_SITUACAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_SITUACAO SET IDAGENDA_SITUACAO = '''||NEW.IDAGENDA_SITUACAO||''''||TXT||' WHERE IDAGENDA_SITUACAO = '''||NEW.IDAGENDA_SITUACAO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: AGENDA_SITUACAO_BD_LOG */
CREATE TRIGGER AGENDA_SITUACAO_BD_LOG FOR AGENDA_SITUACAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_SITUACAO (IDAGENDA_SITUACAO,'
||' DESCRICAO) VALUES ('
||COALESCE(OLD.IDAGENDA_SITUACAO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_SITUACAO', OLD.IDAGENDA_SITUACAO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_SITUACAO_BI0 */
CREATE TRIGGER AGENDA_SITUACAO_BI0 FOR AGENDA_SITUACAO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idagenda_situacao,0)=0) then
    new.idagenda_situacao = gen_id(cod_up,0)||gen_id(idagenda_situacao,1);
end
^

/* Trigger: AGENDA_SITUACAO_BI_LOG */
CREATE TRIGGER AGENDA_SITUACAO_BI_LOG FOR AGENDA_SITUACAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_SITUACAO (IDAGENDA_SITUACAO,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDAGENDA_SITUACAO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_SITUACAO', NEW.IDAGENDA_SITUACAO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_SITUACAO_BU_LOG */
CREATE TRIGGER AGENDA_SITUACAO_BU_LOG FOR AGENDA_SITUACAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_SITUACAO SET IDAGENDA_SITUACAO = '''||NEW.IDAGENDA_SITUACAO||''''||TXT||' WHERE IDAGENDA_SITUACAO = '''||NEW.IDAGENDA_SITUACAO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_SITUACAO', NEW.IDAGENDA_SITUACAO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: AGENDA_TIPO_CONTATOS_AD_SINCRON */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_AD_SINCRON FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM AGENDA_TIPO_CONTATOS WHERE IDAGENDA_TIPO_CONTATOS = '||OLD.IDAGENDA_TIPO_CONTATOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: AGENDA_TIPO_CONTATOS_AI_SINCRON */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_AI_SINCRON FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO AGENDA_TIPO_CONTATOS (IDAGENDA_TIPO_CONTATOS,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: AGENDA_TIPO_CONTATOS_AU_SINCRON */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_AU_SINCRON FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_TIPO_CONTATOS SET IDAGENDA_TIPO_CONTATOS = '''||NEW.IDAGENDA_TIPO_CONTATOS||''''||TXT||' WHERE IDAGENDA_TIPO_CONTATOS = '''||NEW.IDAGENDA_TIPO_CONTATOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: AGENDA_TIPO_CONTATOS_BD_LOG */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_BD_LOG FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_TIPO_CONTATOS (IDAGENDA_TIPO_CONTATOS,'
||' DESCRICAO) VALUES ('
||COALESCE(OLD.IDAGENDA_TIPO_CONTATOS,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_TIPO_CONTATOS', OLD.IDAGENDA_TIPO_CONTATOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_TIPO_CONTATOS_BI0 */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_BI0 FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idagenda_tipo_contatos,0)=0) then
    new.idagenda_tipo_contatos = gen_id(cod_up,0)||gen_id(idagenda_tipo_contatos,1);
end
^

/* Trigger: AGENDA_TIPO_CONTATOS_BI_LOG */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_BI_LOG FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENDA_TIPO_CONTATOS (IDAGENDA_TIPO_CONTATOS,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDAGENDA_TIPO_CONTATOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_TIPO_CONTATOS', NEW.IDAGENDA_TIPO_CONTATOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENDA_TIPO_CONTATOS_BU_LOG */
CREATE TRIGGER AGENDA_TIPO_CONTATOS_BU_LOG FOR AGENDA_TIPO_CONTATOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENDA_TIPO_CONTATOS SET IDAGENDA_TIPO_CONTATOS = '''||NEW.IDAGENDA_TIPO_CONTATOS||''''||TXT||' WHERE IDAGENDA_TIPO_CONTATOS = '''||NEW.IDAGENDA_TIPO_CONTATOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENDA_TIPO_CONTATOS', NEW.IDAGENDA_TIPO_CONTATOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: AGENTE_EQUIPE_AD_SINCRONISMO */
CREATE TRIGGER AGENTE_EQUIPE_AD_SINCRONISMO FOR AGENTE_EQUIPE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM AGENTE_EQUIPE WHERE IDAGENTE_EQUIPE = '||OLD.IDAGENTE_EQUIPE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: AGENTE_EQUIPE_AI_SINCRONISMO */
CREATE TRIGGER AGENTE_EQUIPE_AI_SINCRONISMO FOR AGENTE_EQUIPE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO AGENTE_EQUIPE (IDAGENTE_EQUIPE,'
||' IDEQUIPE,'
||' IDFUNCIONARIO,'
||' IDPOSTO_TRABALHO,'
||' ST,'
||' IDPOSTO_ROTATIVO_1,'
||' IDPOSTO_ROTATIVO_2,'
||' IDPOSTO_ROTATIVO_3,'
||' IDPOSTO_ROTATIVO_4,'
||' IDPOSTO_ROTATIVO_5,'
||' IDPOSTO_ROTATIVO_6,'
||' OBSERVACOES) VALUES ('
||COALESCE(NEW.IDAGENTE_EQUIPE,'NULL')||','
||COALESCE(NEW.IDEQUIPE,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_1,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_2,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_3,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_4,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_5,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_6,'NULL')||','
||COALESCE(''''||NEW.OBSERVACOES||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: AGENTE_EQUIPE_AU_SINCRONISMO */
CREATE TRIGGER AGENTE_EQUIPE_AU_SINCRONISMO FOR AGENTE_EQUIPE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDEQUIPE,'')<>COALESCE(OLD.IDEQUIPE,'')) THEN TXT=TXT||',IDEQUIPE = '||COALESCE(NEW.IDEQUIPE,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_1,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_1,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_1 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_1,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_2,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_2,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_2 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_2,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_3,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_3,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_3 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_3,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_4,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_4,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_4 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_4,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_5,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_5,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_5 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_5,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_6,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_6,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_6 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_6,'NULL');
IF (COALESCE(NEW.OBSERVACOES,'')<>COALESCE(OLD.OBSERVACOES,'')) THEN TXT=TXT||',OBSERVACOES = '||COALESCE(''''||NEW.OBSERVACOES||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENTE_EQUIPE SET IDAGENTE_EQUIPE = '''||NEW.IDAGENTE_EQUIPE||''''||TXT||' WHERE IDAGENTE_EQUIPE = '''||NEW.IDAGENTE_EQUIPE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: AGENTE_EQUIPE_BD_LOG */
CREATE TRIGGER AGENTE_EQUIPE_BD_LOG FOR AGENTE_EQUIPE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENTE_EQUIPE (IDAGENTE_EQUIPE,'
||' IDEQUIPE,'
||' IDFUNCIONARIO,'
||' IDPOSTO_TRABALHO,'
||' ST,'
||' IDPOSTO_ROTATIVO_1,'
||' IDPOSTO_ROTATIVO_2,'
||' IDPOSTO_ROTATIVO_3,'
||' IDPOSTO_ROTATIVO_4,'
||' IDPOSTO_ROTATIVO_5,'
||' IDPOSTO_ROTATIVO_6,'
||' OBSERVACOES) VALUES ('
||COALESCE(OLD.IDAGENTE_EQUIPE,'NULL')||','
||COALESCE(OLD.IDEQUIPE,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO,'NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.ST||'''','NULL')||','
||COALESCE(OLD.IDPOSTO_ROTATIVO_1,'NULL')||','
||COALESCE(OLD.IDPOSTO_ROTATIVO_2,'NULL')||','
||COALESCE(OLD.IDPOSTO_ROTATIVO_3,'NULL')||','
||COALESCE(OLD.IDPOSTO_ROTATIVO_4,'NULL')||','
||COALESCE(OLD.IDPOSTO_ROTATIVO_5,'NULL')||','
||COALESCE(OLD.IDPOSTO_ROTATIVO_6,'NULL')||','
||COALESCE(''''||OLD.OBSERVACOES||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENTE_EQUIPE', OLD.IDAGENTE_EQUIPE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENTE_EQUIPE_BI0 */
CREATE TRIGGER AGENTE_EQUIPE_BI0 FOR AGENTE_EQUIPE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDAGENTE_EQUIPE IS NULL OR (NEW.IDAGENTE_EQUIPE = 0)  ) THEN
    NEW.IDAGENTE_EQUIPE = GEN_ID (COD_UP, 0) || GEN_ID (IDAGENTE_EQUIPE, 1);
end
^

/* Trigger: AGENTE_EQUIPE_BI_LOG */
CREATE TRIGGER AGENTE_EQUIPE_BI_LOG FOR AGENTE_EQUIPE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AGENTE_EQUIPE (IDAGENTE_EQUIPE,'
||' IDEQUIPE,'
||' IDFUNCIONARIO,'
||' IDPOSTO_TRABALHO,'
||' ST,'
||' IDPOSTO_ROTATIVO_1,'
||' IDPOSTO_ROTATIVO_2,'
||' IDPOSTO_ROTATIVO_3,'
||' IDPOSTO_ROTATIVO_4,'
||' IDPOSTO_ROTATIVO_5,'
||' IDPOSTO_ROTATIVO_6,'
||' OBSERVACOES) VALUES ('
||COALESCE(NEW.IDAGENTE_EQUIPE,'NULL')||','
||COALESCE(NEW.IDEQUIPE,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_1,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_2,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_3,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_4,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_5,'NULL')||','
||COALESCE(NEW.IDPOSTO_ROTATIVO_6,'NULL')||','
||COALESCE(''''||NEW.OBSERVACOES||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENTE_EQUIPE', NEW.IDAGENTE_EQUIPE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AGENTE_EQUIPE_BU_LOG */
CREATE TRIGGER AGENTE_EQUIPE_BU_LOG FOR AGENTE_EQUIPE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDEQUIPE,'')<>COALESCE(OLD.IDEQUIPE,'')) THEN TXT=TXT||',IDEQUIPE = '||COALESCE(NEW.IDEQUIPE,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_1,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_1,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_1 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_1,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_2,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_2,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_2 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_2,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_3,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_3,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_3 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_3,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_4,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_4,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_4 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_4,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_5,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_5,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_5 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_5,'NULL');
IF (COALESCE(NEW.IDPOSTO_ROTATIVO_6,'')<>COALESCE(OLD.IDPOSTO_ROTATIVO_6,'')) THEN TXT=TXT||',IDPOSTO_ROTATIVO_6 = '||COALESCE(NEW.IDPOSTO_ROTATIVO_6,'NULL');
IF (COALESCE(NEW.OBSERVACOES,'')<>COALESCE(OLD.OBSERVACOES,'')) THEN TXT=TXT||',OBSERVACOES = '||COALESCE(''''||NEW.OBSERVACOES||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AGENTE_EQUIPE SET IDAGENTE_EQUIPE = '''||NEW.IDAGENTE_EQUIPE||''''||TXT||' WHERE IDAGENTE_EQUIPE = '''||NEW.IDAGENTE_EQUIPE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AGENTE_EQUIPE', NEW.IDAGENTE_EQUIPE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: AREA_SERVIDOR_AD_SINCRONISMO */
CREATE TRIGGER AREA_SERVIDOR_AD_SINCRONISMO FOR AREA_SERVIDOR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM AREA_SERVIDOR WHERE ID_AREA = '||OLD.ID_AREA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: AREA_SERVIDOR_AI_SINCRONISMO */
CREATE TRIGGER AREA_SERVIDOR_AI_SINCRONISMO FOR AREA_SERVIDOR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO AREA_SERVIDOR (ID_AREA,'
||' AREA_SERVIDOR) VALUES ('
||COALESCE(NEW.ID_AREA,'NULL')||','
||COALESCE(''''||NEW.AREA_SERVIDOR||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: AREA_SERVIDOR_AU_SINCRONISMO */
CREATE TRIGGER AREA_SERVIDOR_AU_SINCRONISMO FOR AREA_SERVIDOR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.AREA_SERVIDOR,'')<>COALESCE(OLD.AREA_SERVIDOR,'')) THEN TXT=TXT||',AREA_SERVIDOR = '||COALESCE(''''||NEW.AREA_SERVIDOR||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AREA_SERVIDOR SET ID_AREA = '''||NEW.ID_AREA||''''||TXT||' WHERE ID_AREA = '''||NEW.ID_AREA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: AREA_SERVIDOR_BD_LOG */
CREATE TRIGGER AREA_SERVIDOR_BD_LOG FOR AREA_SERVIDOR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AREA_SERVIDOR (ID_AREA,'
||' AREA_SERVIDOR) VALUES ('
||COALESCE(OLD.ID_AREA,'NULL')||','
||COALESCE(''''||OLD.AREA_SERVIDOR||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AREA_SERVIDOR', OLD.ID_AREA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AREA_SERVIDOR_BI0 */
CREATE TRIGGER AREA_SERVIDOR_BI0 FOR AREA_SERVIDOR
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
     if (NEW.id_area IS null or (new.id_area = 0)  ) then
    new.id_area = gen_id (cod_up, 0) || gen_id (id_area_servidor, 1);
end
^

/* Trigger: AREA_SERVIDOR_BI_LOG */
CREATE TRIGGER AREA_SERVIDOR_BI_LOG FOR AREA_SERVIDOR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO AREA_SERVIDOR (ID_AREA,'
||' AREA_SERVIDOR) VALUES ('
||COALESCE(NEW.ID_AREA,'NULL')||','
||COALESCE(''''||NEW.AREA_SERVIDOR||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AREA_SERVIDOR', NEW.ID_AREA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: AREA_SERVIDOR_BU_LOG */
CREATE TRIGGER AREA_SERVIDOR_BU_LOG FOR AREA_SERVIDOR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.AREA_SERVIDOR,'')<>COALESCE(OLD.AREA_SERVIDOR,'')) THEN TXT=TXT||',AREA_SERVIDOR = '||COALESCE(''''||NEW.AREA_SERVIDOR||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE AREA_SERVIDOR SET ID_AREA = '''||NEW.ID_AREA||''''||TXT||' WHERE ID_AREA = '''||NEW.ID_AREA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'AREA_SERVIDOR', NEW.ID_AREA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ARQUIVOS_AD_SINCRONISMO */
CREATE TRIGGER ARQUIVOS_AD_SINCRONISMO FOR ARQUIVOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-27 08:13:04.2650
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ARQUIVOS WHERE IDARQUIVOS = '||OLD.IDARQUIVOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ARQUIVOS_AI_SINCRONISMO */
CREATE TRIGGER ARQUIVOS_AI_SINCRONISMO FOR ARQUIVOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-27 08:13:04.2650

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ARQUIVOS (IDARQUIVOS,'
||' DATA,'
||' DESCRICAO,'
||' ID_INTERNO,'
||' ID_FUNCIONARIO,'
||' HISTORICO) VALUES ('
||COALESCE(NEW.IDARQUIVOS,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ARQUIVOS_AU_SINCRONISMO */
CREATE TRIGGER ARQUIVOS_AU_SINCRONISMO FOR ARQUIVOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-27 08:13:04.2650
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ARQUIVOS SET IDARQUIVOS = '''||NEW.IDARQUIVOS||''''||TXT||' WHERE IDARQUIVOS = '''||NEW.IDARQUIVOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ARQUIVOS_BD_LOG */
CREATE TRIGGER ARQUIVOS_BD_LOG FOR ARQUIVOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-27 08:12:26.0630

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ARQUIVOS (IDARQUIVOS,'
||' DATA,'
||' DESCRICAO,'
||' ID_INTERNO,'
||' ID_FUNCIONARIO,'
||' HISTORICO) VALUES ('
||COALESCE(OLD.IDARQUIVOS,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||OLD.HISTORICO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARQUIVOS', OLD.IDARQUIVOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ARQUIVOS_BI0 */
CREATE TRIGGER ARQUIVOS_BI0 FOR ARQUIVOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idARQUIVOS,0)=0) then
  new.idARQUIVOS = gen_id(cod_up,0)||gen_id(idARQUIVOS,1);
end
^

/* Trigger: ARQUIVOS_BI_LOG */
CREATE TRIGGER ARQUIVOS_BI_LOG FOR ARQUIVOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-27 08:12:26.0630

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ARQUIVOS (IDARQUIVOS,'
||' DATA,'
||' DESCRICAO,'
||' ID_INTERNO,'
||' ID_FUNCIONARIO,'
||' HISTORICO) VALUES ('
||COALESCE(NEW.IDARQUIVOS,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARQUIVOS', NEW.IDARQUIVOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ARQUIVOS_BU_LOG */
CREATE TRIGGER ARQUIVOS_BU_LOG FOR ARQUIVOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-27 08:12:26.0630
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ARQUIVOS SET IDARQUIVOS = '''||NEW.IDARQUIVOS||''''||TXT||' WHERE IDARQUIVOS = '''||NEW.IDARQUIVOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARQUIVOS', NEW.IDARQUIVOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ARQUIVOS_IU_SINC_BLOB */
CREATE TRIGGER ARQUIVOS_IU_SINC_BLOB FOR ARQUIVOS
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-27 08:13:04.2650
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.ARQUIVO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'ARQUIVOS', 'ARQUIVO', 'IDARQUIVOS', NEW.IDARQUIVOS);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.ARQUIVO <> NEW.ARQUIVO) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'ARQUIVOS', 'ARQUIVO', 'IDARQUIVOS', NEW.IDARQUIVOS);
        END

    END

   END

END
^

/* Trigger: ARTIGO_AD_SINCRONISMO */
CREATE TRIGGER ARTIGO_AD_SINCRONISMO FOR ARTIGO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ARTIGO WHERE ID_ARTIGO = '||OLD.ID_ARTIGO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ARTIGO_AI_SINCRONISMO */
CREATE TRIGGER ARTIGO_AI_SINCRONISMO FOR ARTIGO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ARTIGO (ID_ARTIGO,'
||' ARTIGO) VALUES ('
||COALESCE(NEW.ID_ARTIGO,'NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ARTIGO_AU_SINCRONISMO */
CREATE TRIGGER ARTIGO_AU_SINCRONISMO FOR ARTIGO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ARTIGO SET ID_ARTIGO = '''||NEW.ID_ARTIGO||''''||TXT||' WHERE ID_ARTIGO = '''||NEW.ID_ARTIGO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ARTIGO_BD_LOG */
CREATE TRIGGER ARTIGO_BD_LOG FOR ARTIGO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ARTIGO (ID_ARTIGO,'
||' ARTIGO) VALUES ('
||COALESCE(OLD.ID_ARTIGO,'NULL')||','
||COALESCE(''''||OLD.ARTIGO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARTIGO', OLD.ID_ARTIGO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ARTIGO_BI0 */
CREATE TRIGGER ARTIGO_BI0 FOR ARTIGO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_artigo IS null or (new.id_artigo = 0)  ) then
    new.id_artigo = gen_id (cod_up, 0) || gen_id (id_artigo, 1);
end
^

/* Trigger: ARTIGO_BI_LOG */
CREATE TRIGGER ARTIGO_BI_LOG FOR ARTIGO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ARTIGO (ID_ARTIGO,'
||' ARTIGO) VALUES ('
||COALESCE(NEW.ID_ARTIGO,'NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARTIGO', NEW.ID_ARTIGO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ARTIGO_BU_LOG */
CREATE TRIGGER ARTIGO_BU_LOG FOR ARTIGO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ARTIGO SET ID_ARTIGO = '''||NEW.ID_ARTIGO||''''||TXT||' WHERE ID_ARTIGO = '''||NEW.ID_ARTIGO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARTIGO', NEW.ID_ARTIGO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ARTIGO_PERFIL_AD_SINCRONISMO */
CREATE TRIGGER ARTIGO_PERFIL_AD_SINCRONISMO FOR ARTIGO_PERFIL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ARTIGO_PERFIL WHERE ID_ARTIGO_PERFIL = '||OLD.ID_ARTIGO_PERFIL||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ARTIGO_PERFIL_AI_SINCRONISMO */
CREATE TRIGGER ARTIGO_PERFIL_AI_SINCRONISMO FOR ARTIGO_PERFIL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ARTIGO_PERFIL (ID_ARTIGO_PERFIL,'
||' ARTIGO_PERFIL) VALUES ('
||COALESCE(NEW.ID_ARTIGO_PERFIL,'NULL')||','
||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ARTIGO_PERFIL_AU_SINCRONISMO */
CREATE TRIGGER ARTIGO_PERFIL_AU_SINCRONISMO FOR ARTIGO_PERFIL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ARTIGO_PERFIL,'')<>COALESCE(OLD.ARTIGO_PERFIL,'')) THEN TXT=TXT||',ARTIGO_PERFIL = '||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ARTIGO_PERFIL SET ID_ARTIGO_PERFIL = '''||NEW.ID_ARTIGO_PERFIL||''''||TXT||' WHERE ID_ARTIGO_PERFIL = '''||NEW.ID_ARTIGO_PERFIL||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ARTIGO_PERFIL_BD_LOG */
CREATE TRIGGER ARTIGO_PERFIL_BD_LOG FOR ARTIGO_PERFIL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ARTIGO_PERFIL (ID_ARTIGO_PERFIL,'
||' ARTIGO_PERFIL) VALUES ('
||COALESCE(OLD.ID_ARTIGO_PERFIL,'NULL')||','
||COALESCE(''''||OLD.ARTIGO_PERFIL||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARTIGO_PERFIL', OLD.ID_ARTIGO_PERFIL,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ARTIGO_PERFIL_BI0 */
CREATE TRIGGER ARTIGO_PERFIL_BI0 FOR ARTIGO_PERFIL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_artigo_perfil IS null or (new.id_artigo_perfil = 0)  ) then
    new.id_artigo_perfil = gen_id (cod_up, 0) || gen_id (idartigo_perfil, 1);
end
^

/* Trigger: ARTIGO_PERFIL_BI_LOG */
CREATE TRIGGER ARTIGO_PERFIL_BI_LOG FOR ARTIGO_PERFIL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ARTIGO_PERFIL (ID_ARTIGO_PERFIL,'
||' ARTIGO_PERFIL) VALUES ('
||COALESCE(NEW.ID_ARTIGO_PERFIL,'NULL')||','
||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARTIGO_PERFIL', NEW.ID_ARTIGO_PERFIL,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ARTIGO_PERFIL_BU_LOG */
CREATE TRIGGER ARTIGO_PERFIL_BU_LOG FOR ARTIGO_PERFIL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ARTIGO_PERFIL,'')<>COALESCE(OLD.ARTIGO_PERFIL,'')) THEN TXT=TXT||',ARTIGO_PERFIL = '||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ARTIGO_PERFIL SET ID_ARTIGO_PERFIL = '''||NEW.ID_ARTIGO_PERFIL||''''||TXT||' WHERE ID_ARTIGO_PERFIL = '''||NEW.ID_ARTIGO_PERFIL||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ARTIGO_PERFIL', NEW.ID_ARTIGO_PERFIL,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_AD_SIN */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_AD_SIN FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ATENDIMENTO_PSICOSSOCIAL WHERE ID_ATENDIMENTO = '||OLD.ID_ATENDIMENTO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_AI_SIN */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_AI_SIN FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ATENDIMENTO_PSICOSSOCIAL (ID_ATENDIMENTO,'
||' IDINTERNO,'
||' DATAATENDIMENTO,'
||' IDTECNICO,'
||' DESCRICAO_ATENDIMENTO) VALUES ('
||COALESCE(NEW.ID_ATENDIMENTO,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.DATAATENDIMENTO||'''','NULL')||','
||COALESCE(NEW.IDTECNICO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_ATENDIMENTO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_AU_SIN */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_AU_SIN FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.DATAATENDIMENTO,'')<>COALESCE(OLD.DATAATENDIMENTO,'')) THEN TXT=TXT||',DATAATENDIMENTO = '||COALESCE(''''||NEW.DATAATENDIMENTO||'''','NULL');
IF (COALESCE(NEW.IDTECNICO,'')<>COALESCE(OLD.IDTECNICO,'')) THEN TXT=TXT||',IDTECNICO = '||COALESCE(NEW.IDTECNICO,'NULL');
IF (COALESCE(NEW.DESCRICAO_ATENDIMENTO,'')<>COALESCE(OLD.DESCRICAO_ATENDIMENTO,'')) THEN TXT=TXT||',DESCRICAO_ATENDIMENTO = '||COALESCE(''''||NEW.DESCRICAO_ATENDIMENTO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ATENDIMENTO_PSICOSSOCIAL SET ID_ATENDIMENTO = '''||NEW.ID_ATENDIMENTO||''''||TXT||' WHERE ID_ATENDIMENTO = '''||NEW.ID_ATENDIMENTO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_BD_LOG */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_BD_LOG FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ATENDIMENTO_PSICOSSOCIAL (ID_ATENDIMENTO,'
||' IDINTERNO,'
||' DATAATENDIMENTO,'
||' IDTECNICO,'
||' DESCRICAO_ATENDIMENTO) VALUES ('
||COALESCE(OLD.ID_ATENDIMENTO,'NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||','
||COALESCE(''''||OLD.DATAATENDIMENTO||'''','NULL')||','
||COALESCE(OLD.IDTECNICO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO_ATENDIMENTO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ATENDIMENTO_PSICOSSOCIAL', OLD.ID_ATENDIMENTO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_BI0 */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_BI0 FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.id_atendimento,0)=0) then
  new.id_atendimento = gen_id (cod_up, 0) ||gen_id(idatendiemnto_psicosocial,1);
end
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_BI_LOG */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_BI_LOG FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ATENDIMENTO_PSICOSSOCIAL (ID_ATENDIMENTO,'
||' IDINTERNO,'
||' DATAATENDIMENTO,'
||' IDTECNICO,'
||' DESCRICAO_ATENDIMENTO) VALUES ('
||COALESCE(NEW.ID_ATENDIMENTO,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.DATAATENDIMENTO||'''','NULL')||','
||COALESCE(NEW.IDTECNICO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_ATENDIMENTO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ATENDIMENTO_PSICOSSOCIAL', NEW.ID_ATENDIMENTO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ATENDIMENTO_PSICOSSOCIAL_BU_LOG */
CREATE TRIGGER ATENDIMENTO_PSICOSSOCIAL_BU_LOG FOR ATENDIMENTO_PSICOSSOCIAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.DATAATENDIMENTO,'')<>COALESCE(OLD.DATAATENDIMENTO,'')) THEN TXT=TXT||',DATAATENDIMENTO = '||COALESCE(''''||NEW.DATAATENDIMENTO||'''','NULL');
IF (COALESCE(NEW.IDTECNICO,'')<>COALESCE(OLD.IDTECNICO,'')) THEN TXT=TXT||',IDTECNICO = '||COALESCE(NEW.IDTECNICO,'NULL');
IF (COALESCE(NEW.DESCRICAO_ATENDIMENTO,'')<>COALESCE(OLD.DESCRICAO_ATENDIMENTO,'')) THEN TXT=TXT||',DESCRICAO_ATENDIMENTO = '||COALESCE(''''||NEW.DESCRICAO_ATENDIMENTO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ATENDIMENTO_PSICOSSOCIAL SET ID_ATENDIMENTO = '''||NEW.ID_ATENDIMENTO||''''||TXT||' WHERE ID_ATENDIMENTO = '''||NEW.ID_ATENDIMENTO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ATENDIMENTO_PSICOSSOCIAL', NEW.ID_ATENDIMENTO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: BACKUP_SINCRONISMO_BI0 */
CREATE TRIGGER BACKUP_SINCRONISMO_BI0 FOR BACKUP_SINCRONISMO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.IDBACKUP_SINCRONISMO = GEN_ID(IDBACKUP_SINCRONISMO_GEN, 1);
end
^

/* Trigger: BACKUP_SINC_BLOB_BI0 */
CREATE TRIGGER BACKUP_SINC_BLOB_BI0 FOR BACKUP_SINCRONISMO_BLOB
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  NEW.DATA_HORA_BACKUP = 'NOW';
  NEW.IDBACKUP_SINCRONISMO_BLOB = GEN_ID(IDBACKUP_SINCRONISMO_BLOB_GEN,1);
END
^

/* Trigger: BACKUP_VISITANTE_BI0 */
CREATE TRIGGER BACKUP_VISITANTE_BI0 FOR BACKUP_VISITANTE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.idbackup_visitante IS NULL OR (NEW.idbackup_visitante = 0)) then
  BEGIN
    NEW.idbackup_visitante = GEN_ID(cod_up,0)||GEN_ID(idbackup_visitante,1);
  END
end
^

/* Trigger: CALC_SETOR_TRABALHO_AD_SINCRONI */
CREATE TRIGGER CALC_SETOR_TRABALHO_AD_SINCRONI FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CALC_SETOR_TRABALHO WHERE IDCALC_SETOR_TRABALHO = '||OLD.IDCALC_SETOR_TRABALHO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CALC_SETOR_TRABALHO_AI_SINCRONI */
CREATE TRIGGER CALC_SETOR_TRABALHO_AI_SINCRONI FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CALC_SETOR_TRABALHO (IDCALC_SETOR_TRABALHO,'
||' ID_INTERNO,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' QTDEDIASTRABALHADO,'
||' DIANAOREMIDO,'
||' QTDEDIASREMIDO,'
||' DIASTRABALHADOEXTENSO,'
||' DIASREMIDOEXTENSO,'
||' TOTALDIASTRABALHO,'
||' TOTALDIASREMIDO,'
||' ID_SETOR_TRABALHO) VALUES ('
||COALESCE(NEW.IDCALC_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||','
||COALESCE(NEW.QTDEDIASTRABALHADO,'NULL')||','
||COALESCE(NEW.DIANAOREMIDO,'NULL')||','
||COALESCE(NEW.QTDEDIASREMIDO,'NULL')||','
||COALESCE(''''||NEW.DIASTRABALHADOEXTENSO||'''','NULL')||','
||COALESCE(''''||NEW.DIASREMIDOEXTENSO||'''','NULL')||','
||COALESCE(NEW.TOTALDIASTRABALHO,'NULL')||','
||COALESCE(NEW.TOTALDIASREMIDO,'NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CALC_SETOR_TRABALHO_AU_SINCRONI */
CREATE TRIGGER CALC_SETOR_TRABALHO_AU_SINCRONI FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_INICIAL,'')<>COALESCE(OLD.DATA_INICIAL,'')) THEN TXT=TXT||',DATA_INICIAL = '||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (COALESCE(NEW.QTDEDIASTRABALHADO,'')<>COALESCE(OLD.QTDEDIASTRABALHADO,'')) THEN TXT=TXT||',QTDEDIASTRABALHADO = '||COALESCE(NEW.QTDEDIASTRABALHADO,'NULL');
IF (COALESCE(NEW.DIANAOREMIDO,'')<>COALESCE(OLD.DIANAOREMIDO,'')) THEN TXT=TXT||',DIANAOREMIDO = '||COALESCE(NEW.DIANAOREMIDO,'NULL');
IF (COALESCE(NEW.QTDEDIASREMIDO,'')<>COALESCE(OLD.QTDEDIASREMIDO,'')) THEN TXT=TXT||',QTDEDIASREMIDO = '||COALESCE(NEW.QTDEDIASREMIDO,'NULL');
IF (COALESCE(NEW.DIASTRABALHADOEXTENSO,'')<>COALESCE(OLD.DIASTRABALHADOEXTENSO,'')) THEN TXT=TXT||',DIASTRABALHADOEXTENSO = '||COALESCE(''''||NEW.DIASTRABALHADOEXTENSO||'''','NULL');
IF (COALESCE(NEW.DIASREMIDOEXTENSO,'')<>COALESCE(OLD.DIASREMIDOEXTENSO,'')) THEN TXT=TXT||',DIASREMIDOEXTENSO = '||COALESCE(''''||NEW.DIASREMIDOEXTENSO||'''','NULL');
IF (COALESCE(NEW.TOTALDIASTRABALHO,'')<>COALESCE(OLD.TOTALDIASTRABALHO,'')) THEN TXT=TXT||',TOTALDIASTRABALHO = '||COALESCE(NEW.TOTALDIASTRABALHO,'NULL');
IF (COALESCE(NEW.TOTALDIASREMIDO,'')<>COALESCE(OLD.TOTALDIASREMIDO,'')) THEN TXT=TXT||',TOTALDIASREMIDO = '||COALESCE(NEW.TOTALDIASREMIDO,'NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CALC_SETOR_TRABALHO SET IDCALC_SETOR_TRABALHO = '''||NEW.IDCALC_SETOR_TRABALHO||''''||TXT||' WHERE IDCALC_SETOR_TRABALHO = '''||NEW.IDCALC_SETOR_TRABALHO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CALC_SETOR_TRABALHO_BD_LOG */
CREATE TRIGGER CALC_SETOR_TRABALHO_BD_LOG FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CALC_SETOR_TRABALHO (IDCALC_SETOR_TRABALHO,'
||' ID_INTERNO,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' QTDEDIASTRABALHADO,'
||' DIANAOREMIDO,'
||' QTDEDIASREMIDO,'
||' DIASTRABALHADOEXTENSO,'
||' DIASREMIDOEXTENSO,'
||' TOTALDIASTRABALHO,'
||' TOTALDIASREMIDO,'
||' ID_SETOR_TRABALHO) VALUES ('
||COALESCE(OLD.IDCALC_SETOR_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||OLD.DATA_FINAL||'''','NULL')||','
||COALESCE(OLD.QTDEDIASTRABALHADO,'NULL')||','
||COALESCE(OLD.DIANAOREMIDO,'NULL')||','
||COALESCE(OLD.QTDEDIASREMIDO,'NULL')||','
||COALESCE(''''||OLD.DIASTRABALHADOEXTENSO||'''','NULL')||','
||COALESCE(''''||OLD.DIASREMIDOEXTENSO||'''','NULL')||','
||COALESCE(OLD.TOTALDIASTRABALHO,'NULL')||','
||COALESCE(OLD.TOTALDIASREMIDO,'NULL')||','
||COALESCE(OLD.ID_SETOR_TRABALHO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CALC_SETOR_TRABALHO', OLD.IDCALC_SETOR_TRABALHO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CALC_SETOR_TRABALHO_BI0 */
CREATE TRIGGER CALC_SETOR_TRABALHO_BI0 FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.idcalc_setor_trabalho IS null or (new.idcalc_setor_trabalho = 0)  ) then
    new.idcalc_setor_trabalho = gen_id (cod_up, 0) || gen_id (id_calc_setor_trabalho, 1);
end
^

/* Trigger: CALC_SETOR_TRABALHO_BI_LOG */
CREATE TRIGGER CALC_SETOR_TRABALHO_BI_LOG FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CALC_SETOR_TRABALHO (IDCALC_SETOR_TRABALHO,'
||' ID_INTERNO,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' QTDEDIASTRABALHADO,'
||' DIANAOREMIDO,'
||' QTDEDIASREMIDO,'
||' DIASTRABALHADOEXTENSO,'
||' DIASREMIDOEXTENSO,'
||' TOTALDIASTRABALHO,'
||' TOTALDIASREMIDO,'
||' ID_SETOR_TRABALHO) VALUES ('
||COALESCE(NEW.IDCALC_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||','
||COALESCE(NEW.QTDEDIASTRABALHADO,'NULL')||','
||COALESCE(NEW.DIANAOREMIDO,'NULL')||','
||COALESCE(NEW.QTDEDIASREMIDO,'NULL')||','
||COALESCE(''''||NEW.DIASTRABALHADOEXTENSO||'''','NULL')||','
||COALESCE(''''||NEW.DIASREMIDOEXTENSO||'''','NULL')||','
||COALESCE(NEW.TOTALDIASTRABALHO,'NULL')||','
||COALESCE(NEW.TOTALDIASREMIDO,'NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CALC_SETOR_TRABALHO', NEW.IDCALC_SETOR_TRABALHO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CALC_SETOR_TRABALHO_BU_LOG */
CREATE TRIGGER CALC_SETOR_TRABALHO_BU_LOG FOR CALC_SETOR_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_INICIAL,'')<>COALESCE(OLD.DATA_INICIAL,'')) THEN TXT=TXT||',DATA_INICIAL = '||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (COALESCE(NEW.QTDEDIASTRABALHADO,'')<>COALESCE(OLD.QTDEDIASTRABALHADO,'')) THEN TXT=TXT||',QTDEDIASTRABALHADO = '||COALESCE(NEW.QTDEDIASTRABALHADO,'NULL');
IF (COALESCE(NEW.DIANAOREMIDO,'')<>COALESCE(OLD.DIANAOREMIDO,'')) THEN TXT=TXT||',DIANAOREMIDO = '||COALESCE(NEW.DIANAOREMIDO,'NULL');
IF (COALESCE(NEW.QTDEDIASREMIDO,'')<>COALESCE(OLD.QTDEDIASREMIDO,'')) THEN TXT=TXT||',QTDEDIASREMIDO = '||COALESCE(NEW.QTDEDIASREMIDO,'NULL');
IF (COALESCE(NEW.DIASTRABALHADOEXTENSO,'')<>COALESCE(OLD.DIASTRABALHADOEXTENSO,'')) THEN TXT=TXT||',DIASTRABALHADOEXTENSO = '||COALESCE(''''||NEW.DIASTRABALHADOEXTENSO||'''','NULL');
IF (COALESCE(NEW.DIASREMIDOEXTENSO,'')<>COALESCE(OLD.DIASREMIDOEXTENSO,'')) THEN TXT=TXT||',DIASREMIDOEXTENSO = '||COALESCE(''''||NEW.DIASREMIDOEXTENSO||'''','NULL');
IF (COALESCE(NEW.TOTALDIASTRABALHO,'')<>COALESCE(OLD.TOTALDIASTRABALHO,'')) THEN TXT=TXT||',TOTALDIASTRABALHO = '||COALESCE(NEW.TOTALDIASTRABALHO,'NULL');
IF (COALESCE(NEW.TOTALDIASREMIDO,'')<>COALESCE(OLD.TOTALDIASREMIDO,'')) THEN TXT=TXT||',TOTALDIASREMIDO = '||COALESCE(NEW.TOTALDIASREMIDO,'NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CALC_SETOR_TRABALHO SET IDCALC_SETOR_TRABALHO = '''||NEW.IDCALC_SETOR_TRABALHO||''''||TXT||' WHERE IDCALC_SETOR_TRABALHO = '''||NEW.IDCALC_SETOR_TRABALHO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CALC_SETOR_TRABALHO', NEW.IDCALC_SETOR_TRABALHO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CALC_TRABALHO_ITENS_AD_SINCRONI */
CREATE TRIGGER CALC_TRABALHO_ITENS_AD_SINCRONI FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CALC_TRABALHO_ITENS WHERE ID_CALC_TRABALHO_ITENS = '||OLD.ID_CALC_TRABALHO_ITENS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CALC_TRABALHO_ITENS_AI_SINCRONI */
CREATE TRIGGER CALC_TRABALHO_ITENS_AI_SINCRONI FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CALC_TRABALHO_ITENS (ID_CALC_TRABALHO_ITENS,'
||' ID_CALC_TRABALHO,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' ID_SETOR_TRABALHO,'
||' DIASTRABALHADO,'
||' DIASREMIDO) VALUES ('
||COALESCE(NEW.ID_CALC_TRABALHO_ITENS,'NULL')||','
||COALESCE(NEW.ID_CALC_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.DIASTRABALHADO,'NULL')||','
||COALESCE(NEW.DIASREMIDO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CALC_TRABALHO_ITENS_AU_SINCRONI */
CREATE TRIGGER CALC_TRABALHO_ITENS_AU_SINCRONI FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_CALC_TRABALHO,'')<>COALESCE(OLD.ID_CALC_TRABALHO,'')) THEN TXT=TXT||',ID_CALC_TRABALHO = '||COALESCE(NEW.ID_CALC_TRABALHO,'NULL');
IF (COALESCE(NEW.DATA_INICIAL,'')<>COALESCE(OLD.DATA_INICIAL,'')) THEN TXT=TXT||',DATA_INICIAL = '||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.DIASTRABALHADO,'')<>COALESCE(OLD.DIASTRABALHADO,'')) THEN TXT=TXT||',DIASTRABALHADO = '||COALESCE(NEW.DIASTRABALHADO,'NULL');
IF (COALESCE(NEW.DIASREMIDO,'')<>COALESCE(OLD.DIASREMIDO,'')) THEN TXT=TXT||',DIASREMIDO = '||COALESCE(NEW.DIASREMIDO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CALC_TRABALHO_ITENS SET ID_CALC_TRABALHO_ITENS = '''||NEW.ID_CALC_TRABALHO_ITENS||''''||TXT||' WHERE ID_CALC_TRABALHO_ITENS = '''||NEW.ID_CALC_TRABALHO_ITENS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CALC_TRABALHO_ITENS_BD_LOG */
CREATE TRIGGER CALC_TRABALHO_ITENS_BD_LOG FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CALC_TRABALHO_ITENS (ID_CALC_TRABALHO_ITENS,'
||' ID_CALC_TRABALHO,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' ID_SETOR_TRABALHO,'
||' DIASTRABALHADO,'
||' DIASREMIDO) VALUES ('
||COALESCE(OLD.ID_CALC_TRABALHO_ITENS,'NULL')||','
||COALESCE(OLD.ID_CALC_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||OLD.DATA_FINAL||'''','NULL')||','
||COALESCE(OLD.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(OLD.DIASTRABALHADO,'NULL')||','
||COALESCE(OLD.DIASREMIDO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CALC_TRABALHO_ITENS', OLD.ID_CALC_TRABALHO_ITENS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CALC_TRABALHO_ITENS_BI0 */
CREATE TRIGGER CALC_TRABALHO_ITENS_BI0 FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_calc_trabalho_itens IS null or (new.id_calc_trabalho_itens  = 0)  ) then
    new.id_calc_trabalho_itens  = gen_id (cod_up, 0) || gen_id (idcalc_trabalho_itens, 1);
end
^

/* Trigger: CALC_TRABALHO_ITENS_BI_LOG */
CREATE TRIGGER CALC_TRABALHO_ITENS_BI_LOG FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CALC_TRABALHO_ITENS (ID_CALC_TRABALHO_ITENS,'
||' ID_CALC_TRABALHO,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' ID_SETOR_TRABALHO,'
||' DIASTRABALHADO,'
||' DIASREMIDO) VALUES ('
||COALESCE(NEW.ID_CALC_TRABALHO_ITENS,'NULL')||','
||COALESCE(NEW.ID_CALC_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.DIASTRABALHADO,'NULL')||','
||COALESCE(NEW.DIASREMIDO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CALC_TRABALHO_ITENS', NEW.ID_CALC_TRABALHO_ITENS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CALC_TRABALHO_ITENS_BU_LOG */
CREATE TRIGGER CALC_TRABALHO_ITENS_BU_LOG FOR CALC_TRABALHO_ITENS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_CALC_TRABALHO,'')<>COALESCE(OLD.ID_CALC_TRABALHO,'')) THEN TXT=TXT||',ID_CALC_TRABALHO = '||COALESCE(NEW.ID_CALC_TRABALHO,'NULL');
IF (COALESCE(NEW.DATA_INICIAL,'')<>COALESCE(OLD.DATA_INICIAL,'')) THEN TXT=TXT||',DATA_INICIAL = '||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.DIASTRABALHADO,'')<>COALESCE(OLD.DIASTRABALHADO,'')) THEN TXT=TXT||',DIASTRABALHADO = '||COALESCE(NEW.DIASTRABALHADO,'NULL');
IF (COALESCE(NEW.DIASREMIDO,'')<>COALESCE(OLD.DIASREMIDO,'')) THEN TXT=TXT||',DIASREMIDO = '||COALESCE(NEW.DIASREMIDO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CALC_TRABALHO_ITENS SET ID_CALC_TRABALHO_ITENS = '''||NEW.ID_CALC_TRABALHO_ITENS||''''||TXT||' WHERE ID_CALC_TRABALHO_ITENS = '''||NEW.ID_CALC_TRABALHO_ITENS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CALC_TRABALHO_ITENS', NEW.ID_CALC_TRABALHO_ITENS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CELA_AD_SINCRONISMO */
CREATE TRIGGER CELA_AD_SINCRONISMO FOR CELA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CELA WHERE ID_CELA = '||OLD.ID_CELA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CELA_AI_SINCRONISMO */
CREATE TRIGGER CELA_AI_SINCRONISMO FOR CELA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CELA (ID_CELA,'
||' CELA,'
||' IDSOLARIO,'
||' IDPAVILHAO,'
||' IDGALERIA,'
||' ISOLAMENTO,'
||' LIMITE_POR_CELA,'
||' EM_MANUTENCAO,'
||' MOTIVO_MANUTENCAO) VALUES ('
||COALESCE(NEW.ID_CELA,'NULL')||','
||COALESCE(''''||NEW.CELA||'''','NULL')||','
||COALESCE(NEW.IDSOLARIO,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(''''||NEW.ISOLAMENTO||'''','NULL')||','
||COALESCE(NEW.LIMITE_POR_CELA,'NULL')||','
||COALESCE(''''||NEW.EM_MANUTENCAO||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_MANUTENCAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CELA_AU_SINCRONISMO */
CREATE TRIGGER CELA_AU_SINCRONISMO FOR CELA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.CELA,'')<>COALESCE(OLD.CELA,'')) THEN TXT=TXT||',CELA = '||COALESCE(''''||NEW.CELA||'''','NULL');
IF (COALESCE(NEW.IDSOLARIO,'')<>COALESCE(OLD.IDSOLARIO,'')) THEN TXT=TXT||',IDSOLARIO = '||COALESCE(NEW.IDSOLARIO,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.ISOLAMENTO,'')<>COALESCE(OLD.ISOLAMENTO,'')) THEN TXT=TXT||',ISOLAMENTO = '||COALESCE(''''||NEW.ISOLAMENTO||'''','NULL');
IF (COALESCE(NEW.LIMITE_POR_CELA,'')<>COALESCE(OLD.LIMITE_POR_CELA,'')) THEN TXT=TXT||',LIMITE_POR_CELA = '||COALESCE(NEW.LIMITE_POR_CELA,'NULL');
IF (COALESCE(NEW.EM_MANUTENCAO,'')<>COALESCE(OLD.EM_MANUTENCAO,'')) THEN TXT=TXT||',EM_MANUTENCAO = '||COALESCE(''''||NEW.EM_MANUTENCAO||'''','NULL');
IF (COALESCE(NEW.MOTIVO_MANUTENCAO,'')<>COALESCE(OLD.MOTIVO_MANUTENCAO,'')) THEN TXT=TXT||',MOTIVO_MANUTENCAO = '||COALESCE(''''||NEW.MOTIVO_MANUTENCAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CELA SET ID_CELA = '''||NEW.ID_CELA||''''||TXT||' WHERE ID_CELA = '''||NEW.ID_CELA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CELA_BD_LOG */
CREATE TRIGGER CELA_BD_LOG FOR CELA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CELA (ID_CELA,'
||' CELA,'
||' IDSOLARIO,'
||' IDPAVILHAO,'
||' IDGALERIA,'
||' ISOLAMENTO,'
||' LIMITE_POR_CELA,'
||' EM_MANUTENCAO,'
||' MOTIVO_MANUTENCAO) VALUES ('
||COALESCE(OLD.ID_CELA,'NULL')||','
||COALESCE(''''||OLD.CELA||'''','NULL')||','
||COALESCE(OLD.IDSOLARIO,'NULL')||','
||COALESCE(OLD.IDPAVILHAO,'NULL')||','
||COALESCE(OLD.IDGALERIA,'NULL')||','
||COALESCE(''''||OLD.ISOLAMENTO||'''','NULL')||','
||COALESCE(OLD.LIMITE_POR_CELA,'NULL')||','
||COALESCE(''''||OLD.EM_MANUTENCAO||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVO_MANUTENCAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CELA', OLD.ID_CELA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CELA_BI0 */
CREATE TRIGGER CELA_BI0 FOR CELA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_cela IS null or (new.id_cela = 0)  ) then
    new.id_cela = gen_id (cod_up, 0) || gen_id (id_cela, 1);
end
^

/* Trigger: CELA_BIU0 */
CREATE TRIGGER CELA_BIU0 FOR CELA
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
declare variable tem_galeria integer;
declare variable tem_solario integer;
begin
 EXIT;
  tem_galeria = 0 ;
  tem_solario = 0 ;

  select count(*)
  from galeria g
  where g.id_galeria = new.idgaleria
  and g.idpavilhao = new.idpavilhao
  into :tem_galeria;

  if (not (tem_galeria>0)) then
  begin
    exception messagem_diversas 'Galeria nao pertence a este pavilhao!';
  end

  select count(*)
  from solario s
  where s.id_solario = new.idsolario
  and s.idgaleria = new.idgaleria
  into :tem_solario;

  if (not (tem_solario>0)) then
  begin
    exception messagem_diversas 'Solario nao pertence a esta galeria!';
  end




end
^

/* Trigger: CELA_BI_LOG */
CREATE TRIGGER CELA_BI_LOG FOR CELA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CELA (ID_CELA,'
||' CELA,'
||' IDSOLARIO,'
||' IDPAVILHAO,'
||' IDGALERIA,'
||' ISOLAMENTO,'
||' LIMITE_POR_CELA,'
||' EM_MANUTENCAO,'
||' MOTIVO_MANUTENCAO) VALUES ('
||COALESCE(NEW.ID_CELA,'NULL')||','
||COALESCE(''''||NEW.CELA||'''','NULL')||','
||COALESCE(NEW.IDSOLARIO,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(''''||NEW.ISOLAMENTO||'''','NULL')||','
||COALESCE(NEW.LIMITE_POR_CELA,'NULL')||','
||COALESCE(''''||NEW.EM_MANUTENCAO||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_MANUTENCAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CELA', NEW.ID_CELA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CELA_BU_LOG */
CREATE TRIGGER CELA_BU_LOG FOR CELA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.CELA,'')<>COALESCE(OLD.CELA,'')) THEN TXT=TXT||',CELA = '||COALESCE(''''||NEW.CELA||'''','NULL');
IF (COALESCE(NEW.IDSOLARIO,'')<>COALESCE(OLD.IDSOLARIO,'')) THEN TXT=TXT||',IDSOLARIO = '||COALESCE(NEW.IDSOLARIO,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.ISOLAMENTO,'')<>COALESCE(OLD.ISOLAMENTO,'')) THEN TXT=TXT||',ISOLAMENTO = '||COALESCE(''''||NEW.ISOLAMENTO||'''','NULL');
IF (COALESCE(NEW.LIMITE_POR_CELA,'')<>COALESCE(OLD.LIMITE_POR_CELA,'')) THEN TXT=TXT||',LIMITE_POR_CELA = '||COALESCE(NEW.LIMITE_POR_CELA,'NULL');
IF (COALESCE(NEW.EM_MANUTENCAO,'')<>COALESCE(OLD.EM_MANUTENCAO,'')) THEN TXT=TXT||',EM_MANUTENCAO = '||COALESCE(''''||NEW.EM_MANUTENCAO||'''','NULL');
IF (COALESCE(NEW.MOTIVO_MANUTENCAO,'')<>COALESCE(OLD.MOTIVO_MANUTENCAO,'')) THEN TXT=TXT||',MOTIVO_MANUTENCAO = '||COALESCE(''''||NEW.MOTIVO_MANUTENCAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CELA SET ID_CELA = '''||NEW.ID_CELA||''''||TXT||' WHERE ID_CELA = '''||NEW.ID_CELA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CELA', NEW.ID_CELA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CIDADE_AD_SINCRONISMO */
CREATE TRIGGER CIDADE_AD_SINCRONISMO FOR CIDADE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CIDADE WHERE ID_CIDADE = '||OLD.ID_CIDADE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CIDADE_AI_SINCRONISMO */
CREATE TRIGGER CIDADE_AI_SINCRONISMO FOR CIDADE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CIDADE (ID_CIDADE,'
||' CIDADE,'
||' UF,'
||' ID_ESTADO,'
||' ID_NACIONALIDADE) VALUES ('
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.CIDADE||'''','NULL')||','
||COALESCE(''''||NEW.UF||'''','NULL')||','
||COALESCE(NEW.ID_ESTADO,'NULL')||','
||COALESCE(NEW.ID_NACIONALIDADE,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CIDADE_AU_SINCRONISMO */
CREATE TRIGGER CIDADE_AU_SINCRONISMO FOR CIDADE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.CIDADE,'')<>COALESCE(OLD.CIDADE,'')) THEN TXT=TXT||',CIDADE = '||COALESCE(''''||NEW.CIDADE||'''','NULL');
IF (COALESCE(NEW.UF,'')<>COALESCE(OLD.UF,'')) THEN TXT=TXT||',UF = '||COALESCE(''''||NEW.UF||'''','NULL');
IF (COALESCE(NEW.ID_ESTADO,'')<>COALESCE(OLD.ID_ESTADO,'')) THEN TXT=TXT||',ID_ESTADO = '||COALESCE(NEW.ID_ESTADO,'NULL');
IF (COALESCE(NEW.ID_NACIONALIDADE,'')<>COALESCE(OLD.ID_NACIONALIDADE,'')) THEN TXT=TXT||',ID_NACIONALIDADE = '||COALESCE(NEW.ID_NACIONALIDADE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CIDADE SET ID_CIDADE = '''||NEW.ID_CIDADE||''''||TXT||' WHERE ID_CIDADE = '''||NEW.ID_CIDADE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CIDADE_BD_LOG */
CREATE TRIGGER CIDADE_BD_LOG FOR CIDADE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CIDADE (ID_CIDADE,'
||' CIDADE,'
||' UF,'
||' ID_ESTADO,'
||' ID_NACIONALIDADE) VALUES ('
||COALESCE(OLD.ID_CIDADE,'NULL')||','
||COALESCE(''''||OLD.CIDADE||'''','NULL')||','
||COALESCE(''''||OLD.UF||'''','NULL')||','
||COALESCE(OLD.ID_ESTADO,'NULL')||','
||COALESCE(OLD.ID_NACIONALIDADE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CIDADE', OLD.ID_CIDADE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CIDADE_BI0 */
CREATE TRIGGER CIDADE_BI0 FOR CIDADE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_cidade IS null or (new.id_cidade = 0)  ) then
    new.id_cidade = gen_id (cod_up, 0) || gen_id (id_cidade, 1);

end
^

/* Trigger: CIDADE_BI_LOG */
CREATE TRIGGER CIDADE_BI_LOG FOR CIDADE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CIDADE (ID_CIDADE,'
||' CIDADE,'
||' UF,'
||' ID_ESTADO,'
||' ID_NACIONALIDADE) VALUES ('
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.CIDADE||'''','NULL')||','
||COALESCE(''''||NEW.UF||'''','NULL')||','
||COALESCE(NEW.ID_ESTADO,'NULL')||','
||COALESCE(NEW.ID_NACIONALIDADE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CIDADE', NEW.ID_CIDADE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CIDADE_BU_LOG */
CREATE TRIGGER CIDADE_BU_LOG FOR CIDADE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.CIDADE,'')<>COALESCE(OLD.CIDADE,'')) THEN TXT=TXT||',CIDADE = '||COALESCE(''''||NEW.CIDADE||'''','NULL');
IF (COALESCE(NEW.UF,'')<>COALESCE(OLD.UF,'')) THEN TXT=TXT||',UF = '||COALESCE(''''||NEW.UF||'''','NULL');
IF (COALESCE(NEW.ID_ESTADO,'')<>COALESCE(OLD.ID_ESTADO,'')) THEN TXT=TXT||',ID_ESTADO = '||COALESCE(NEW.ID_ESTADO,'NULL');
IF (COALESCE(NEW.ID_NACIONALIDADE,'')<>COALESCE(OLD.ID_NACIONALIDADE,'')) THEN TXT=TXT||',ID_NACIONALIDADE = '||COALESCE(NEW.ID_NACIONALIDADE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CIDADE SET ID_CIDADE = '''||NEW.ID_CIDADE||''''||TXT||' WHERE ID_CIDADE = '''||NEW.ID_CIDADE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CIDADE', NEW.ID_CIDADE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CODIGO_PENAL_AD_SINCRONISMO */
CREATE TRIGGER CODIGO_PENAL_AD_SINCRONISMO FOR CODIGO_PENAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CODIGO_PENAL WHERE IDCODIGO_PENAL = '||OLD.IDCODIGO_PENAL||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CODIGO_PENAL_AI_SINCRONISMO */
CREATE TRIGGER CODIGO_PENAL_AI_SINCRONISMO FOR CODIGO_PENAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CODIGO_PENAL (IDCODIGO_PENAL,'
||' ARTIGO,'
||' DESCRICAO_ARTIGO) VALUES ('
||COALESCE(NEW.IDCODIGO_PENAL,'NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO_ARTIGO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CODIGO_PENAL_AU_SINCRONISMO */
CREATE TRIGGER CODIGO_PENAL_AU_SINCRONISMO FOR CODIGO_PENAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (COALESCE(NEW.DESCRICAO_ARTIGO,'')<>COALESCE(OLD.DESCRICAO_ARTIGO,'')) THEN TXT=TXT||',DESCRICAO_ARTIGO = '||COALESCE(''''||NEW.DESCRICAO_ARTIGO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CODIGO_PENAL SET IDCODIGO_PENAL = '''||NEW.IDCODIGO_PENAL||''''||TXT||' WHERE IDCODIGO_PENAL = '''||NEW.IDCODIGO_PENAL||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CODIGO_PENAL_BD_LOG */
CREATE TRIGGER CODIGO_PENAL_BD_LOG FOR CODIGO_PENAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CODIGO_PENAL (IDCODIGO_PENAL,'
||' ARTIGO,'
||' DESCRICAO_ARTIGO) VALUES ('
||COALESCE(OLD.IDCODIGO_PENAL,'NULL')||','
||COALESCE(''''||OLD.ARTIGO||'''','NULL')||','
||COALESCE(''''||OLD.DESCRICAO_ARTIGO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CODIGO_PENAL', OLD.IDCODIGO_PENAL,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CODIGO_PENAL_BI0 */
CREATE TRIGGER CODIGO_PENAL_BI0 FOR CODIGO_PENAL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.idcodigo_penal = 0 or (NEW.idcodigo_penal IS NULL) ) then
   NEW.idcodigo_penal = gen_id (cod_up, 0) ||gen_id(IDCODIGO_PENAL,1);
end
^

/* Trigger: CODIGO_PENAL_BI_LOG */
CREATE TRIGGER CODIGO_PENAL_BI_LOG FOR CODIGO_PENAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CODIGO_PENAL (IDCODIGO_PENAL,'
||' ARTIGO,'
||' DESCRICAO_ARTIGO) VALUES ('
||COALESCE(NEW.IDCODIGO_PENAL,'NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO_ARTIGO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CODIGO_PENAL', NEW.IDCODIGO_PENAL,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CODIGO_PENAL_BU_LOG */
CREATE TRIGGER CODIGO_PENAL_BU_LOG FOR CODIGO_PENAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (COALESCE(NEW.DESCRICAO_ARTIGO,'')<>COALESCE(OLD.DESCRICAO_ARTIGO,'')) THEN TXT=TXT||',DESCRICAO_ARTIGO = '||COALESCE(''''||NEW.DESCRICAO_ARTIGO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CODIGO_PENAL SET IDCODIGO_PENAL = '''||NEW.IDCODIGO_PENAL||''''||TXT||' WHERE IDCODIGO_PENAL = '''||NEW.IDCODIGO_PENAL||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CODIGO_PENAL', NEW.IDCODIGO_PENAL,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CONDENACAO_INTERNO_AD_SINCRONIS */
CREATE TRIGGER CONDENACAO_INTERNO_AD_SINCRONIS FOR CONDENACAO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CONDENACAO_INTERNO WHERE IDCONDENACAO_INTERNO = '||OLD.IDCONDENACAO_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CONDENACAO_INTERNO_AI_SINCRONIS */
CREATE TRIGGER CONDENACAO_INTERNO_AI_SINCRONIS FOR CONDENACAO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CONDENACAO_INTERNO (IDCONDENACAO_INTERNO,'
||' IDINTERNO,'
||' ARTIGO,'
||' OBSERVACAO,'
||' TOTAL_PENA_ANO,'
||' TOTAL_PENA_MES,'
||' TOTAL_PENA_DIA,'
||' IDCOMARCA,'
||' VARA,'
||' PRISAO,'
||' REU,'
||' NPROCESSO,'
||' GR,'
||' SITUACAOJURIDICA,'
||' TIPOJUSTICA) VALUES ('
||COALESCE(NEW.IDCONDENACAO_INTERNO,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.TOTAL_PENA_ANO,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_MES,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_DIA,'NULL')||','
||COALESCE(NEW.IDCOMARCA,'NULL')||','
||COALESCE(''''||NEW.VARA||'''','NULL')||','
||COALESCE(''''||NEW.PRISAO||'''','NULL')||','
||COALESCE(''''||NEW.REU||'''','NULL')||','
||COALESCE(''''||NEW.NPROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.GR||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL')||','
||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CONDENACAO_INTERNO_AU_SINCRONIS */
CREATE TRIGGER CONDENACAO_INTERNO_AU_SINCRONIS FOR CONDENACAO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.TOTAL_PENA_ANO,'')<>COALESCE(OLD.TOTAL_PENA_ANO,'')) THEN TXT=TXT||',TOTAL_PENA_ANO = '||COALESCE(NEW.TOTAL_PENA_ANO,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_MES,'')<>COALESCE(OLD.TOTAL_PENA_MES,'')) THEN TXT=TXT||',TOTAL_PENA_MES = '||COALESCE(NEW.TOTAL_PENA_MES,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_DIA,'')<>COALESCE(OLD.TOTAL_PENA_DIA,'')) THEN TXT=TXT||',TOTAL_PENA_DIA = '||COALESCE(NEW.TOTAL_PENA_DIA,'NULL');
IF (COALESCE(NEW.IDCOMARCA,'')<>COALESCE(OLD.IDCOMARCA,'')) THEN TXT=TXT||',IDCOMARCA = '||COALESCE(NEW.IDCOMARCA,'NULL');
IF (COALESCE(NEW.VARA,'')<>COALESCE(OLD.VARA,'')) THEN TXT=TXT||',VARA = '||COALESCE(''''||NEW.VARA||'''','NULL');
IF (COALESCE(NEW.PRISAO,'')<>COALESCE(OLD.PRISAO,'')) THEN TXT=TXT||',PRISAO = '||COALESCE(''''||NEW.PRISAO||'''','NULL');
IF (COALESCE(NEW.REU,'')<>COALESCE(OLD.REU,'')) THEN TXT=TXT||',REU = '||COALESCE(''''||NEW.REU||'''','NULL');
IF (COALESCE(NEW.NPROCESSO,'')<>COALESCE(OLD.NPROCESSO,'')) THEN TXT=TXT||',NPROCESSO = '||COALESCE(''''||NEW.NPROCESSO||'''','NULL');
IF (COALESCE(NEW.GR,'')<>COALESCE(OLD.GR,'')) THEN TXT=TXT||',GR = '||COALESCE(''''||NEW.GR||'''','NULL');
IF (COALESCE(NEW.SITUACAOJURIDICA,'')<>COALESCE(OLD.SITUACAOJURIDICA,'')) THEN TXT=TXT||',SITUACAOJURIDICA = '||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL');
IF (COALESCE(NEW.TIPOJUSTICA,'')<>COALESCE(OLD.TIPOJUSTICA,'')) THEN TXT=TXT||',TIPOJUSTICA = '||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONDENACAO_INTERNO SET IDCONDENACAO_INTERNO = '''||NEW.IDCONDENACAO_INTERNO||''''||TXT||' WHERE IDCONDENACAO_INTERNO = '''||NEW.IDCONDENACAO_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CONDENACAO_INTERNO_BD_LOG */
CREATE TRIGGER CONDENACAO_INTERNO_BD_LOG FOR CONDENACAO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONDENACAO_INTERNO (IDCONDENACAO_INTERNO,'
||' IDINTERNO,'
||' ARTIGO,'
||' OBSERVACAO,'
||' TOTAL_PENA_ANO,'
||' TOTAL_PENA_MES,'
||' TOTAL_PENA_DIA,'
||' IDCOMARCA,'
||' VARA,'
||' PRISAO,'
||' REU,'
||' NPROCESSO,'
||' GR,'
||' SITUACAOJURIDICA,'
||' TIPOJUSTICA) VALUES ('
||COALESCE(OLD.IDCONDENACAO_INTERNO,'NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||','
||COALESCE(''''||OLD.ARTIGO||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(OLD.TOTAL_PENA_ANO,'NULL')||','
||COALESCE(OLD.TOTAL_PENA_MES,'NULL')||','
||COALESCE(OLD.TOTAL_PENA_DIA,'NULL')||','
||COALESCE(OLD.IDCOMARCA,'NULL')||','
||COALESCE(''''||OLD.VARA||'''','NULL')||','
||COALESCE(''''||OLD.PRISAO||'''','NULL')||','
||COALESCE(''''||OLD.REU||'''','NULL')||','
||COALESCE(''''||OLD.NPROCESSO||'''','NULL')||','
||COALESCE(''''||OLD.GR||'''','NULL')||','
||COALESCE(''''||OLD.SITUACAOJURIDICA||'''','NULL')||','
||COALESCE(''''||OLD.TIPOJUSTICA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONDENACAO_INTERNO', OLD.IDCONDENACAO_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONDENACAO_INTERNO_BI0 */
CREATE TRIGGER CONDENACAO_INTERNO_BI0 FOR CONDENACAO_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idcondenacao_interno,0)=0) then
  NEW.IDCONDENACAO_INTERNO = GEN_ID(COD_UP,0)||GEN_ID(IDCONDENACAO_INTERNO,1);
end
^

/* Trigger: CONDENACAO_INTERNO_BI_LOG */
CREATE TRIGGER CONDENACAO_INTERNO_BI_LOG FOR CONDENACAO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONDENACAO_INTERNO (IDCONDENACAO_INTERNO,'
||' IDINTERNO,'
||' ARTIGO,'
||' OBSERVACAO,'
||' TOTAL_PENA_ANO,'
||' TOTAL_PENA_MES,'
||' TOTAL_PENA_DIA,'
||' IDCOMARCA,'
||' VARA,'
||' PRISAO,'
||' REU,'
||' NPROCESSO,'
||' GR,'
||' SITUACAOJURIDICA,'
||' TIPOJUSTICA) VALUES ('
||COALESCE(NEW.IDCONDENACAO_INTERNO,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.TOTAL_PENA_ANO,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_MES,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_DIA,'NULL')||','
||COALESCE(NEW.IDCOMARCA,'NULL')||','
||COALESCE(''''||NEW.VARA||'''','NULL')||','
||COALESCE(''''||NEW.PRISAO||'''','NULL')||','
||COALESCE(''''||NEW.REU||'''','NULL')||','
||COALESCE(''''||NEW.NPROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.GR||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL')||','
||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONDENACAO_INTERNO', NEW.IDCONDENACAO_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONDENACAO_INTERNO_BU_LOG */
CREATE TRIGGER CONDENACAO_INTERNO_BU_LOG FOR CONDENACAO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.TOTAL_PENA_ANO,'')<>COALESCE(OLD.TOTAL_PENA_ANO,'')) THEN TXT=TXT||',TOTAL_PENA_ANO = '||COALESCE(NEW.TOTAL_PENA_ANO,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_MES,'')<>COALESCE(OLD.TOTAL_PENA_MES,'')) THEN TXT=TXT||',TOTAL_PENA_MES = '||COALESCE(NEW.TOTAL_PENA_MES,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_DIA,'')<>COALESCE(OLD.TOTAL_PENA_DIA,'')) THEN TXT=TXT||',TOTAL_PENA_DIA = '||COALESCE(NEW.TOTAL_PENA_DIA,'NULL');
IF (COALESCE(NEW.IDCOMARCA,'')<>COALESCE(OLD.IDCOMARCA,'')) THEN TXT=TXT||',IDCOMARCA = '||COALESCE(NEW.IDCOMARCA,'NULL');
IF (COALESCE(NEW.VARA,'')<>COALESCE(OLD.VARA,'')) THEN TXT=TXT||',VARA = '||COALESCE(''''||NEW.VARA||'''','NULL');
IF (COALESCE(NEW.PRISAO,'')<>COALESCE(OLD.PRISAO,'')) THEN TXT=TXT||',PRISAO = '||COALESCE(''''||NEW.PRISAO||'''','NULL');
IF (COALESCE(NEW.REU,'')<>COALESCE(OLD.REU,'')) THEN TXT=TXT||',REU = '||COALESCE(''''||NEW.REU||'''','NULL');
IF (COALESCE(NEW.NPROCESSO,'')<>COALESCE(OLD.NPROCESSO,'')) THEN TXT=TXT||',NPROCESSO = '||COALESCE(''''||NEW.NPROCESSO||'''','NULL');
IF (COALESCE(NEW.GR,'')<>COALESCE(OLD.GR,'')) THEN TXT=TXT||',GR = '||COALESCE(''''||NEW.GR||'''','NULL');
IF (COALESCE(NEW.SITUACAOJURIDICA,'')<>COALESCE(OLD.SITUACAOJURIDICA,'')) THEN TXT=TXT||',SITUACAOJURIDICA = '||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL');
IF (COALESCE(NEW.TIPOJUSTICA,'')<>COALESCE(OLD.TIPOJUSTICA,'')) THEN TXT=TXT||',TIPOJUSTICA = '||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONDENACAO_INTERNO SET IDCONDENACAO_INTERNO = '''||NEW.IDCONDENACAO_INTERNO||''''||TXT||' WHERE IDCONDENACAO_INTERNO = '''||NEW.IDCONDENACAO_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONDENACAO_INTERNO', NEW.IDCONDENACAO_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CONDICAO_INTERNO_AD_SINCRONISMO */
CREATE TRIGGER CONDICAO_INTERNO_AD_SINCRONISMO FOR CONDICAO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CONDICAO_INTERNO WHERE IDCONDICAO_INTERNO = '||OLD.IDCONDICAO_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CONDICAO_INTERNO_AI_SINCRONISMO */
CREATE TRIGGER CONDICAO_INTERNO_AI_SINCRONISMO FOR CONDICAO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CONDICAO_INTERNO (IDCONDICAO_INTERNO,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDCONDICAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CONDICAO_INTERNO_AU_SINCRONISMO */
CREATE TRIGGER CONDICAO_INTERNO_AU_SINCRONISMO FOR CONDICAO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONDICAO_INTERNO SET IDCONDICAO_INTERNO = '''||NEW.IDCONDICAO_INTERNO||''''||TXT||' WHERE IDCONDICAO_INTERNO = '''||NEW.IDCONDICAO_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CONDICAO_INTERNO_BD_LOG */
CREATE TRIGGER CONDICAO_INTERNO_BD_LOG FOR CONDICAO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONDICAO_INTERNO (IDCONDICAO_INTERNO,'
||' DESCRICAO) VALUES ('
||COALESCE(OLD.IDCONDICAO_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONDICAO_INTERNO', OLD.IDCONDICAO_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONDICAO_INTERNO_BI0 */
CREATE TRIGGER CONDICAO_INTERNO_BI0 FOR CONDICAO_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
 if (NEW.idcondicao_interno IS NULL or (NEW.idcondicao_interno = 0) ) then
    NEW.IDCONDICAO_INTERNO = GEN_ID(cod_up,0)||GEN_ID(IDCONDICAO_INTERNO,1);
end
^

/* Trigger: CONDICAO_INTERNO_BI_LOG */
CREATE TRIGGER CONDICAO_INTERNO_BI_LOG FOR CONDICAO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONDICAO_INTERNO (IDCONDICAO_INTERNO,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDCONDICAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONDICAO_INTERNO', NEW.IDCONDICAO_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONDICAO_INTERNO_BU_LOG */
CREATE TRIGGER CONDICAO_INTERNO_BU_LOG FOR CONDICAO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONDICAO_INTERNO SET IDCONDICAO_INTERNO = '''||NEW.IDCONDICAO_INTERNO||''''||TXT||' WHERE IDCONDICAO_INTERNO = '''||NEW.IDCONDICAO_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONDICAO_INTERNO', NEW.IDCONDICAO_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CONEXAO_AD_SINCRONISMO */
CREATE TRIGGER CONEXAO_AD_SINCRONISMO FOR CONEXAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-16 11:04:17.3510
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CONEXAO WHERE IDCONEXAO = '||OLD.IDCONEXAO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CONEXAO_AI_SINCRONISMO */
CREATE TRIGGER CONEXAO_AI_SINCRONISMO FOR CONEXAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-16 11:04:17.3510

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CONEXAO (IDCONEXAO,'
||' ID_FUNCIOANRIO,'
||' DATA_HORA_ENTRADA,'
||' DATA_HORA_SAIDA,'
||' IP_MAQUINA,'
||' TELA_MOMENTO) VALUES ('
||COALESCE(NEW.IDCONEXAO,'NULL')||','
||COALESCE(NEW.ID_FUNCIOANRIO,'NULL')||','
||COALESCE(''''||NEW.DATA_HORA_ENTRADA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_HORA_SAIDA||'''','NULL')||','
||COALESCE(''''||NEW.IP_MAQUINA||'''','NULL')||','
||COALESCE(''''||NEW.TELA_MOMENTO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CONEXAO_AU_SINCRONISMO */
CREATE TRIGGER CONEXAO_AU_SINCRONISMO FOR CONEXAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-16 11:04:17.3510
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_FUNCIOANRIO,'')<>COALESCE(OLD.ID_FUNCIOANRIO,'')) THEN TXT=TXT||',ID_FUNCIOANRIO = '||COALESCE(NEW.ID_FUNCIOANRIO,'NULL');
IF (COALESCE(NEW.DATA_HORA_ENTRADA,'')<>COALESCE(OLD.DATA_HORA_ENTRADA,'')) THEN TXT=TXT||',DATA_HORA_ENTRADA = '||COALESCE(''''||NEW.DATA_HORA_ENTRADA||'''','NULL');
IF (COALESCE(NEW.DATA_HORA_SAIDA,'')<>COALESCE(OLD.DATA_HORA_SAIDA,'')) THEN TXT=TXT||',DATA_HORA_SAIDA = '||COALESCE(''''||NEW.DATA_HORA_SAIDA||'''','NULL');
IF (COALESCE(NEW.IP_MAQUINA,'')<>COALESCE(OLD.IP_MAQUINA,'')) THEN TXT=TXT||',IP_MAQUINA = '||COALESCE(''''||NEW.IP_MAQUINA||'''','NULL');
IF (COALESCE(NEW.TELA_MOMENTO,'')<>COALESCE(OLD.TELA_MOMENTO,'')) THEN TXT=TXT||',TELA_MOMENTO = '||COALESCE(''''||NEW.TELA_MOMENTO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONEXAO SET IDCONEXAO = '''||NEW.IDCONEXAO||''''||TXT||' WHERE IDCONEXAO = '''||NEW.IDCONEXAO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CONEXAO_BD_LOG */
CREATE TRIGGER CONEXAO_BD_LOG FOR CONEXAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-16 11:05:09.1450

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONEXAO (IDCONEXAO,'
||' ID_FUNCIOANRIO,'
||' DATA_HORA_ENTRADA,'
||' DATA_HORA_SAIDA,'
||' IP_MAQUINA,'
||' TELA_MOMENTO) VALUES ('
||COALESCE(OLD.IDCONEXAO,'NULL')||','
||COALESCE(OLD.ID_FUNCIOANRIO,'NULL')||','
||COALESCE(''''||OLD.DATA_HORA_ENTRADA||'''','NULL')||','
||COALESCE(''''||OLD.DATA_HORA_SAIDA||'''','NULL')||','
||COALESCE(''''||OLD.IP_MAQUINA||'''','NULL')||','
||COALESCE(''''||OLD.TELA_MOMENTO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONEXAO', OLD.IDCONEXAO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONEXAO_BI0 */
CREATE TRIGGER CONEXAO_BI0 FOR CONEXAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.IDCONEXAO,0)=0) THEN
    NEW.IDCONEXAO = GEN_ID(COD_UP,0)||GEN_ID(IDCONEXAO,1);

END
^

/* Trigger: CONEXAO_BIU0 */
CREATE TRIGGER CONEXAO_BIU0 FOR CONEXAO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (NEW.IP_MAQUINA IS NULL) THEN
    NEW.IP_MAQUINA =RDB$GET_CONTEXT('SYSTEM', 'CLIENT_ADDRESS');
END
^

/* Trigger: CONEXAO_BI_LOG */
CREATE TRIGGER CONEXAO_BI_LOG FOR CONEXAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-16 11:05:09.1450

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONEXAO (IDCONEXAO,'
||' ID_FUNCIOANRIO,'
||' DATA_HORA_ENTRADA,'
||' DATA_HORA_SAIDA,'
||' IP_MAQUINA,'
||' TELA_MOMENTO) VALUES ('
||COALESCE(NEW.IDCONEXAO,'NULL')||','
||COALESCE(NEW.ID_FUNCIOANRIO,'NULL')||','
||COALESCE(''''||NEW.DATA_HORA_ENTRADA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_HORA_SAIDA||'''','NULL')||','
||COALESCE(''''||NEW.IP_MAQUINA||'''','NULL')||','
||COALESCE(''''||NEW.TELA_MOMENTO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONEXAO', NEW.IDCONEXAO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONEXAO_BU_LOG */
CREATE TRIGGER CONEXAO_BU_LOG FOR CONEXAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-16 11:05:09.1450
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_FUNCIOANRIO,'')<>COALESCE(OLD.ID_FUNCIOANRIO,'')) THEN TXT=TXT||',ID_FUNCIOANRIO = '||COALESCE(NEW.ID_FUNCIOANRIO,'NULL');
IF (COALESCE(NEW.DATA_HORA_ENTRADA,'')<>COALESCE(OLD.DATA_HORA_ENTRADA,'')) THEN TXT=TXT||',DATA_HORA_ENTRADA = '||COALESCE(''''||NEW.DATA_HORA_ENTRADA||'''','NULL');
IF (COALESCE(NEW.DATA_HORA_SAIDA,'')<>COALESCE(OLD.DATA_HORA_SAIDA,'')) THEN TXT=TXT||',DATA_HORA_SAIDA = '||COALESCE(''''||NEW.DATA_HORA_SAIDA||'''','NULL');
IF (COALESCE(NEW.IP_MAQUINA,'')<>COALESCE(OLD.IP_MAQUINA,'')) THEN TXT=TXT||',IP_MAQUINA = '||COALESCE(''''||NEW.IP_MAQUINA||'''','NULL');
IF (COALESCE(NEW.TELA_MOMENTO,'')<>COALESCE(OLD.TELA_MOMENTO,'')) THEN TXT=TXT||',TELA_MOMENTO = '||COALESCE(''''||NEW.TELA_MOMENTO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONEXAO SET IDCONEXAO = '''||NEW.IDCONEXAO||''''||TXT||' WHERE IDCONEXAO = '''||NEW.IDCONEXAO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONEXAO', NEW.IDCONEXAO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CONTROLE_PERMANENCIA_AD_SINCRON */
CREATE TRIGGER CONTROLE_PERMANENCIA_AD_SINCRON FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CONTROLE_PERMANENCIA WHERE ID_CONTROLE_PERMANENCIA = '||OLD.ID_CONTROLE_PERMANENCIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CONTROLE_PERMANENCIA_AI_SINCRON */
CREATE TRIGGER CONTROLE_PERMANENCIA_AI_SINCRON FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CONTROLE_PERMANENCIA (ID_CONTROLE_PERMANENCIA,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' AUTORIZACAO,'
||' OBS,'
||' ID_INTERNO,'
||' DIASAUTORIZADOS,'
||' NAUTOS,'
||' AVISADO) VALUES ('
||COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'NULL')||','
||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||','
||COALESCE(''''||NEW.AUTORIZACAO||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.DIASAUTORIZADOS,'NULL')||','
||COALESCE(''''||NEW.NAUTOS||'''','NULL')||','
||COALESCE(''''||NEW.AVISADO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CONTROLE_PERMANENCIA_AU_SINCRON */
CREATE TRIGGER CONTROLE_PERMANENCIA_AU_SINCRON FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DATA_INICIAL,'')<>COALESCE(OLD.DATA_INICIAL,'')) THEN TXT=TXT||',DATA_INICIAL = '||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (COALESCE(NEW.AUTORIZACAO,'')<>COALESCE(OLD.AUTORIZACAO,'')) THEN TXT=TXT||',AUTORIZACAO = '||COALESCE(''''||NEW.AUTORIZACAO||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DIASAUTORIZADOS,'')<>COALESCE(OLD.DIASAUTORIZADOS,'')) THEN TXT=TXT||',DIASAUTORIZADOS = '||COALESCE(NEW.DIASAUTORIZADOS,'NULL');
IF (COALESCE(NEW.NAUTOS,'')<>COALESCE(OLD.NAUTOS,'')) THEN TXT=TXT||',NAUTOS = '||COALESCE(''''||NEW.NAUTOS||'''','NULL');
IF (COALESCE(NEW.AVISADO,'')<>COALESCE(OLD.AVISADO,'')) THEN TXT=TXT||',AVISADO = '||COALESCE(''''||NEW.AVISADO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONTROLE_PERMANENCIA SET ID_CONTROLE_PERMANENCIA = '''||NEW.ID_CONTROLE_PERMANENCIA||''''||TXT||' WHERE ID_CONTROLE_PERMANENCIA = '''||NEW.ID_CONTROLE_PERMANENCIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CONTROLE_PERMANENCIA_BD_LOG */
CREATE TRIGGER CONTROLE_PERMANENCIA_BD_LOG FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONTROLE_PERMANENCIA (ID_CONTROLE_PERMANENCIA,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' AUTORIZACAO,'
||' OBS,'
||' ID_INTERNO,'
||' DIASAUTORIZADOS,'
||' NAUTOS,'
||' AVISADO) VALUES ('
||COALESCE(OLD.ID_CONTROLE_PERMANENCIA,'NULL')||','
||COALESCE(''''||OLD.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||OLD.DATA_FINAL||'''','NULL')||','
||COALESCE(''''||OLD.AUTORIZACAO||'''','NULL')||','
||COALESCE(''''||OLD.OBS||'''','NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.DIASAUTORIZADOS,'NULL')||','
||COALESCE(''''||OLD.NAUTOS||'''','NULL')||','
||COALESCE(''''||OLD.AVISADO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONTROLE_PERMANENCIA', OLD.ID_CONTROLE_PERMANENCIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONTROLE_PERMANENCIA_BI0 */
CREATE TRIGGER CONTROLE_PERMANENCIA_BI0 FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin

  if (coalesce(new.id_controle_permanencia,0)=0) then
    new.id_controle_permanencia = gen_id(cod_up,0)||gen_id(idcontrolepermanencia,1);

end
^

/* Trigger: CONTROLE_PERMANENCIA_BI_LOG */
CREATE TRIGGER CONTROLE_PERMANENCIA_BI_LOG FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CONTROLE_PERMANENCIA (ID_CONTROLE_PERMANENCIA,'
||' DATA_INICIAL,'
||' DATA_FINAL,'
||' AUTORIZACAO,'
||' OBS,'
||' ID_INTERNO,'
||' DIASAUTORIZADOS,'
||' NAUTOS,'
||' AVISADO) VALUES ('
||COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'NULL')||','
||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||','
||COALESCE(''''||NEW.AUTORIZACAO||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.DIASAUTORIZADOS,'NULL')||','
||COALESCE(''''||NEW.NAUTOS||'''','NULL')||','
||COALESCE(''''||NEW.AVISADO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONTROLE_PERMANENCIA', NEW.ID_CONTROLE_PERMANENCIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CONTROLE_PERMANENCIA_BU_LOG */
CREATE TRIGGER CONTROLE_PERMANENCIA_BU_LOG FOR CONTROLE_PERMANENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DATA_INICIAL,'')<>COALESCE(OLD.DATA_INICIAL,'')) THEN TXT=TXT||',DATA_INICIAL = '||COALESCE(''''||NEW.DATA_INICIAL||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (COALESCE(NEW.AUTORIZACAO,'')<>COALESCE(OLD.AUTORIZACAO,'')) THEN TXT=TXT||',AUTORIZACAO = '||COALESCE(''''||NEW.AUTORIZACAO||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DIASAUTORIZADOS,'')<>COALESCE(OLD.DIASAUTORIZADOS,'')) THEN TXT=TXT||',DIASAUTORIZADOS = '||COALESCE(NEW.DIASAUTORIZADOS,'NULL');
IF (COALESCE(NEW.NAUTOS,'')<>COALESCE(OLD.NAUTOS,'')) THEN TXT=TXT||',NAUTOS = '||COALESCE(''''||NEW.NAUTOS||'''','NULL');
IF (COALESCE(NEW.AVISADO,'')<>COALESCE(OLD.AVISADO,'')) THEN TXT=TXT||',AVISADO = '||COALESCE(''''||NEW.AVISADO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CONTROLE_PERMANENCIA SET ID_CONTROLE_PERMANENCIA = '''||NEW.ID_CONTROLE_PERMANENCIA||''''||TXT||' WHERE ID_CONTROLE_PERMANENCIA = '''||NEW.ID_CONTROLE_PERMANENCIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CONTROLE_PERMANENCIA', NEW.ID_CONTROLE_PERMANENCIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CTC_AD_SINCRONISMO */
CREATE TRIGGER CTC_AD_SINCRONISMO FOR CTC
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CTC WHERE IDCTC = '||OLD.IDCTC||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CTC_AI_SINCRONISMO */
CREATE TRIGGER CTC_AI_SINCRONISMO FOR CTC
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CTC (IDCTC,'
||' IDINTERNO,'
||' STATUS,'
||' INCIDENCIA_PENAL,'
||' ANALISE_CRIME_PRATICADO,'
||' PASSAGEM_SPF,'
||' REINCIDENCIA,'
||' FACCAO_CRIMINOSA,'
||' SITUACAO_FACCAO,'
||' DATA_INICIO,'
||' DATA_FINAL) VALUES ('
||COALESCE(NEW.IDCTC,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.INCIDENCIA_PENAL||'''','NULL')||','
||COALESCE(''''||NEW.ANALISE_CRIME_PRATICADO||'''','NULL')||','
||COALESCE(''''||NEW.PASSAGEM_SPF||'''','NULL')||','
||COALESCE(''''||NEW.REINCIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.FACCAO_CRIMINOSA||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAO_FACCAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_INICIO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CTC_AU_SINCRONISMO */
CREATE TRIGGER CTC_AU_SINCRONISMO FOR CTC
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.INCIDENCIA_PENAL,'')<>COALESCE(OLD.INCIDENCIA_PENAL,'')) THEN TXT=TXT||',INCIDENCIA_PENAL = '||COALESCE(''''||NEW.INCIDENCIA_PENAL||'''','NULL');
IF (COALESCE(NEW.ANALISE_CRIME_PRATICADO,'')<>COALESCE(OLD.ANALISE_CRIME_PRATICADO,'')) THEN TXT=TXT||',ANALISE_CRIME_PRATICADO = '||COALESCE(''''||NEW.ANALISE_CRIME_PRATICADO||'''','NULL');
IF (COALESCE(NEW.PASSAGEM_SPF,'')<>COALESCE(OLD.PASSAGEM_SPF,'')) THEN TXT=TXT||',PASSAGEM_SPF = '||COALESCE(''''||NEW.PASSAGEM_SPF||'''','NULL');
IF (COALESCE(NEW.REINCIDENCIA,'')<>COALESCE(OLD.REINCIDENCIA,'')) THEN TXT=TXT||',REINCIDENCIA = '||COALESCE(''''||NEW.REINCIDENCIA||'''','NULL');
IF (COALESCE(NEW.FACCAO_CRIMINOSA,'')<>COALESCE(OLD.FACCAO_CRIMINOSA,'')) THEN TXT=TXT||',FACCAO_CRIMINOSA = '||COALESCE(''''||NEW.FACCAO_CRIMINOSA||'''','NULL');
IF (COALESCE(NEW.SITUACAO_FACCAO,'')<>COALESCE(OLD.SITUACAO_FACCAO,'')) THEN TXT=TXT||',SITUACAO_FACCAO = '||COALESCE(''''||NEW.SITUACAO_FACCAO||'''','NULL');
IF (COALESCE(NEW.DATA_INICIO,'')<>COALESCE(OLD.DATA_INICIO,'')) THEN TXT=TXT||',DATA_INICIO = '||COALESCE(''''||NEW.DATA_INICIO||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CTC SET IDCTC = '''||NEW.IDCTC||''''||TXT||' WHERE IDCTC = '''||NEW.IDCTC||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CTC_BD_LOG */
CREATE TRIGGER CTC_BD_LOG FOR CTC
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CTC (IDCTC,'
||' IDINTERNO,'
||' STATUS,'
||' INCIDENCIA_PENAL,'
||' ANALISE_CRIME_PRATICADO,'
||' PASSAGEM_SPF,'
||' REINCIDENCIA,'
||' FACCAO_CRIMINOSA,'
||' SITUACAO_FACCAO,'
||' DATA_INICIO,'
||' DATA_FINAL) VALUES ('
||COALESCE(OLD.IDCTC,'NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||','
||COALESCE(''''||OLD.STATUS||'''','NULL')||','
||COALESCE(''''||OLD.INCIDENCIA_PENAL||'''','NULL')||','
||COALESCE(''''||OLD.ANALISE_CRIME_PRATICADO||'''','NULL')||','
||COALESCE(''''||OLD.PASSAGEM_SPF||'''','NULL')||','
||COALESCE(''''||OLD.REINCIDENCIA||'''','NULL')||','
||COALESCE(''''||OLD.FACCAO_CRIMINOSA||'''','NULL')||','
||COALESCE(''''||OLD.SITUACAO_FACCAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_INICIO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_FINAL||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CTC', OLD.IDCTC,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CTC_BI0 */
CREATE TRIGGER CTC_BI0 FOR CTC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDCTC,0)=0) THEN
  BEGIN
    NEW.IDCTC = GEN_ID(COD_UP,0)||GEN_ID(IDCTC,1) ;
  END
END
^

/* Trigger: CTC_BI_LOG */
CREATE TRIGGER CTC_BI_LOG FOR CTC
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CTC (IDCTC,'
||' IDINTERNO,'
||' STATUS,'
||' INCIDENCIA_PENAL,'
||' ANALISE_CRIME_PRATICADO,'
||' PASSAGEM_SPF,'
||' REINCIDENCIA,'
||' FACCAO_CRIMINOSA,'
||' SITUACAO_FACCAO,'
||' DATA_INICIO,'
||' DATA_FINAL) VALUES ('
||COALESCE(NEW.IDCTC,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.INCIDENCIA_PENAL||'''','NULL')||','
||COALESCE(''''||NEW.ANALISE_CRIME_PRATICADO||'''','NULL')||','
||COALESCE(''''||NEW.PASSAGEM_SPF||'''','NULL')||','
||COALESCE(''''||NEW.REINCIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.FACCAO_CRIMINOSA||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAO_FACCAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_INICIO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FINAL||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CTC', NEW.IDCTC,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CTC_BU_LOG */
CREATE TRIGGER CTC_BU_LOG FOR CTC
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.INCIDENCIA_PENAL,'')<>COALESCE(OLD.INCIDENCIA_PENAL,'')) THEN TXT=TXT||',INCIDENCIA_PENAL = '||COALESCE(''''||NEW.INCIDENCIA_PENAL||'''','NULL');
IF (COALESCE(NEW.ANALISE_CRIME_PRATICADO,'')<>COALESCE(OLD.ANALISE_CRIME_PRATICADO,'')) THEN TXT=TXT||',ANALISE_CRIME_PRATICADO = '||COALESCE(''''||NEW.ANALISE_CRIME_PRATICADO||'''','NULL');
IF (COALESCE(NEW.PASSAGEM_SPF,'')<>COALESCE(OLD.PASSAGEM_SPF,'')) THEN TXT=TXT||',PASSAGEM_SPF = '||COALESCE(''''||NEW.PASSAGEM_SPF||'''','NULL');
IF (COALESCE(NEW.REINCIDENCIA,'')<>COALESCE(OLD.REINCIDENCIA,'')) THEN TXT=TXT||',REINCIDENCIA = '||COALESCE(''''||NEW.REINCIDENCIA||'''','NULL');
IF (COALESCE(NEW.FACCAO_CRIMINOSA,'')<>COALESCE(OLD.FACCAO_CRIMINOSA,'')) THEN TXT=TXT||',FACCAO_CRIMINOSA = '||COALESCE(''''||NEW.FACCAO_CRIMINOSA||'''','NULL');
IF (COALESCE(NEW.SITUACAO_FACCAO,'')<>COALESCE(OLD.SITUACAO_FACCAO,'')) THEN TXT=TXT||',SITUACAO_FACCAO = '||COALESCE(''''||NEW.SITUACAO_FACCAO||'''','NULL');
IF (COALESCE(NEW.DATA_INICIO,'')<>COALESCE(OLD.DATA_INICIO,'')) THEN TXT=TXT||',DATA_INICIO = '||COALESCE(''''||NEW.DATA_INICIO||'''','NULL');
IF (COALESCE(NEW.DATA_FINAL,'')<>COALESCE(OLD.DATA_FINAL,'')) THEN TXT=TXT||',DATA_FINAL = '||COALESCE(''''||NEW.DATA_FINAL||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CTC SET IDCTC = '''||NEW.IDCTC||''''||TXT||' WHERE IDCTC = '''||NEW.IDCTC||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CTC', NEW.IDCTC,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: CTC_IU_SINC_BLOB */
CREATE TRIGGER CTC_IU_SINC_BLOB FOR CTC
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.SITUACAO_PROCESSUAL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'SITUACAO_PROCESSUAL', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.INFORMACOES_INTELIGENCIA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'INFORMACOES_INTELIGENCIA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.CONFIRMACAO_PEDIDO_INCLUSAO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONFIRMACAO_PEDIDO_INCLUSAO', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.CONDUTA_UNIDADE_PENAL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONDUTA_UNIDADE_PENAL', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.SERVICO_SOCIAL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'SERVICO_SOCIAL', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.ENFERMAGEM IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ENFERMAGEM', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.FARMACIA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'FARMACIA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.CLINICA_MEDICA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CLINICA_MEDICA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.PSIQUIATRIA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PSIQUIATRIA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.ODONTOLOGIA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ODONTOLOGIA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.PSICOLOGIA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PSICOLOGIA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.TERAPIA_OCUPACIONAL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'TERAPIA_OCUPACIONAL', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.PEDAGOGIA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PEDAGOGIA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.ASSISTENCIA_RELIGIOSA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_RELIGIOSA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.ASSISTENCIA_MATERIAL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_MATERIAL', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.ASSISTENCIA_JURIDICA IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_JURIDICA', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.PROJETO_DEMAIS_ACOES IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PROJETO_DEMAIS_ACOES', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.CONCLUSAO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONCLUSAO', 'IDCTC', NEW.IDCTC);
        END

        IF (NEW.REQUISITO_INCLUSAO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'REQUISITO_INCLUSAO', 'IDCTC', NEW.IDCTC);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.SITUACAO_PROCESSUAL IS NOT NULL) THEN
        BEGIN
            IF (OLD.SITUACAO_PROCESSUAL <> NEW.SITUACAO_PROCESSUAL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'SITUACAO_PROCESSUAL', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'SITUACAO_PROCESSUAL', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.INFORMACOES_INTELIGENCIA IS NOT NULL) THEN
        BEGIN
            IF (OLD.INFORMACOES_INTELIGENCIA <> NEW.INFORMACOES_INTELIGENCIA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'INFORMACOES_INTELIGENCIA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'INFORMACOES_INTELIGENCIA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.CONFIRMACAO_PEDIDO_INCLUSAO IS NOT NULL) THEN
        BEGIN
            IF (OLD.CONFIRMACAO_PEDIDO_INCLUSAO <> NEW.CONFIRMACAO_PEDIDO_INCLUSAO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONFIRMACAO_PEDIDO_INCLUSAO', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONFIRMACAO_PEDIDO_INCLUSAO', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.CONDUTA_UNIDADE_PENAL IS NOT NULL) THEN
        BEGIN
            IF (OLD.CONDUTA_UNIDADE_PENAL <> NEW.CONDUTA_UNIDADE_PENAL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONDUTA_UNIDADE_PENAL', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONDUTA_UNIDADE_PENAL', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.SERVICO_SOCIAL IS NOT NULL) THEN
        BEGIN
            IF (OLD.SERVICO_SOCIAL <> NEW.SERVICO_SOCIAL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'SERVICO_SOCIAL', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'SERVICO_SOCIAL', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.ENFERMAGEM IS NOT NULL) THEN
        BEGIN
            IF (OLD.ENFERMAGEM <> NEW.ENFERMAGEM) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ENFERMAGEM', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ENFERMAGEM', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.FARMACIA IS NOT NULL) THEN
        BEGIN
            IF (OLD.FARMACIA <> NEW.FARMACIA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'FARMACIA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'FARMACIA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.CLINICA_MEDICA IS NOT NULL) THEN
        BEGIN
            IF (OLD.CLINICA_MEDICA <> NEW.CLINICA_MEDICA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CLINICA_MEDICA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CLINICA_MEDICA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.PSIQUIATRIA IS NOT NULL) THEN
        BEGIN
            IF (OLD.PSIQUIATRIA <> NEW.PSIQUIATRIA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PSIQUIATRIA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PSIQUIATRIA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.ODONTOLOGIA IS NOT NULL) THEN
        BEGIN
            IF (OLD.ODONTOLOGIA <> NEW.ODONTOLOGIA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ODONTOLOGIA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ODONTOLOGIA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.PSICOLOGIA IS NOT NULL) THEN
        BEGIN
            IF (OLD.PSICOLOGIA <> NEW.PSICOLOGIA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PSICOLOGIA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PSICOLOGIA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.TERAPIA_OCUPACIONAL IS NOT NULL) THEN
        BEGIN
            IF (OLD.TERAPIA_OCUPACIONAL <> NEW.TERAPIA_OCUPACIONAL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'TERAPIA_OCUPACIONAL', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'TERAPIA_OCUPACIONAL', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.PEDAGOGIA IS NOT NULL) THEN
        BEGIN
            IF (OLD.PEDAGOGIA <> NEW.PEDAGOGIA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PEDAGOGIA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PEDAGOGIA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.ASSISTENCIA_RELIGIOSA IS NOT NULL) THEN
        BEGIN
            IF (OLD.ASSISTENCIA_RELIGIOSA <> NEW.ASSISTENCIA_RELIGIOSA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_RELIGIOSA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_RELIGIOSA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.ASSISTENCIA_MATERIAL IS NOT NULL) THEN
        BEGIN
            IF (OLD.ASSISTENCIA_MATERIAL <> NEW.ASSISTENCIA_MATERIAL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_MATERIAL', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_MATERIAL', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.ASSISTENCIA_JURIDICA IS NOT NULL) THEN
        BEGIN
            IF (OLD.ASSISTENCIA_JURIDICA <> NEW.ASSISTENCIA_JURIDICA) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_JURIDICA', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'ASSISTENCIA_JURIDICA', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.PROJETO_DEMAIS_ACOES IS NOT NULL) THEN
        BEGIN
            IF (OLD.PROJETO_DEMAIS_ACOES <> NEW.PROJETO_DEMAIS_ACOES) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PROJETO_DEMAIS_ACOES', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'PROJETO_DEMAIS_ACOES', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.CONCLUSAO IS NOT NULL) THEN
        BEGIN
            IF (OLD.CONCLUSAO <> NEW.CONCLUSAO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONCLUSAO', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'CONCLUSAO', 'IDCTC', NEW.IDCTC);
        END

        IF (OLD.REQUISITO_INCLUSAO IS NOT NULL) THEN
        BEGIN
            IF (OLD.REQUISITO_INCLUSAO <> NEW.REQUISITO_INCLUSAO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'REQUISITO_INCLUSAO', 'IDCTC', NEW.IDCTC);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'CTC', 'REQUISITO_INCLUSAO', 'IDCTC', NEW.IDCTC);
        END

    END

   END

END
^

/* Trigger: CURSO_AD_SINCRONISMO */
CREATE TRIGGER CURSO_AD_SINCRONISMO FOR CURSO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM CURSO WHERE ID_CURSO = '||OLD.ID_CURSO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: CURSO_AI_SINCRONISMO */
CREATE TRIGGER CURSO_AI_SINCRONISMO FOR CURSO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO CURSO (ID_CURSO,'
||' CURSO) VALUES ('
||COALESCE(NEW.ID_CURSO,'NULL')||','
||COALESCE(''''||NEW.CURSO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: CURSO_AU_SINCRONISMO */
CREATE TRIGGER CURSO_AU_SINCRONISMO FOR CURSO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.CURSO,'')<>COALESCE(OLD.CURSO,'')) THEN TXT=TXT||',CURSO = '||COALESCE(''''||NEW.CURSO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CURSO SET ID_CURSO = '''||NEW.ID_CURSO||''''||TXT||' WHERE ID_CURSO = '''||NEW.ID_CURSO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: CURSO_BD_LOG */
CREATE TRIGGER CURSO_BD_LOG FOR CURSO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CURSO (ID_CURSO,'
||' CURSO) VALUES ('
||COALESCE(OLD.ID_CURSO,'NULL')||','
||COALESCE(''''||OLD.CURSO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CURSO', OLD.ID_CURSO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CURSO_BI0 */
CREATE TRIGGER CURSO_BI0 FOR CURSO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_curso IS null or (new.id_curso = 0)  ) then
    new.id_curso = gen_id (cod_up, 0) || gen_id (idcurso, 1);
end
^

/* Trigger: CURSO_BI_LOG */
CREATE TRIGGER CURSO_BI_LOG FOR CURSO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO CURSO (ID_CURSO,'
||' CURSO) VALUES ('
||COALESCE(NEW.ID_CURSO,'NULL')||','
||COALESCE(''''||NEW.CURSO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CURSO', NEW.ID_CURSO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: CURSO_BU_LOG */
CREATE TRIGGER CURSO_BU_LOG FOR CURSO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.CURSO,'')<>COALESCE(OLD.CURSO,'')) THEN TXT=TXT||',CURSO = '||COALESCE(''''||NEW.CURSO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE CURSO SET ID_CURSO = '''||NEW.ID_CURSO||''''||TXT||' WHERE ID_CURSO = '''||NEW.ID_CURSO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'CURSO', NEW.ID_CURSO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: DESTINO_AD_SINCRONISMO */
CREATE TRIGGER DESTINO_AD_SINCRONISMO FOR DESTINO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM DESTINO WHERE ID_DESTINO = '||OLD.ID_DESTINO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: DESTINO_AI_SINCRONISMO */
CREATE TRIGGER DESTINO_AI_SINCRONISMO FOR DESTINO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO DESTINO (ID_DESTINO,'
||' DESTINO,'
||' CAPITAL) VALUES ('
||COALESCE(NEW.ID_DESTINO,'NULL')||','
||COALESCE(''''||NEW.DESTINO||'''','NULL')||','
||COALESCE(''''||NEW.CAPITAL||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: DESTINO_AU_SINCRONISMO */
CREATE TRIGGER DESTINO_AU_SINCRONISMO FOR DESTINO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESTINO,'')<>COALESCE(OLD.DESTINO,'')) THEN TXT=TXT||',DESTINO = '||COALESCE(''''||NEW.DESTINO||'''','NULL');
IF (COALESCE(NEW.CAPITAL,'')<>COALESCE(OLD.CAPITAL,'')) THEN TXT=TXT||',CAPITAL = '||COALESCE(''''||NEW.CAPITAL||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE DESTINO SET ID_DESTINO = '''||NEW.ID_DESTINO||''''||TXT||' WHERE ID_DESTINO = '''||NEW.ID_DESTINO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: DESTINO_BD_LOG */
CREATE TRIGGER DESTINO_BD_LOG FOR DESTINO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO DESTINO (ID_DESTINO,'
||' DESTINO,'
||' CAPITAL) VALUES ('
||COALESCE(OLD.ID_DESTINO,'NULL')||','
||COALESCE(''''||OLD.DESTINO||'''','NULL')||','
||COALESCE(''''||OLD.CAPITAL||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'DESTINO', OLD.ID_DESTINO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: DESTINO_BI0 */
CREATE TRIGGER DESTINO_BI0 FOR DESTINO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_destino IS null or (new.id_destino = 0)  ) then
    new.id_destino = gen_id (cod_up, 0) || gen_id (id_destino, 1);
end
^

/* Trigger: DESTINO_BI_LOG */
CREATE TRIGGER DESTINO_BI_LOG FOR DESTINO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO DESTINO (ID_DESTINO,'
||' DESTINO,'
||' CAPITAL) VALUES ('
||COALESCE(NEW.ID_DESTINO,'NULL')||','
||COALESCE(''''||NEW.DESTINO||'''','NULL')||','
||COALESCE(''''||NEW.CAPITAL||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'DESTINO', NEW.ID_DESTINO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: DESTINO_BU_LOG */
CREATE TRIGGER DESTINO_BU_LOG FOR DESTINO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESTINO,'')<>COALESCE(OLD.DESTINO,'')) THEN TXT=TXT||',DESTINO = '||COALESCE(''''||NEW.DESTINO||'''','NULL');
IF (COALESCE(NEW.CAPITAL,'')<>COALESCE(OLD.CAPITAL,'')) THEN TXT=TXT||',CAPITAL = '||COALESCE(''''||NEW.CAPITAL||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE DESTINO SET ID_DESTINO = '''||NEW.ID_DESTINO||''''||TXT||' WHERE ID_DESTINO = '''||NEW.ID_DESTINO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'DESTINO', NEW.ID_DESTINO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: DETRACAO_BI */
CREATE TRIGGER DETRACAO_BI FOR DETRACAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDDETRACAO,0)=0) THEN
    NEW.IDDETRACAO = GEN_ID(COD_UP,0)||GEN_ID(IDDETRACAO,1);
END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_AD_SIN */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_AD_SIN FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM DOCUMENTOS_DIGITALIZADOS WHERE ID_DOCUMENTO_DIGITALIZADO = '||OLD.ID_DOCUMENTO_DIGITALIZADO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_AI_SIN */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_AI_SIN FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO DOCUMENTOS_DIGITALIZADOS (ID_DOCUMENTO_DIGITALIZADO,'
||' ID_POSTO_TRABALHO,'
||' DESCRICAO,'
||' ID_TIPO_DOCUMENTO,'
||' DATA,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_DOCUMENTO_DIGITALIZADO,'NULL')||','
||COALESCE(NEW.ID_POSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.ID_TIPO_DOCUMENTO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_AU_SIN */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_AU_SIN FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_POSTO_TRABALHO,'')<>COALESCE(OLD.ID_POSTO_TRABALHO,'')) THEN TXT=TXT||',ID_POSTO_TRABALHO = '||COALESCE(NEW.ID_POSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ID_TIPO_DOCUMENTO,'')<>COALESCE(OLD.ID_TIPO_DOCUMENTO,'')) THEN TXT=TXT||',ID_TIPO_DOCUMENTO = '||COALESCE(NEW.ID_TIPO_DOCUMENTO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE DOCUMENTOS_DIGITALIZADOS SET ID_DOCUMENTO_DIGITALIZADO = '''||NEW.ID_DOCUMENTO_DIGITALIZADO||''''||TXT||' WHERE ID_DOCUMENTO_DIGITALIZADO = '''||NEW.ID_DOCUMENTO_DIGITALIZADO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_BD_LOG */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_BD_LOG FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO DOCUMENTOS_DIGITALIZADOS (ID_DOCUMENTO_DIGITALIZADO,'
||' ID_POSTO_TRABALHO,'
||' DESCRICAO,'
||' ID_TIPO_DOCUMENTO,'
||' DATA,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_DOCUMENTO_DIGITALIZADO,'NULL')||','
||COALESCE(OLD.ID_POSTO_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(OLD.ID_TIPO_DOCUMENTO,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'DOCUMENTOS_DIGITALIZADOS', OLD.ID_DOCUMENTO_DIGITALIZADO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_BI0 */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_BI0 FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
     if (NEW.id_documento_digitalizado IS null or (new.id_documento_digitalizado = 0)  ) then
    new.id_documento_digitalizado = gen_id (cod_up, 0) || gen_id (iddocumento_digitalizado, 1);
end
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_BI_LOG */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_BI_LOG FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO DOCUMENTOS_DIGITALIZADOS (ID_DOCUMENTO_DIGITALIZADO,'
||' ID_POSTO_TRABALHO,'
||' DESCRICAO,'
||' ID_TIPO_DOCUMENTO,'
||' DATA,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_DOCUMENTO_DIGITALIZADO,'NULL')||','
||COALESCE(NEW.ID_POSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.ID_TIPO_DOCUMENTO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'DOCUMENTOS_DIGITALIZADOS', NEW.ID_DOCUMENTO_DIGITALIZADO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_BU_LOG */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_BU_LOG FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_POSTO_TRABALHO,'')<>COALESCE(OLD.ID_POSTO_TRABALHO,'')) THEN TXT=TXT||',ID_POSTO_TRABALHO = '||COALESCE(NEW.ID_POSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ID_TIPO_DOCUMENTO,'')<>COALESCE(OLD.ID_TIPO_DOCUMENTO,'')) THEN TXT=TXT||',ID_TIPO_DOCUMENTO = '||COALESCE(NEW.ID_TIPO_DOCUMENTO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE DOCUMENTOS_DIGITALIZADOS SET ID_DOCUMENTO_DIGITALIZADO = '''||NEW.ID_DOCUMENTO_DIGITALIZADO||''''||TXT||' WHERE ID_DOCUMENTO_DIGITALIZADO = '''||NEW.ID_DOCUMENTO_DIGITALIZADO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'DOCUMENTOS_DIGITALIZADOS', NEW.ID_DOCUMENTO_DIGITALIZADO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: DOCUMENTOS_DIGITALIZADOS_IU_SIN */
CREATE TRIGGER DOCUMENTOS_DIGITALIZADOS_IU_SIN FOR DOCUMENTOS_DIGITALIZADOS
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.DOCUMENTO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'DOCUMENTOS_DIGITALIZADOS', 'DOCUMENTO', 'ID_DOCUMENTO_DIGITALIZADO', NEW.ID_DOCUMENTO_DIGITALIZADO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.DOCUMENTO IS NOT NULL) THEN
        BEGIN
            IF (OLD.DOCUMENTO <> NEW.DOCUMENTO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'DOCUMENTOS_DIGITALIZADOS', 'DOCUMENTO', 'ID_DOCUMENTO_DIGITALIZADO', NEW.ID_DOCUMENTO_DIGITALIZADO);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'DOCUMENTOS_DIGITALIZADOS', 'DOCUMENTO', 'ID_DOCUMENTO_DIGITALIZADO', NEW.ID_DOCUMENTO_DIGITALIZADO);
        END

    END

   END

END
^

/* Trigger: DOCUMENTOS_PROCESSO_AD_SINCRONI */
CREATE TRIGGER DOCUMENTOS_PROCESSO_AD_SINCRONI FOR DOCUMENTOS_PROCESSO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-09 14:13:15.6960
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM DOCUMENTOS_PROCESSO WHERE IDDOCUMENTOS_PROCESSO = '||OLD.IDDOCUMENTOS_PROCESSO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: DOCUMENTOS_PROCESSO_AI_SINCRONI */
CREATE TRIGGER DOCUMENTOS_PROCESSO_AI_SINCRONI FOR DOCUMENTOS_PROCESSO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-09 14:13:15.6960

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO DOCUMENTOS_PROCESSO (IDDOCUMENTOS_PROCESSO,'
||' DESCRICAO,'
||' IDPROCESSO) VALUES ('
||COALESCE(NEW.IDDOCUMENTOS_PROCESSO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DESCRICAO,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDPROCESSO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: DOCUMENTOS_PROCESSO_AU_SINCRONI */
CREATE TRIGGER DOCUMENTOS_PROCESSO_AU_SINCRONI FOR DOCUMENTOS_PROCESSO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-09 14:13:15.6960
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DESCRICAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDPROCESSO,'')<>COALESCE(OLD.IDPROCESSO,'')) THEN TXT=TXT||',IDPROCESSO = '||COALESCE(NEW.IDPROCESSO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE DOCUMENTOS_PROCESSO SET IDDOCUMENTOS_PROCESSO = '''||NEW.IDDOCUMENTOS_PROCESSO||''''||TXT||' WHERE IDDOCUMENTOS_PROCESSO = '''||NEW.IDDOCUMENTOS_PROCESSO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: DOCUMENTOS_PROCESSO_IU_SINC_BLO */
CREATE TRIGGER DOCUMENTOS_PROCESSO_IU_SINC_BLO FOR DOCUMENTOS_PROCESSO
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-09 14:13:15.6960
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.DOCUMENTOS IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'DOCUMENTOS_PROCESSO', 'DOCUMENTOS', 'IDDOCUMENTOS_PROCESSO', NEW.IDDOCUMENTOS_PROCESSO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.DOCUMENTOS IS NOT NULL) THEN
        BEGIN
            IF (OLD.DOCUMENTOS <> NEW.DOCUMENTOS) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'DOCUMENTOS_PROCESSO', 'DOCUMENTOS', 'IDDOCUMENTOS_PROCESSO', NEW.IDDOCUMENTOS_PROCESSO);
            END
        END
        ELSE
        BEGIN
            IF (NEW.DOCUMENTOS IS NOT NULL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'DOCUMENTOS_PROCESSO', 'DOCUMENTOS', 'IDDOCUMENTOS_PROCESSO', NEW.IDDOCUMENTOS_PROCESSO);
            END
        END

    END

   END

END
^

/* Trigger: EQUIPE_AD_SINCRONISMO */
CREATE TRIGGER EQUIPE_AD_SINCRONISMO FOR EQUIPE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM EQUIPE WHERE IDEQUIPE = '||OLD.IDEQUIPE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: EQUIPE_AI_SINCRONISMO */
CREATE TRIGGER EQUIPE_AI_SINCRONISMO FOR EQUIPE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO EQUIPE (IDEQUIPE,'
||' EQUIPE,'
||' TIPO,'
||' IDHORARIO_FUNCIONARIO) VALUES ('
||COALESCE(NEW.IDEQUIPE,'NULL')||','
||COALESCE(''''||NEW.EQUIPE||'''','NULL')||','
||COALESCE(''''||NEW.TIPO||'''','NULL')||','
||COALESCE(NEW.IDHORARIO_FUNCIONARIO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: EQUIPE_AU_SINCRONISMO */
CREATE TRIGGER EQUIPE_AU_SINCRONISMO FOR EQUIPE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.EQUIPE,'')<>COALESCE(OLD.EQUIPE,'')) THEN TXT=TXT||',EQUIPE = '||COALESCE(''''||NEW.EQUIPE||'''','NULL');
IF (COALESCE(NEW.TIPO,'')<>COALESCE(OLD.TIPO,'')) THEN TXT=TXT||',TIPO = '||COALESCE(''''||NEW.TIPO||'''','NULL');
IF (COALESCE(NEW.IDHORARIO_FUNCIONARIO,'')<>COALESCE(OLD.IDHORARIO_FUNCIONARIO,'')) THEN TXT=TXT||',IDHORARIO_FUNCIONARIO = '||COALESCE(NEW.IDHORARIO_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE EQUIPE SET IDEQUIPE = '''||NEW.IDEQUIPE||''''||TXT||' WHERE IDEQUIPE = '''||NEW.IDEQUIPE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: EQUIPE_BD_LOG */
CREATE TRIGGER EQUIPE_BD_LOG FOR EQUIPE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO EQUIPE (IDEQUIPE,'
||' EQUIPE,'
||' TIPO,'
||' IDHORARIO_FUNCIONARIO) VALUES ('
||COALESCE(OLD.IDEQUIPE,'NULL')||','
||COALESCE(''''||OLD.EQUIPE||'''','NULL')||','
||COALESCE(''''||OLD.TIPO||'''','NULL')||','
||COALESCE(OLD.IDHORARIO_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'EQUIPE', OLD.IDEQUIPE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: EQUIPE_BI0 */
CREATE TRIGGER EQUIPE_BI0 FOR EQUIPE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDEQUIPE IS NULL OR (NEW.IDEQUIPE = 0)  ) THEN
    NEW.IDEQUIPE = GEN_ID (COD_UP, 0) || GEN_ID (IDEQUIPE, 1);
end
^

/* Trigger: EQUIPE_BI_LOG */
CREATE TRIGGER EQUIPE_BI_LOG FOR EQUIPE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO EQUIPE (IDEQUIPE,'
||' EQUIPE,'
||' TIPO,'
||' IDHORARIO_FUNCIONARIO) VALUES ('
||COALESCE(NEW.IDEQUIPE,'NULL')||','
||COALESCE(''''||NEW.EQUIPE||'''','NULL')||','
||COALESCE(''''||NEW.TIPO||'''','NULL')||','
||COALESCE(NEW.IDHORARIO_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'EQUIPE', NEW.IDEQUIPE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: EQUIPE_BU_LOG */
CREATE TRIGGER EQUIPE_BU_LOG FOR EQUIPE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.EQUIPE,'')<>COALESCE(OLD.EQUIPE,'')) THEN TXT=TXT||',EQUIPE = '||COALESCE(''''||NEW.EQUIPE||'''','NULL');
IF (COALESCE(NEW.TIPO,'')<>COALESCE(OLD.TIPO,'')) THEN TXT=TXT||',TIPO = '||COALESCE(''''||NEW.TIPO||'''','NULL');
IF (COALESCE(NEW.IDHORARIO_FUNCIONARIO,'')<>COALESCE(OLD.IDHORARIO_FUNCIONARIO,'')) THEN TXT=TXT||',IDHORARIO_FUNCIONARIO = '||COALESCE(NEW.IDHORARIO_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE EQUIPE SET IDEQUIPE = '''||NEW.IDEQUIPE||''''||TXT||' WHERE IDEQUIPE = '''||NEW.IDEQUIPE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'EQUIPE', NEW.IDEQUIPE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ESCALA_PLANTAO_AD_SINCRONISMO */
CREATE TRIGGER ESCALA_PLANTAO_AD_SINCRONISMO FOR ESCALA_PLANTAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ESCALA_PLANTAO WHERE IDESCALA_PLANTAO = '||OLD.IDESCALA_PLANTAO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ESCALA_PLANTAO_AI_SINCRONISMO */
CREATE TRIGGER ESCALA_PLANTAO_AI_SINCRONISMO FOR ESCALA_PLANTAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ESCALA_PLANTAO (IDESCALA_PLANTAO,'
||' IDEQUIPE,'
||' IDFUNCIONARIO,'
||' IDFUNC_SUBSTITUTO,'
||' IDPOSTO_TRABALHO,'
||' DATA_PLANTAO,'
||' HORA_INICIO,'
||' HORA_FIM,'
||' POSTO_ROTATIVO,'
||' OBSERVACOES) VALUES ('
||COALESCE(NEW.IDESCALA_PLANTAO,'NULL')||','
||COALESCE(NEW.IDEQUIPE,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||','
||COALESCE(NEW.IDFUNC_SUBSTITUTO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DATA_PLANTAO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FIM||'''','NULL')||','
||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACOES||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ESCALA_PLANTAO_AU_SINCRONISMO */
CREATE TRIGGER ESCALA_PLANTAO_AU_SINCRONISMO FOR ESCALA_PLANTAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDEQUIPE,'')<>COALESCE(OLD.IDEQUIPE,'')) THEN TXT=TXT||',IDEQUIPE = '||COALESCE(NEW.IDEQUIPE,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (COALESCE(NEW.IDFUNC_SUBSTITUTO,'')<>COALESCE(OLD.IDFUNC_SUBSTITUTO,'')) THEN TXT=TXT||',IDFUNC_SUBSTITUTO = '||COALESCE(NEW.IDFUNC_SUBSTITUTO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.DATA_PLANTAO,'')<>COALESCE(OLD.DATA_PLANTAO,'')) THEN TXT=TXT||',DATA_PLANTAO = '||COALESCE(''''||NEW.DATA_PLANTAO||'''','NULL');
IF (COALESCE(NEW.HORA_INICIO,'')<>COALESCE(OLD.HORA_INICIO,'')) THEN TXT=TXT||',HORA_INICIO = '||COALESCE(''''||NEW.HORA_INICIO||'''','NULL');
IF (COALESCE(NEW.HORA_FIM,'')<>COALESCE(OLD.HORA_FIM,'')) THEN TXT=TXT||',HORA_FIM = '||COALESCE(''''||NEW.HORA_FIM||'''','NULL');
IF (COALESCE(NEW.POSTO_ROTATIVO,'')<>COALESCE(OLD.POSTO_ROTATIVO,'')) THEN TXT=TXT||',POSTO_ROTATIVO = '||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL');
IF (COALESCE(NEW.OBSERVACOES,'')<>COALESCE(OLD.OBSERVACOES,'')) THEN TXT=TXT||',OBSERVACOES = '||COALESCE(''''||NEW.OBSERVACOES||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ESCALA_PLANTAO SET IDESCALA_PLANTAO = '''||NEW.IDESCALA_PLANTAO||''''||TXT||' WHERE IDESCALA_PLANTAO = '''||NEW.IDESCALA_PLANTAO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ESCALA_PLANTAO_BD_LOG */
CREATE TRIGGER ESCALA_PLANTAO_BD_LOG FOR ESCALA_PLANTAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ESCALA_PLANTAO (IDESCALA_PLANTAO,'
||' IDEQUIPE,'
||' IDFUNCIONARIO,'
||' IDFUNC_SUBSTITUTO,'
||' IDPOSTO_TRABALHO,'
||' DATA_PLANTAO,'
||' HORA_INICIO,'
||' HORA_FIM,'
||' POSTO_ROTATIVO,'
||' OBSERVACOES) VALUES ('
||COALESCE(OLD.IDESCALA_PLANTAO,'NULL')||','
||COALESCE(OLD.IDEQUIPE,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO,'NULL')||','
||COALESCE(OLD.IDFUNC_SUBSTITUTO,'NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.DATA_PLANTAO||'''','NULL')||','
||COALESCE(''''||OLD.HORA_INICIO||'''','NULL')||','
||COALESCE(''''||OLD.HORA_FIM||'''','NULL')||','
||COALESCE(''''||OLD.POSTO_ROTATIVO||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACOES||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESCALA_PLANTAO', OLD.IDESCALA_PLANTAO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ESCALA_PLANTAO_BI0 */
CREATE TRIGGER ESCALA_PLANTAO_BI0 FOR ESCALA_PLANTAO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDESCALA_PLANTAO IS NULL OR (NEW.IDESCALA_PLANTAO = 0)  ) THEN
    NEW.IDESCALA_PLANTAO = GEN_ID (COD_UP, 0) || GEN_ID (IDESCALA_PLANTAO, 1);
end
^

/* Trigger: ESCALA_PLANTAO_BI_LOG */
CREATE TRIGGER ESCALA_PLANTAO_BI_LOG FOR ESCALA_PLANTAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ESCALA_PLANTAO (IDESCALA_PLANTAO,'
||' IDEQUIPE,'
||' IDFUNCIONARIO,'
||' IDFUNC_SUBSTITUTO,'
||' IDPOSTO_TRABALHO,'
||' DATA_PLANTAO,'
||' HORA_INICIO,'
||' HORA_FIM,'
||' POSTO_ROTATIVO,'
||' OBSERVACOES) VALUES ('
||COALESCE(NEW.IDESCALA_PLANTAO,'NULL')||','
||COALESCE(NEW.IDEQUIPE,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||','
||COALESCE(NEW.IDFUNC_SUBSTITUTO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DATA_PLANTAO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FIM||'''','NULL')||','
||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACOES||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESCALA_PLANTAO', NEW.IDESCALA_PLANTAO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ESCALA_PLANTAO_BU_LOG */
CREATE TRIGGER ESCALA_PLANTAO_BU_LOG FOR ESCALA_PLANTAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDEQUIPE,'')<>COALESCE(OLD.IDEQUIPE,'')) THEN TXT=TXT||',IDEQUIPE = '||COALESCE(NEW.IDEQUIPE,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (COALESCE(NEW.IDFUNC_SUBSTITUTO,'')<>COALESCE(OLD.IDFUNC_SUBSTITUTO,'')) THEN TXT=TXT||',IDFUNC_SUBSTITUTO = '||COALESCE(NEW.IDFUNC_SUBSTITUTO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.DATA_PLANTAO,'')<>COALESCE(OLD.DATA_PLANTAO,'')) THEN TXT=TXT||',DATA_PLANTAO = '||COALESCE(''''||NEW.DATA_PLANTAO||'''','NULL');
IF (COALESCE(NEW.HORA_INICIO,'')<>COALESCE(OLD.HORA_INICIO,'')) THEN TXT=TXT||',HORA_INICIO = '||COALESCE(''''||NEW.HORA_INICIO||'''','NULL');
IF (COALESCE(NEW.HORA_FIM,'')<>COALESCE(OLD.HORA_FIM,'')) THEN TXT=TXT||',HORA_FIM = '||COALESCE(''''||NEW.HORA_FIM||'''','NULL');
IF (COALESCE(NEW.POSTO_ROTATIVO,'')<>COALESCE(OLD.POSTO_ROTATIVO,'')) THEN TXT=TXT||',POSTO_ROTATIVO = '||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL');
IF (COALESCE(NEW.OBSERVACOES,'')<>COALESCE(OLD.OBSERVACOES,'')) THEN TXT=TXT||',OBSERVACOES = '||COALESCE(''''||NEW.OBSERVACOES||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ESCALA_PLANTAO SET IDESCALA_PLANTAO = '''||NEW.IDESCALA_PLANTAO||''''||TXT||' WHERE IDESCALA_PLANTAO = '''||NEW.IDESCALA_PLANTAO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESCALA_PLANTAO', NEW.IDESCALA_PLANTAO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ESCOLARIDADE_AD_SINCRONISMO */
CREATE TRIGGER ESCOLARIDADE_AD_SINCRONISMO FOR ESCOLARIDADE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ESCOLARIDADE WHERE ID_ESCOLARIDADE = '||OLD.ID_ESCOLARIDADE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ESCOLARIDADE_AI_SINCRONISMO */
CREATE TRIGGER ESCOLARIDADE_AI_SINCRONISMO FOR ESCOLARIDADE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ESCOLARIDADE (ID_ESCOLARIDADE,'
||' ESCOLARIDADE) VALUES ('
||COALESCE(NEW.ID_ESCOLARIDADE,'NULL')||','
||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ESCOLARIDADE_AU_SINCRONISMO */
CREATE TRIGGER ESCOLARIDADE_AU_SINCRONISMO FOR ESCOLARIDADE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ESCOLARIDADE,'')<>COALESCE(OLD.ESCOLARIDADE,'')) THEN TXT=TXT||',ESCOLARIDADE = '||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ESCOLARIDADE SET ID_ESCOLARIDADE = '''||NEW.ID_ESCOLARIDADE||''''||TXT||' WHERE ID_ESCOLARIDADE = '''||NEW.ID_ESCOLARIDADE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ESCOLARIDADE_BD_LOG */
CREATE TRIGGER ESCOLARIDADE_BD_LOG FOR ESCOLARIDADE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ESCOLARIDADE (ID_ESCOLARIDADE,'
||' ESCOLARIDADE) VALUES ('
||COALESCE(OLD.ID_ESCOLARIDADE,'NULL')||','
||COALESCE(''''||OLD.ESCOLARIDADE||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESCOLARIDADE', OLD.ID_ESCOLARIDADE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ESCOLARIDADE_BI0 */
CREATE TRIGGER ESCOLARIDADE_BI0 FOR ESCOLARIDADE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_escolaridade IS null or (new.id_escolaridade = 0)  ) then
    new.id_escolaridade = gen_id (cod_up, 0) || gen_id (id_escolaridade, 1);
end
^

/* Trigger: ESCOLARIDADE_BI_LOG */
CREATE TRIGGER ESCOLARIDADE_BI_LOG FOR ESCOLARIDADE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ESCOLARIDADE (ID_ESCOLARIDADE,'
||' ESCOLARIDADE) VALUES ('
||COALESCE(NEW.ID_ESCOLARIDADE,'NULL')||','
||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESCOLARIDADE', NEW.ID_ESCOLARIDADE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ESCOLARIDADE_BU_LOG */
CREATE TRIGGER ESCOLARIDADE_BU_LOG FOR ESCOLARIDADE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ESCOLARIDADE,'')<>COALESCE(OLD.ESCOLARIDADE,'')) THEN TXT=TXT||',ESCOLARIDADE = '||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ESCOLARIDADE SET ID_ESCOLARIDADE = '''||NEW.ID_ESCOLARIDADE||''''||TXT||' WHERE ID_ESCOLARIDADE = '''||NEW.ID_ESCOLARIDADE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESCOLARIDADE', NEW.ID_ESCOLARIDADE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: ESTADO_AD_SINCRONISMO */
CREATE TRIGGER ESTADO_AD_SINCRONISMO FOR ESTADO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ESTADO WHERE ID_ESTADO = '||OLD.ID_ESTADO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ESTADO_AI_SINCRONISMO */
CREATE TRIGGER ESTADO_AI_SINCRONISMO FOR ESTADO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ESTADO (ID_ESTADO,'
||' ESTADO,'
||' UF) VALUES ('
||COALESCE(NEW.ID_ESTADO,'NULL')||','
||COALESCE(''''||NEW.ESTADO||'''','NULL')||','
||COALESCE(''''||NEW.UF||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ESTADO_AU_SINCRONISMO */
CREATE TRIGGER ESTADO_AU_SINCRONISMO FOR ESTADO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ESTADO,'')<>COALESCE(OLD.ESTADO,'')) THEN TXT=TXT||',ESTADO = '||COALESCE(''''||NEW.ESTADO||'''','NULL');
IF (COALESCE(NEW.UF,'')<>COALESCE(OLD.UF,'')) THEN TXT=TXT||',UF = '||COALESCE(''''||NEW.UF||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ESTADO SET ID_ESTADO = '''||NEW.ID_ESTADO||''''||TXT||' WHERE ID_ESTADO = '''||NEW.ID_ESTADO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ESTADO_BD_LOG */
CREATE TRIGGER ESTADO_BD_LOG FOR ESTADO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ESTADO (ID_ESTADO,'
||' ESTADO,'
||' UF) VALUES ('
||COALESCE(OLD.ID_ESTADO,'NULL')||','
||COALESCE(''''||OLD.ESTADO||'''','NULL')||','
||COALESCE(''''||OLD.UF||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESTADO', OLD.ID_ESTADO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ESTADO_BI0 */
CREATE TRIGGER ESTADO_BI0 FOR ESTADO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.id_estado is null or (new.id_estado = 0) ) then
    new.id_estado = gen_id(cod_up,0)||gen_id(id_estado,1);
end
^

/* Trigger: ESTADO_BI_LOG */
CREATE TRIGGER ESTADO_BI_LOG FOR ESTADO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ESTADO (ID_ESTADO,'
||' ESTADO,'
||' UF) VALUES ('
||COALESCE(NEW.ID_ESTADO,'NULL')||','
||COALESCE(''''||NEW.ESTADO||'''','NULL')||','
||COALESCE(''''||NEW.UF||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESTADO', NEW.ID_ESTADO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ESTADO_BU_LOG */
CREATE TRIGGER ESTADO_BU_LOG FOR ESTADO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ESTADO,'')<>COALESCE(OLD.ESTADO,'')) THEN TXT=TXT||',ESTADO = '||COALESCE(''''||NEW.ESTADO||'''','NULL');
IF (COALESCE(NEW.UF,'')<>COALESCE(OLD.UF,'')) THEN TXT=TXT||',UF = '||COALESCE(''''||NEW.UF||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ESTADO SET ID_ESTADO = '''||NEW.ID_ESTADO||''''||TXT||' WHERE ID_ESTADO = '''||NEW.ID_ESTADO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ESTADO', NEW.ID_ESTADO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: EVENTOS_AD_SINCRONISMO */
CREATE TRIGGER EVENTOS_AD_SINCRONISMO FOR EVENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM EVENTOS WHERE ID_EVENTOS = '||OLD.ID_EVENTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: EVENTOS_AI_SINCRONISMO */
CREATE TRIGGER EVENTOS_AI_SINCRONISMO FOR EVENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO EVENTOS (ID_EVENTOS,'
||' DESCRICAO_EVENTO,'
||' CODIGO,'
||' SUB_EVENTOS) VALUES ('
||COALESCE(NEW.ID_EVENTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_EVENTO||'''','NULL')||','
||COALESCE(NEW.CODIGO,'NULL')||','
||COALESCE(''''||NEW.SUB_EVENTOS||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: EVENTOS_AU_SINCRONISMO */
CREATE TRIGGER EVENTOS_AU_SINCRONISMO FOR EVENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_EVENTO,'')<>COALESCE(OLD.DESCRICAO_EVENTO,'')) THEN TXT=TXT||',DESCRICAO_EVENTO = '||COALESCE(''''||NEW.DESCRICAO_EVENTO||'''','NULL');
IF (COALESCE(NEW.CODIGO,'')<>COALESCE(OLD.CODIGO,'')) THEN TXT=TXT||',CODIGO = '||COALESCE(NEW.CODIGO,'NULL');
IF (COALESCE(NEW.SUB_EVENTOS,'')<>COALESCE(OLD.SUB_EVENTOS,'')) THEN TXT=TXT||',SUB_EVENTOS = '||COALESCE(''''||NEW.SUB_EVENTOS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE EVENTOS SET ID_EVENTOS = '''||NEW.ID_EVENTOS||''''||TXT||' WHERE ID_EVENTOS = '''||NEW.ID_EVENTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: EVENTOS_BD_LOG */
CREATE TRIGGER EVENTOS_BD_LOG FOR EVENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO EVENTOS (ID_EVENTOS,'
||' DESCRICAO_EVENTO,'
||' CODIGO,'
||' SUB_EVENTOS) VALUES ('
||COALESCE(OLD.ID_EVENTOS,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO_EVENTO||'''','NULL')||','
||COALESCE(OLD.CODIGO,'NULL')||','
||COALESCE(''''||OLD.SUB_EVENTOS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'EVENTOS', OLD.ID_EVENTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: EVENTOS_BI0 */
CREATE TRIGGER EVENTOS_BI0 FOR EVENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.id_eventos,0)=0) THEN
  BEGIN
    NEW.id_eventos = GEN_ID(COD_UP,0)||GEN_ID(idevento,1);
  END

END
^

/* Trigger: EVENTOS_BI_LOG */
CREATE TRIGGER EVENTOS_BI_LOG FOR EVENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO EVENTOS (ID_EVENTOS,'
||' DESCRICAO_EVENTO,'
||' CODIGO,'
||' SUB_EVENTOS) VALUES ('
||COALESCE(NEW.ID_EVENTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_EVENTO||'''','NULL')||','
||COALESCE(NEW.CODIGO,'NULL')||','
||COALESCE(''''||NEW.SUB_EVENTOS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'EVENTOS', NEW.ID_EVENTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: EVENTOS_BU_LOG */
CREATE TRIGGER EVENTOS_BU_LOG FOR EVENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_EVENTO,'')<>COALESCE(OLD.DESCRICAO_EVENTO,'')) THEN TXT=TXT||',DESCRICAO_EVENTO = '||COALESCE(''''||NEW.DESCRICAO_EVENTO||'''','NULL');
IF (COALESCE(NEW.CODIGO,'')<>COALESCE(OLD.CODIGO,'')) THEN TXT=TXT||',CODIGO = '||COALESCE(NEW.CODIGO,'NULL');
IF (COALESCE(NEW.SUB_EVENTOS,'')<>COALESCE(OLD.SUB_EVENTOS,'')) THEN TXT=TXT||',SUB_EVENTOS = '||COALESCE(''''||NEW.SUB_EVENTOS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE EVENTOS SET ID_EVENTOS = '''||NEW.ID_EVENTOS||''''||TXT||' WHERE ID_EVENTOS = '''||NEW.ID_EVENTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'EVENTOS', NEW.ID_EVENTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FALTA_DISCIPLINAR_AD_SINCRONISM */
CREATE TRIGGER FALTA_DISCIPLINAR_AD_SINCRONISM FOR FALTA_DISCIPLINAR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM FALTA_DISCIPLINAR WHERE ID_FALTA_DISCIPLINAR = '||OLD.ID_FALTA_DISCIPLINAR||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: FALTA_DISCIPLINAR_AI_SINCRONISM */
CREATE TRIGGER FALTA_DISCIPLINAR_AI_SINCRONISM FOR FALTA_DISCIPLINAR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO FALTA_DISCIPLINAR (ID_FALTA_DISCIPLINAR,'
||' FALTA_DISCIPLINAR,'
||' TEMPOREABILITACAO,'
||' TIPOFALTA) VALUES ('
||COALESCE(NEW.ID_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(''''||NEW.FALTA_DISCIPLINAR||'''','NULL')||','
||COALESCE(NEW.TEMPOREABILITACAO,'NULL')||','
||COALESCE(''''||NEW.TIPOFALTA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: FALTA_DISCIPLINAR_AU_SINCRONISM */
CREATE TRIGGER FALTA_DISCIPLINAR_AU_SINCRONISM FOR FALTA_DISCIPLINAR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.FALTA_DISCIPLINAR,'')<>COALESCE(OLD.FALTA_DISCIPLINAR,'')) THEN TXT=TXT||',FALTA_DISCIPLINAR = '||COALESCE(''''||NEW.FALTA_DISCIPLINAR||'''','NULL');
IF (COALESCE(NEW.TEMPOREABILITACAO,'')<>COALESCE(OLD.TEMPOREABILITACAO,'')) THEN TXT=TXT||',TEMPOREABILITACAO = '||COALESCE(NEW.TEMPOREABILITACAO,'NULL');
IF (COALESCE(NEW.TIPOFALTA,'')<>COALESCE(OLD.TIPOFALTA,'')) THEN TXT=TXT||',TIPOFALTA = '||COALESCE(''''||NEW.TIPOFALTA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FALTA_DISCIPLINAR SET ID_FALTA_DISCIPLINAR = '''||NEW.ID_FALTA_DISCIPLINAR||''''||TXT||' WHERE ID_FALTA_DISCIPLINAR = '''||NEW.ID_FALTA_DISCIPLINAR||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: FALTA_DISCIPLINAR_BD_LOG */
CREATE TRIGGER FALTA_DISCIPLINAR_BD_LOG FOR FALTA_DISCIPLINAR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FALTA_DISCIPLINAR (ID_FALTA_DISCIPLINAR,'
||' FALTA_DISCIPLINAR,'
||' TEMPOREABILITACAO,'
||' TIPOFALTA) VALUES ('
||COALESCE(OLD.ID_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(''''||OLD.FALTA_DISCIPLINAR||'''','NULL')||','
||COALESCE(OLD.TEMPOREABILITACAO,'NULL')||','
||COALESCE(''''||OLD.TIPOFALTA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FALTA_DISCIPLINAR', OLD.ID_FALTA_DISCIPLINAR,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FALTA_DISCIPLINAR_BI0 */
CREATE TRIGGER FALTA_DISCIPLINAR_BI0 FOR FALTA_DISCIPLINAR
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_falta_disciplinar IS null or (new.id_falta_disciplinar = 0)  ) then
    new.id_falta_disciplinar = gen_id (cod_up, 0) || gen_id (idfalta_disciplinar, 1);
end
^

/* Trigger: FALTA_DISCIPLINAR_BI_LOG */
CREATE TRIGGER FALTA_DISCIPLINAR_BI_LOG FOR FALTA_DISCIPLINAR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FALTA_DISCIPLINAR (ID_FALTA_DISCIPLINAR,'
||' FALTA_DISCIPLINAR,'
||' TEMPOREABILITACAO,'
||' TIPOFALTA) VALUES ('
||COALESCE(NEW.ID_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(''''||NEW.FALTA_DISCIPLINAR||'''','NULL')||','
||COALESCE(NEW.TEMPOREABILITACAO,'NULL')||','
||COALESCE(''''||NEW.TIPOFALTA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FALTA_DISCIPLINAR', NEW.ID_FALTA_DISCIPLINAR,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FALTA_DISCIPLINAR_BU_LOG */
CREATE TRIGGER FALTA_DISCIPLINAR_BU_LOG FOR FALTA_DISCIPLINAR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.FALTA_DISCIPLINAR,'')<>COALESCE(OLD.FALTA_DISCIPLINAR,'')) THEN TXT=TXT||',FALTA_DISCIPLINAR = '||COALESCE(''''||NEW.FALTA_DISCIPLINAR||'''','NULL');
IF (COALESCE(NEW.TEMPOREABILITACAO,'')<>COALESCE(OLD.TEMPOREABILITACAO,'')) THEN TXT=TXT||',TEMPOREABILITACAO = '||COALESCE(NEW.TEMPOREABILITACAO,'NULL');
IF (COALESCE(NEW.TIPOFALTA,'')<>COALESCE(OLD.TIPOFALTA,'')) THEN TXT=TXT||',TIPOFALTA = '||COALESCE(''''||NEW.TIPOFALTA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FALTA_DISCIPLINAR SET ID_FALTA_DISCIPLINAR = '''||NEW.ID_FALTA_DISCIPLINAR||''''||TXT||' WHERE ID_FALTA_DISCIPLINAR = '''||NEW.ID_FALTA_DISCIPLINAR||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FALTA_DISCIPLINAR', NEW.ID_FALTA_DISCIPLINAR,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FILHOS_AD_SINCRONISMO */
CREATE TRIGGER FILHOS_AD_SINCRONISMO FOR FILHOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM FILHOS WHERE IDFILHOS = '||OLD.IDFILHOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: FILHOS_AI_SINCRONISMO */
CREATE TRIGGER FILHOS_AI_SINCRONISMO FOR FILHOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO FILHOS (IDFILHOS,'
||' NOME,'
||' DATA_NASCIMENTO,'
||' ESCOLA,'
||' ENDERECO,'
||' IDCIDADE,'
||' NOME_MAE,'
||' IDINTERNO) VALUES ('
||COALESCE(NEW.IDFILHOS,'NULL')||','
||COALESCE(''''||NEW.NOME||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.ESCOLA||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(NEW.IDCIDADE,'NULL')||','
||COALESCE(''''||NEW.NOME_MAE||'''','NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: FILHOS_AU_SINCRONISMO */
CREATE TRIGGER FILHOS_AU_SINCRONISMO FOR FILHOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME,'')<>COALESCE(OLD.NOME,'')) THEN TXT=TXT||',NOME = '||COALESCE(''''||NEW.NOME||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.ESCOLA,'')<>COALESCE(OLD.ESCOLA,'')) THEN TXT=TXT||',ESCOLA = '||COALESCE(''''||NEW.ESCOLA||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.IDCIDADE,'')<>COALESCE(OLD.IDCIDADE,'')) THEN TXT=TXT||',IDCIDADE = '||COALESCE(NEW.IDCIDADE,'NULL');
IF (COALESCE(NEW.NOME_MAE,'')<>COALESCE(OLD.NOME_MAE,'')) THEN TXT=TXT||',NOME_MAE = '||COALESCE(''''||NEW.NOME_MAE||'''','NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FILHOS SET IDFILHOS = '''||NEW.IDFILHOS||''''||TXT||' WHERE IDFILHOS = '''||NEW.IDFILHOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: FILHOS_BD_LOG */
CREATE TRIGGER FILHOS_BD_LOG FOR FILHOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FILHOS (IDFILHOS,'
||' NOME,'
||' DATA_NASCIMENTO,'
||' ESCOLA,'
||' ENDERECO,'
||' IDCIDADE,'
||' NOME_MAE,'
||' IDINTERNO) VALUES ('
||COALESCE(OLD.IDFILHOS,'NULL')||','
||COALESCE(''''||OLD.NOME||'''','NULL')||','
||COALESCE(''''||OLD.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.ESCOLA||'''','NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(OLD.IDCIDADE,'NULL')||','
||COALESCE(''''||OLD.NOME_MAE||'''','NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FILHOS', OLD.IDFILHOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FILHOS_BI0 */
CREATE TRIGGER FILHOS_BI0 FOR FILHOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDFILHOS,0)=0) THEN
    NEW.IDFILHOS = GEN_ID(COD_UP,0)||GEN_ID(IDFILHOS,1);
END
^

/* Trigger: FILHOS_BI_LOG */
CREATE TRIGGER FILHOS_BI_LOG FOR FILHOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FILHOS (IDFILHOS,'
||' NOME,'
||' DATA_NASCIMENTO,'
||' ESCOLA,'
||' ENDERECO,'
||' IDCIDADE,'
||' NOME_MAE,'
||' IDINTERNO) VALUES ('
||COALESCE(NEW.IDFILHOS,'NULL')||','
||COALESCE(''''||NEW.NOME||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.ESCOLA||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(NEW.IDCIDADE,'NULL')||','
||COALESCE(''''||NEW.NOME_MAE||'''','NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FILHOS', NEW.IDFILHOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FILHOS_BU_LOG */
CREATE TRIGGER FILHOS_BU_LOG FOR FILHOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME,'')<>COALESCE(OLD.NOME,'')) THEN TXT=TXT||',NOME = '||COALESCE(''''||NEW.NOME||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.ESCOLA,'')<>COALESCE(OLD.ESCOLA,'')) THEN TXT=TXT||',ESCOLA = '||COALESCE(''''||NEW.ESCOLA||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.IDCIDADE,'')<>COALESCE(OLD.IDCIDADE,'')) THEN TXT=TXT||',IDCIDADE = '||COALESCE(NEW.IDCIDADE,'NULL');
IF (COALESCE(NEW.NOME_MAE,'')<>COALESCE(OLD.NOME_MAE,'')) THEN TXT=TXT||',NOME_MAE = '||COALESCE(''''||NEW.NOME_MAE||'''','NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FILHOS SET IDFILHOS = '''||NEW.IDFILHOS||''''||TXT||' WHERE IDFILHOS = '''||NEW.IDFILHOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FILHOS', NEW.IDFILHOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FORNECEDOR_AD_SINCRONISMO */
CREATE TRIGGER FORNECEDOR_AD_SINCRONISMO FOR FORNECEDOR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM FORNECEDOR WHERE ID_FORNECEDOR = '||OLD.ID_FORNECEDOR||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: FORNECEDOR_AI_SINCRONISMO */
CREATE TRIGGER FORNECEDOR_AI_SINCRONISMO FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO FORNECEDOR (ID_FORNECEDOR,'
||' FORNECEDOR,'
||' ENDERECO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' CEP,'
||' ID_CIDADE,'
||' CNPJ,'
||' TELEFONE,'
||' CONTATO) VALUES ('
||COALESCE(NEW.ID_FORNECEDOR,'NULL')||','
||COALESCE(''''||NEW.FORNECEDOR||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.CNPJ||'''','NULL')||','
||COALESCE(''''||NEW.TELEFONE||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: FORNECEDOR_AU_SINCRONISMO */
CREATE TRIGGER FORNECEDOR_AU_SINCRONISMO FOR FORNECEDOR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.FORNECEDOR,'')<>COALESCE(OLD.FORNECEDOR,'')) THEN TXT=TXT||',FORNECEDOR = '||COALESCE(''''||NEW.FORNECEDOR||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.CNPJ,'')<>COALESCE(OLD.CNPJ,'')) THEN TXT=TXT||',CNPJ = '||COALESCE(''''||NEW.CNPJ||'''','NULL');
IF (COALESCE(NEW.TELEFONE,'')<>COALESCE(OLD.TELEFONE,'')) THEN TXT=TXT||',TELEFONE = '||COALESCE(''''||NEW.TELEFONE||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FORNECEDOR SET ID_FORNECEDOR = '''||NEW.ID_FORNECEDOR||''''||TXT||' WHERE ID_FORNECEDOR = '''||NEW.ID_FORNECEDOR||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: FORNECEDOR_BD_LOG */
CREATE TRIGGER FORNECEDOR_BD_LOG FOR FORNECEDOR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FORNECEDOR (ID_FORNECEDOR,'
||' FORNECEDOR,'
||' ENDERECO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' CEP,'
||' ID_CIDADE,'
||' CNPJ,'
||' TELEFONE,'
||' CONTATO) VALUES ('
||COALESCE(OLD.ID_FORNECEDOR,'NULL')||','
||COALESCE(''''||OLD.FORNECEDOR||'''','NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(''''||OLD.BAIRRO||'''','NULL')||','
||COALESCE(''''||OLD.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||OLD.CEP||'''','NULL')||','
||COALESCE(OLD.ID_CIDADE,'NULL')||','
||COALESCE(''''||OLD.CNPJ||'''','NULL')||','
||COALESCE(''''||OLD.TELEFONE||'''','NULL')||','
||COALESCE(''''||OLD.CONTATO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FORNECEDOR', OLD.ID_FORNECEDOR,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FORNECEDOR_BI0 */
CREATE TRIGGER FORNECEDOR_BI0 FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 0
AS
begin
 if (NEW.id_fornecedor IS NULL or (NEW.id_fornecedor = 0) ) then
    NEW.id_fornecedor = GEN_ID(cod_up,0)||GEN_ID(idfornecedor,1);
end
^

/* Trigger: FORNECEDOR_BI_LOG */
CREATE TRIGGER FORNECEDOR_BI_LOG FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FORNECEDOR (ID_FORNECEDOR,'
||' FORNECEDOR,'
||' ENDERECO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' CEP,'
||' ID_CIDADE,'
||' CNPJ,'
||' TELEFONE,'
||' CONTATO) VALUES ('
||COALESCE(NEW.ID_FORNECEDOR,'NULL')||','
||COALESCE(''''||NEW.FORNECEDOR||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.CNPJ||'''','NULL')||','
||COALESCE(''''||NEW.TELEFONE||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FORNECEDOR', NEW.ID_FORNECEDOR,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FORNECEDOR_BU_LOG */
CREATE TRIGGER FORNECEDOR_BU_LOG FOR FORNECEDOR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.FORNECEDOR,'')<>COALESCE(OLD.FORNECEDOR,'')) THEN TXT=TXT||',FORNECEDOR = '||COALESCE(''''||NEW.FORNECEDOR||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.CNPJ,'')<>COALESCE(OLD.CNPJ,'')) THEN TXT=TXT||',CNPJ = '||COALESCE(''''||NEW.CNPJ||'''','NULL');
IF (COALESCE(NEW.TELEFONE,'')<>COALESCE(OLD.TELEFONE,'')) THEN TXT=TXT||',TELEFONE = '||COALESCE(''''||NEW.TELEFONE||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FORNECEDOR SET ID_FORNECEDOR = '''||NEW.ID_FORNECEDOR||''''||TXT||' WHERE ID_FORNECEDOR = '''||NEW.ID_FORNECEDOR||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FORNECEDOR', NEW.ID_FORNECEDOR,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FUNCAO_FUNCIONARIO_AD_SINCRONIS */
CREATE TRIGGER FUNCAO_FUNCIONARIO_AD_SINCRONIS FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM FUNCAO_FUNCIONARIO WHERE ID_FUNCAO_FUNCIONARIO = '||OLD.ID_FUNCAO_FUNCIONARIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: FUNCAO_FUNCIONARIO_AI_SINCRONIS */
CREATE TRIGGER FUNCAO_FUNCIONARIO_AI_SINCRONIS FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO FUNCAO_FUNCIONARIO (ID_FUNCAO_FUNCIONARIO,'
||' FUNCAO_FUNCIONARIO) VALUES ('
||COALESCE(NEW.ID_FUNCAO_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: FUNCAO_FUNCIONARIO_AU_SINCRONIS */
CREATE TRIGGER FUNCAO_FUNCIONARIO_AU_SINCRONIS FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.FUNCAO_FUNCIONARIO,'')<>COALESCE(OLD.FUNCAO_FUNCIONARIO,'')) THEN TXT=TXT||',FUNCAO_FUNCIONARIO = '||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FUNCAO_FUNCIONARIO SET ID_FUNCAO_FUNCIONARIO = '''||NEW.ID_FUNCAO_FUNCIONARIO||''''||TXT||' WHERE ID_FUNCAO_FUNCIONARIO = '''||NEW.ID_FUNCAO_FUNCIONARIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: FUNCAO_FUNCIONARIO_BD_LOG */
CREATE TRIGGER FUNCAO_FUNCIONARIO_BD_LOG FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FUNCAO_FUNCIONARIO (ID_FUNCAO_FUNCIONARIO,'
||' FUNCAO_FUNCIONARIO) VALUES ('
||COALESCE(OLD.ID_FUNCAO_FUNCIONARIO,'NULL')||','
||COALESCE(''''||OLD.FUNCAO_FUNCIONARIO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCAO_FUNCIONARIO', OLD.ID_FUNCAO_FUNCIONARIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FUNCAO_FUNCIONARIO_BI0 */
CREATE TRIGGER FUNCAO_FUNCIONARIO_BI0 FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_funcao_funcionario IS null or (new.id_funcao_funcionario = 0)  ) then
    new.id_funcao_funcionario = gen_id (cod_up, 0) || gen_id (id_funcao_funcionario, 1);

end
^

/* Trigger: FUNCAO_FUNCIONARIO_BI_LOG */
CREATE TRIGGER FUNCAO_FUNCIONARIO_BI_LOG FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FUNCAO_FUNCIONARIO (ID_FUNCAO_FUNCIONARIO,'
||' FUNCAO_FUNCIONARIO) VALUES ('
||COALESCE(NEW.ID_FUNCAO_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCAO_FUNCIONARIO', NEW.ID_FUNCAO_FUNCIONARIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FUNCAO_FUNCIONARIO_BU_LOG */
CREATE TRIGGER FUNCAO_FUNCIONARIO_BU_LOG FOR FUNCAO_FUNCIONARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.FUNCAO_FUNCIONARIO,'')<>COALESCE(OLD.FUNCAO_FUNCIONARIO,'')) THEN TXT=TXT||',FUNCAO_FUNCIONARIO = '||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FUNCAO_FUNCIONARIO SET ID_FUNCAO_FUNCIONARIO = '''||NEW.ID_FUNCAO_FUNCIONARIO||''''||TXT||' WHERE ID_FUNCAO_FUNCIONARIO = '''||NEW.ID_FUNCAO_FUNCIONARIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCAO_FUNCIONARIO', NEW.ID_FUNCAO_FUNCIONARIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FUNCAO_INTERNO_AD_SINCRONISMO */
CREATE TRIGGER FUNCAO_INTERNO_AD_SINCRONISMO FOR FUNCAO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM FUNCAO_INTERNO WHERE ID_FUNCAO_INTERNO = '||OLD.ID_FUNCAO_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: FUNCAO_INTERNO_AI_SINCRONISMO */
CREATE TRIGGER FUNCAO_INTERNO_AI_SINCRONISMO FOR FUNCAO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO FUNCAO_INTERNO (ID_FUNCAO_INTERNO,'
||' FUNCAO_INTERNO) VALUES ('
||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.FUNCAO_INTERNO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: FUNCAO_INTERNO_AU_SINCRONISMO */
CREATE TRIGGER FUNCAO_INTERNO_AU_SINCRONISMO FOR FUNCAO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.FUNCAO_INTERNO,'')<>COALESCE(OLD.FUNCAO_INTERNO,'')) THEN TXT=TXT||',FUNCAO_INTERNO = '||COALESCE(''''||NEW.FUNCAO_INTERNO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FUNCAO_INTERNO SET ID_FUNCAO_INTERNO = '''||NEW.ID_FUNCAO_INTERNO||''''||TXT||' WHERE ID_FUNCAO_INTERNO = '''||NEW.ID_FUNCAO_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: FUNCAO_INTERNO_BD_LOG */
CREATE TRIGGER FUNCAO_INTERNO_BD_LOG FOR FUNCAO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FUNCAO_INTERNO (ID_FUNCAO_INTERNO,'
||' FUNCAO_INTERNO) VALUES ('
||COALESCE(OLD.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||OLD.FUNCAO_INTERNO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCAO_INTERNO', OLD.ID_FUNCAO_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FUNCAO_INTERNO_BI0 */
CREATE TRIGGER FUNCAO_INTERNO_BI0 FOR FUNCAO_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_funcao_interno IS null or (new.id_funcao_interno = 0)  ) then
    new.id_funcao_interno = gen_id (cod_up, 0) || gen_id (id_funcao_interno, 1);
end
^

/* Trigger: FUNCAO_INTERNO_BI_LOG */
CREATE TRIGGER FUNCAO_INTERNO_BI_LOG FOR FUNCAO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FUNCAO_INTERNO (ID_FUNCAO_INTERNO,'
||' FUNCAO_INTERNO) VALUES ('
||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.FUNCAO_INTERNO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCAO_INTERNO', NEW.ID_FUNCAO_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FUNCAO_INTERNO_BU_LOG */
CREATE TRIGGER FUNCAO_INTERNO_BU_LOG FOR FUNCAO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.FUNCAO_INTERNO,'')<>COALESCE(OLD.FUNCAO_INTERNO,'')) THEN TXT=TXT||',FUNCAO_INTERNO = '||COALESCE(''''||NEW.FUNCAO_INTERNO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FUNCAO_INTERNO SET ID_FUNCAO_INTERNO = '''||NEW.ID_FUNCAO_INTERNO||''''||TXT||' WHERE ID_FUNCAO_INTERNO = '''||NEW.ID_FUNCAO_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCAO_INTERNO', NEW.ID_FUNCAO_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FUNCIONARIO_AD_SINCRONISMO */
CREATE TRIGGER FUNCIONARIO_AD_SINCRONISMO FOR FUNCIONARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM FUNCIONARIO WHERE ID_FUNCIONARIO = '||OLD.ID_FUNCIONARIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: FUNCIONARIO_AI_SINCRONISMO */
CREATE TRIGGER FUNCIONARIO_AI_SINCRONISMO FOR FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO FUNCIONARIO (ID_FUNCIONARIO,'
||' NOME_FUNCIONARIO,'
||' MATRICULA,'
||' SENHA,'
||' CPF,'
||' ID_FUNCAO,'
||' LOGIN,'
||' ID_UP,'
||' PERMISSAO_CONFERE,'
||' PERMISSAO_VISITANTE,'
||' PERMISSAO_SETORTRABALHO,'
||' PERMISSAO_SETOREDUCACAO,'
||' CONFIGURACOES,'
||' FUNCAO_TEMP,'
||' FUNCAO,'
||' ADMISSAO,'
||' CLASSE,'
||' MAE,'
||' PAI,'
||' RG,'
||' ORGAOEMISSOR,'
||' FATORRH,'
||' ID_NATURALIDADE,'
||' DTNASCIMENTO,'
||' CARGO,'
||' AREA,'
||' IMPRIMIR,'
||' ENDERECO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' ID_CIDADE,'
||' CEP,'
||' FONE,'
||' CELULAR,'
||' EMAIL,'
||' NUMERO,'
||' DATA_LOTACAO,'
||' ESCOLARIDADE,'
||' SEXO,'
||' PLANTAO_EXPEDIENTE,'
||' NFUNCIONAL,'
||' PERMISSAO_CADASTRO,'
||' PERMISSAO_PSICOSSOCIAL,'
||' PERMISSAO_JURIDICA,'
||' PERMISSAO_DISCIPLINA,'
||' DIRETORIO_RELATORIO,'
||' IDPOSTO_TRABALHO,'
||' ID_CURSO,'
||' PERMISSAO_CLINICAMEDICA,'
||' PERMISSAO_ENFERMAGEM,'
||' PERMISSAO_FARMACIA,'
||' PERMISSAO_PSIQUIATRIA,'
||' PERMISSAO_SERVICOSOCIAL,'
||' PERMISSAO_TERAPIAOCUPACIONAL,'
||' PERMISSAO_ODONTOLOGIA,'
||' PERMISSAO_PEDAGOGIA,'
||' PERMISSAO_PSICOLOGIA,'
||' PERMISSAO_SAUDE,'
||' VISUALIZA_OUTRAS_UP,'
||' PERMISSAO_INTELIGENCIA,'
||' AUTORIZADO_DELPHI,'
||' AUTORIZADO_WEB,'
||' SENHA_WEB,'
||' PERMISSAO_ARMAS) VALUES ('
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.NOME_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.MATRICULA||'''','NULL')||','
||COALESCE(''''||NEW.SENHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(NEW.ID_FUNCAO,'NULL')||','
||COALESCE(''''||NEW.LOGIN||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.PERMISSAO_CONFERE||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_VISITANTE||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SETORTRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SETOREDUCACAO||'''','NULL')||','
||COALESCE(''''||NEW.CONFIGURACOES||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO_TEMP||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO||'''','NULL')||','
||COALESCE(''''||NEW.ADMISSAO||'''','NULL')||','
||COALESCE(''''||NEW.CLASSE||'''','NULL')||','
||COALESCE(''''||NEW.MAE||'''','NULL')||','
||COALESCE(''''||NEW.PAI||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAOEMISSOR||'''','NULL')||','
||COALESCE(''''||NEW.FATORRH||'''','NULL')||','
||COALESCE(NEW.ID_NATURALIDADE,'NULL')||','
||COALESCE(''''||NEW.DTNASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.CARGO||'''','NULL')||','
||COALESCE(''''||NEW.AREA||'''','NULL')||','
||COALESCE(''''||NEW.IMPRIMIR||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CELULAR||'''','NULL')||','
||COALESCE(''''||NEW.EMAIL||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_LOTACAO||'''','NULL')||','
||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.PLANTAO_EXPEDIENTE||'''','NULL')||','
||COALESCE(NEW.NFUNCIONAL,'NULL')||','
||COALESCE(''''||NEW.PERMISSAO_CADASTRO||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PSICOSSOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_JURIDICA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_DISCIPLINA||'''','NULL')||','
||COALESCE(''''||NEW.DIRETORIO_RELATORIO||'''','NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_CURSO,'NULL')||','
||COALESCE(''''||NEW.PERMISSAO_CLINICAMEDICA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_ENFERMAGEM||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_FARMACIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PSIQUIATRIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SERVICOSOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_TERAPIAOCUPACIONAL||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_ODONTOLOGIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PEDAGOGIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PSICOLOGIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SAUDE||'''','NULL')||','
||COALESCE(''''||NEW.VISUALIZA_OUTRAS_UP||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_INTELIGENCIA||'''','NULL')||','
||COALESCE(''''||NEW.AUTORIZADO_DELPHI||'''','NULL')||','
||COALESCE(''''||NEW.AUTORIZADO_WEB||'''','NULL')||','
||COALESCE(''''||NEW.SENHA_WEB||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_ARMAS||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: FUNCIONARIO_AU_SINCRONISMO */
CREATE TRIGGER FUNCIONARIO_AU_SINCRONISMO FOR FUNCIONARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME_FUNCIONARIO,'')<>COALESCE(OLD.NOME_FUNCIONARIO,'')) THEN TXT=TXT||',NOME_FUNCIONARIO = '||COALESCE(''''||NEW.NOME_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.MATRICULA,'')<>COALESCE(OLD.MATRICULA,'')) THEN TXT=TXT||',MATRICULA = '||COALESCE(''''||NEW.MATRICULA||'''','NULL');
IF (COALESCE(NEW.SENHA,'')<>COALESCE(OLD.SENHA,'')) THEN TXT=TXT||',SENHA = '||COALESCE(''''||NEW.SENHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.ID_FUNCAO,'')<>COALESCE(OLD.ID_FUNCAO,'')) THEN TXT=TXT||',ID_FUNCAO = '||COALESCE(NEW.ID_FUNCAO,'NULL');
IF (COALESCE(NEW.LOGIN,'')<>COALESCE(OLD.LOGIN,'')) THEN TXT=TXT||',LOGIN = '||COALESCE(''''||NEW.LOGIN||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.PERMISSAO_CONFERE,'')<>COALESCE(OLD.PERMISSAO_CONFERE,'')) THEN TXT=TXT||',PERMISSAO_CONFERE = '||COALESCE(''''||NEW.PERMISSAO_CONFERE||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_VISITANTE,'')<>COALESCE(OLD.PERMISSAO_VISITANTE,'')) THEN TXT=TXT||',PERMISSAO_VISITANTE = '||COALESCE(''''||NEW.PERMISSAO_VISITANTE||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SETORTRABALHO,'')<>COALESCE(OLD.PERMISSAO_SETORTRABALHO,'')) THEN TXT=TXT||',PERMISSAO_SETORTRABALHO = '||COALESCE(''''||NEW.PERMISSAO_SETORTRABALHO||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SETOREDUCACAO,'')<>COALESCE(OLD.PERMISSAO_SETOREDUCACAO,'')) THEN TXT=TXT||',PERMISSAO_SETOREDUCACAO = '||COALESCE(''''||NEW.PERMISSAO_SETOREDUCACAO||'''','NULL');
IF (COALESCE(NEW.CONFIGURACOES,'')<>COALESCE(OLD.CONFIGURACOES,'')) THEN TXT=TXT||',CONFIGURACOES = '||COALESCE(''''||NEW.CONFIGURACOES||'''','NULL');
IF (COALESCE(NEW.FUNCAO_TEMP,'')<>COALESCE(OLD.FUNCAO_TEMP,'')) THEN TXT=TXT||',FUNCAO_TEMP = '||COALESCE(''''||NEW.FUNCAO_TEMP||'''','NULL');
IF (COALESCE(NEW.FUNCAO,'')<>COALESCE(OLD.FUNCAO,'')) THEN TXT=TXT||',FUNCAO = '||COALESCE(''''||NEW.FUNCAO||'''','NULL');
IF (COALESCE(NEW.ADMISSAO,'')<>COALESCE(OLD.ADMISSAO,'')) THEN TXT=TXT||',ADMISSAO = '||COALESCE(''''||NEW.ADMISSAO||'''','NULL');
IF (COALESCE(NEW.CLASSE,'')<>COALESCE(OLD.CLASSE,'')) THEN TXT=TXT||',CLASSE = '||COALESCE(''''||NEW.CLASSE||'''','NULL');
IF (COALESCE(NEW.MAE,'')<>COALESCE(OLD.MAE,'')) THEN TXT=TXT||',MAE = '||COALESCE(''''||NEW.MAE||'''','NULL');
IF (COALESCE(NEW.PAI,'')<>COALESCE(OLD.PAI,'')) THEN TXT=TXT||',PAI = '||COALESCE(''''||NEW.PAI||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAOEMISSOR,'')<>COALESCE(OLD.ORGAOEMISSOR,'')) THEN TXT=TXT||',ORGAOEMISSOR = '||COALESCE(''''||NEW.ORGAOEMISSOR||'''','NULL');
IF (COALESCE(NEW.FATORRH,'')<>COALESCE(OLD.FATORRH,'')) THEN TXT=TXT||',FATORRH = '||COALESCE(''''||NEW.FATORRH||'''','NULL');
IF (COALESCE(NEW.ID_NATURALIDADE,'')<>COALESCE(OLD.ID_NATURALIDADE,'')) THEN TXT=TXT||',ID_NATURALIDADE = '||COALESCE(NEW.ID_NATURALIDADE,'NULL');
IF (COALESCE(NEW.DTNASCIMENTO,'')<>COALESCE(OLD.DTNASCIMENTO,'')) THEN TXT=TXT||',DTNASCIMENTO = '||COALESCE(''''||NEW.DTNASCIMENTO||'''','NULL');
IF (COALESCE(NEW.CARGO,'')<>COALESCE(OLD.CARGO,'')) THEN TXT=TXT||',CARGO = '||COALESCE(''''||NEW.CARGO||'''','NULL');
IF (COALESCE(NEW.AREA,'')<>COALESCE(OLD.AREA,'')) THEN TXT=TXT||',AREA = '||COALESCE(''''||NEW.AREA||'''','NULL');
IF (COALESCE(NEW.IMPRIMIR,'')<>COALESCE(OLD.IMPRIMIR,'')) THEN TXT=TXT||',IMPRIMIR = '||COALESCE(''''||NEW.IMPRIMIR||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CELULAR,'')<>COALESCE(OLD.CELULAR,'')) THEN TXT=TXT||',CELULAR = '||COALESCE(''''||NEW.CELULAR||'''','NULL');
IF (COALESCE(NEW.EMAIL,'')<>COALESCE(OLD.EMAIL,'')) THEN TXT=TXT||',EMAIL = '||COALESCE(''''||NEW.EMAIL||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.DATA_LOTACAO,'')<>COALESCE(OLD.DATA_LOTACAO,'')) THEN TXT=TXT||',DATA_LOTACAO = '||COALESCE(''''||NEW.DATA_LOTACAO||'''','NULL');
IF (COALESCE(NEW.ESCOLARIDADE,'')<>COALESCE(OLD.ESCOLARIDADE,'')) THEN TXT=TXT||',ESCOLARIDADE = '||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.PLANTAO_EXPEDIENTE,'')<>COALESCE(OLD.PLANTAO_EXPEDIENTE,'')) THEN TXT=TXT||',PLANTAO_EXPEDIENTE = '||COALESCE(''''||NEW.PLANTAO_EXPEDIENTE||'''','NULL');
IF (COALESCE(NEW.NFUNCIONAL,'')<>COALESCE(OLD.NFUNCIONAL,'')) THEN TXT=TXT||',NFUNCIONAL = '||COALESCE(NEW.NFUNCIONAL,'NULL');
IF (COALESCE(NEW.PERMISSAO_CADASTRO,'')<>COALESCE(OLD.PERMISSAO_CADASTRO,'')) THEN TXT=TXT||',PERMISSAO_CADASTRO = '||COALESCE(''''||NEW.PERMISSAO_CADASTRO||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PSICOSSOCIAL,'')<>COALESCE(OLD.PERMISSAO_PSICOSSOCIAL,'')) THEN TXT=TXT||',PERMISSAO_PSICOSSOCIAL = '||COALESCE(''''||NEW.PERMISSAO_PSICOSSOCIAL||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_JURIDICA,'')<>COALESCE(OLD.PERMISSAO_JURIDICA,'')) THEN TXT=TXT||',PERMISSAO_JURIDICA = '||COALESCE(''''||NEW.PERMISSAO_JURIDICA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_DISCIPLINA,'')<>COALESCE(OLD.PERMISSAO_DISCIPLINA,'')) THEN TXT=TXT||',PERMISSAO_DISCIPLINA = '||COALESCE(''''||NEW.PERMISSAO_DISCIPLINA||'''','NULL');
IF (COALESCE(NEW.DIRETORIO_RELATORIO,'')<>COALESCE(OLD.DIRETORIO_RELATORIO,'')) THEN TXT=TXT||',DIRETORIO_RELATORIO = '||COALESCE(''''||NEW.DIRETORIO_RELATORIO||'''','NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_CURSO,'')<>COALESCE(OLD.ID_CURSO,'')) THEN TXT=TXT||',ID_CURSO = '||COALESCE(NEW.ID_CURSO,'NULL');
IF (COALESCE(NEW.PERMISSAO_CLINICAMEDICA,'')<>COALESCE(OLD.PERMISSAO_CLINICAMEDICA,'')) THEN TXT=TXT||',PERMISSAO_CLINICAMEDICA = '||COALESCE(''''||NEW.PERMISSAO_CLINICAMEDICA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_ENFERMAGEM,'')<>COALESCE(OLD.PERMISSAO_ENFERMAGEM,'')) THEN TXT=TXT||',PERMISSAO_ENFERMAGEM = '||COALESCE(''''||NEW.PERMISSAO_ENFERMAGEM||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_FARMACIA,'')<>COALESCE(OLD.PERMISSAO_FARMACIA,'')) THEN TXT=TXT||',PERMISSAO_FARMACIA = '||COALESCE(''''||NEW.PERMISSAO_FARMACIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PSIQUIATRIA,'')<>COALESCE(OLD.PERMISSAO_PSIQUIATRIA,'')) THEN TXT=TXT||',PERMISSAO_PSIQUIATRIA = '||COALESCE(''''||NEW.PERMISSAO_PSIQUIATRIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SERVICOSOCIAL,'')<>COALESCE(OLD.PERMISSAO_SERVICOSOCIAL,'')) THEN TXT=TXT||',PERMISSAO_SERVICOSOCIAL = '||COALESCE(''''||NEW.PERMISSAO_SERVICOSOCIAL||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_TERAPIAOCUPACIONAL,'')<>COALESCE(OLD.PERMISSAO_TERAPIAOCUPACIONAL,'')) THEN TXT=TXT||',PERMISSAO_TERAPIAOCUPACIONAL = '||COALESCE(''''||NEW.PERMISSAO_TERAPIAOCUPACIONAL||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_ODONTOLOGIA,'')<>COALESCE(OLD.PERMISSAO_ODONTOLOGIA,'')) THEN TXT=TXT||',PERMISSAO_ODONTOLOGIA = '||COALESCE(''''||NEW.PERMISSAO_ODONTOLOGIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PEDAGOGIA,'')<>COALESCE(OLD.PERMISSAO_PEDAGOGIA,'')) THEN TXT=TXT||',PERMISSAO_PEDAGOGIA = '||COALESCE(''''||NEW.PERMISSAO_PEDAGOGIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PSICOLOGIA,'')<>COALESCE(OLD.PERMISSAO_PSICOLOGIA,'')) THEN TXT=TXT||',PERMISSAO_PSICOLOGIA = '||COALESCE(''''||NEW.PERMISSAO_PSICOLOGIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SAUDE,'')<>COALESCE(OLD.PERMISSAO_SAUDE,'')) THEN TXT=TXT||',PERMISSAO_SAUDE = '||COALESCE(''''||NEW.PERMISSAO_SAUDE||'''','NULL');
IF (COALESCE(NEW.VISUALIZA_OUTRAS_UP,'')<>COALESCE(OLD.VISUALIZA_OUTRAS_UP,'')) THEN TXT=TXT||',VISUALIZA_OUTRAS_UP = '||COALESCE(''''||NEW.VISUALIZA_OUTRAS_UP||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_INTELIGENCIA,'')<>COALESCE(OLD.PERMISSAO_INTELIGENCIA,'')) THEN TXT=TXT||',PERMISSAO_INTELIGENCIA = '||COALESCE(''''||NEW.PERMISSAO_INTELIGENCIA||'''','NULL');
IF (COALESCE(NEW.AUTORIZADO_DELPHI,'')<>COALESCE(OLD.AUTORIZADO_DELPHI,'')) THEN TXT=TXT||',AUTORIZADO_DELPHI = '||COALESCE(''''||NEW.AUTORIZADO_DELPHI||'''','NULL');
IF (COALESCE(NEW.AUTORIZADO_WEB,'')<>COALESCE(OLD.AUTORIZADO_WEB,'')) THEN TXT=TXT||',AUTORIZADO_WEB = '||COALESCE(''''||NEW.AUTORIZADO_WEB||'''','NULL');
IF (COALESCE(NEW.SENHA_WEB,'')<>COALESCE(OLD.SENHA_WEB,'')) THEN TXT=TXT||',SENHA_WEB = '||COALESCE(''''||NEW.SENHA_WEB||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_ARMAS,'')<>COALESCE(OLD.PERMISSAO_ARMAS,'')) THEN TXT=TXT||',PERMISSAO_ARMAS = '||COALESCE(''''||NEW.PERMISSAO_ARMAS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FUNCIONARIO SET ID_FUNCIONARIO = '''||NEW.ID_FUNCIONARIO||''''||TXT||' WHERE ID_FUNCIONARIO = '''||NEW.ID_FUNCIONARIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: FUNCIONARIO_BD_LOG */
CREATE TRIGGER FUNCIONARIO_BD_LOG FOR FUNCIONARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FUNCIONARIO (ID_FUNCIONARIO,'
||' NOME_FUNCIONARIO,'
||' MATRICULA,'
||' SENHA,'
||' CPF,'
||' ID_FUNCAO,'
||' LOGIN,'
||' ID_UP,'
||' PERMISSAO_CONFERE,'
||' PERMISSAO_VISITANTE,'
||' PERMISSAO_SETORTRABALHO,'
||' PERMISSAO_SETOREDUCACAO,'
||' CONFIGURACOES,'
||' FUNCAO_TEMP,'
||' FUNCAO,'
||' ADMISSAO,'
||' CLASSE,'
||' MAE,'
||' PAI,'
||' RG,'
||' ORGAOEMISSOR,'
||' FATORRH,'
||' ID_NATURALIDADE,'
||' DTNASCIMENTO,'
||' CARGO,'
||' AREA,'
||' IMPRIMIR,'
||' ENDERECO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' ID_CIDADE,'
||' CEP,'
||' FONE,'
||' CELULAR,'
||' EMAIL,'
||' NUMERO,'
||' DATA_LOTACAO,'
||' ESCOLARIDADE,'
||' SEXO,'
||' PLANTAO_EXPEDIENTE,'
||' NFUNCIONAL,'
||' PERMISSAO_CADASTRO,'
||' PERMISSAO_PSICOSSOCIAL,'
||' PERMISSAO_JURIDICA,'
||' PERMISSAO_DISCIPLINA,'
||' DIRETORIO_RELATORIO,'
||' IDPOSTO_TRABALHO,'
||' ID_CURSO,'
||' PERMISSAO_CLINICAMEDICA,'
||' PERMISSAO_ENFERMAGEM,'
||' PERMISSAO_FARMACIA,'
||' PERMISSAO_PSIQUIATRIA,'
||' PERMISSAO_SERVICOSOCIAL,'
||' PERMISSAO_TERAPIAOCUPACIONAL,'
||' PERMISSAO_ODONTOLOGIA,'
||' PERMISSAO_PEDAGOGIA,'
||' PERMISSAO_PSICOLOGIA,'
||' PERMISSAO_SAUDE,'
||' VISUALIZA_OUTRAS_UP,'
||' PERMISSAO_INTELIGENCIA,'
||' AUTORIZADO_DELPHI,'
||' AUTORIZADO_WEB,'
||' SENHA_WEB,'
||' PERMISSAO_ARMAS) VALUES ('
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||OLD.NOME_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||OLD.MATRICULA||'''','NULL')||','
||COALESCE(''''||OLD.SENHA||'''','NULL')||','
||COALESCE(''''||OLD.CPF||'''','NULL')||','
||COALESCE(OLD.ID_FUNCAO,'NULL')||','
||COALESCE(''''||OLD.LOGIN||'''','NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(''''||OLD.PERMISSAO_CONFERE||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_VISITANTE||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_SETORTRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_SETOREDUCACAO||'''','NULL')||','
||COALESCE(''''||OLD.CONFIGURACOES||'''','NULL')||','
||COALESCE(''''||OLD.FUNCAO_TEMP||'''','NULL')||','
||COALESCE(''''||OLD.FUNCAO||'''','NULL')||','
||COALESCE(''''||OLD.ADMISSAO||'''','NULL')||','
||COALESCE(''''||OLD.CLASSE||'''','NULL')||','
||COALESCE(''''||OLD.MAE||'''','NULL')||','
||COALESCE(''''||OLD.PAI||'''','NULL')||','
||COALESCE(''''||OLD.RG||'''','NULL')||','
||COALESCE(''''||OLD.ORGAOEMISSOR||'''','NULL')||','
||COALESCE(''''||OLD.FATORRH||'''','NULL')||','
||COALESCE(OLD.ID_NATURALIDADE,'NULL')||','
||COALESCE(''''||OLD.DTNASCIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.CARGO||'''','NULL')||','
||COALESCE(''''||OLD.AREA||'''','NULL')||','
||COALESCE(''''||OLD.IMPRIMIR||'''','NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(''''||OLD.BAIRRO||'''','NULL')||','
||COALESCE(''''||OLD.COMPLEMENTO||'''','NULL')||','
||COALESCE(OLD.ID_CIDADE,'NULL')||','
||COALESCE(''''||OLD.CEP||'''','NULL')||','
||COALESCE(''''||OLD.FONE||'''','NULL')||','
||COALESCE(''''||OLD.CELULAR||'''','NULL')||','
||COALESCE(''''||OLD.EMAIL||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_LOTACAO||'''','NULL')||','
||COALESCE(''''||OLD.ESCOLARIDADE||'''','NULL')||','
||COALESCE(''''||OLD.SEXO||'''','NULL')||','
||COALESCE(''''||OLD.PLANTAO_EXPEDIENTE||'''','NULL')||','
||COALESCE(OLD.NFUNCIONAL,'NULL')||','
||COALESCE(''''||OLD.PERMISSAO_CADASTRO||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_PSICOSSOCIAL||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_JURIDICA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_DISCIPLINA||'''','NULL')||','
||COALESCE(''''||OLD.DIRETORIO_RELATORIO||'''','NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_CURSO,'NULL')||','
||COALESCE(''''||OLD.PERMISSAO_CLINICAMEDICA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_ENFERMAGEM||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_FARMACIA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_PSIQUIATRIA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_SERVICOSOCIAL||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_TERAPIAOCUPACIONAL||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_ODONTOLOGIA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_PEDAGOGIA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_PSICOLOGIA||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_SAUDE||'''','NULL')||','
||COALESCE(''''||OLD.VISUALIZA_OUTRAS_UP||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_INTELIGENCIA||'''','NULL')||','
||COALESCE(''''||OLD.AUTORIZADO_DELPHI||'''','NULL')||','
||COALESCE(''''||OLD.AUTORIZADO_WEB||'''','NULL')||','
||COALESCE(''''||OLD.SENHA_WEB||'''','NULL')||','
||COALESCE(''''||OLD.PERMISSAO_ARMAS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCIONARIO', OLD.ID_FUNCIONARIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FUNCIONARIO_BI0 */
CREATE TRIGGER FUNCIONARIO_BI0 FOR FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
  if (NEW.id_funcionario IS null or (new.id_funcionario = 0)  ) then
    new.id_funcionario = gen_id (cod_up, 0) || gen_id (id_funcionario, 1);
end
^

/* Trigger: FUNCIONARIO_BI_LOG */
CREATE TRIGGER FUNCIONARIO_BI_LOG FOR FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO FUNCIONARIO (ID_FUNCIONARIO,'
||' NOME_FUNCIONARIO,'
||' MATRICULA,'
||' SENHA,'
||' CPF,'
||' ID_FUNCAO,'
||' LOGIN,'
||' ID_UP,'
||' PERMISSAO_CONFERE,'
||' PERMISSAO_VISITANTE,'
||' PERMISSAO_SETORTRABALHO,'
||' PERMISSAO_SETOREDUCACAO,'
||' CONFIGURACOES,'
||' FUNCAO_TEMP,'
||' FUNCAO,'
||' ADMISSAO,'
||' CLASSE,'
||' MAE,'
||' PAI,'
||' RG,'
||' ORGAOEMISSOR,'
||' FATORRH,'
||' ID_NATURALIDADE,'
||' DTNASCIMENTO,'
||' CARGO,'
||' AREA,'
||' IMPRIMIR,'
||' ENDERECO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' ID_CIDADE,'
||' CEP,'
||' FONE,'
||' CELULAR,'
||' EMAIL,'
||' NUMERO,'
||' DATA_LOTACAO,'
||' ESCOLARIDADE,'
||' SEXO,'
||' PLANTAO_EXPEDIENTE,'
||' NFUNCIONAL,'
||' PERMISSAO_CADASTRO,'
||' PERMISSAO_PSICOSSOCIAL,'
||' PERMISSAO_JURIDICA,'
||' PERMISSAO_DISCIPLINA,'
||' DIRETORIO_RELATORIO,'
||' IDPOSTO_TRABALHO,'
||' ID_CURSO,'
||' PERMISSAO_CLINICAMEDICA,'
||' PERMISSAO_ENFERMAGEM,'
||' PERMISSAO_FARMACIA,'
||' PERMISSAO_PSIQUIATRIA,'
||' PERMISSAO_SERVICOSOCIAL,'
||' PERMISSAO_TERAPIAOCUPACIONAL,'
||' PERMISSAO_ODONTOLOGIA,'
||' PERMISSAO_PEDAGOGIA,'
||' PERMISSAO_PSICOLOGIA,'
||' PERMISSAO_SAUDE,'
||' VISUALIZA_OUTRAS_UP,'
||' PERMISSAO_INTELIGENCIA,'
||' AUTORIZADO_DELPHI,'
||' AUTORIZADO_WEB,'
||' SENHA_WEB,'
||' PERMISSAO_ARMAS) VALUES ('
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.NOME_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.MATRICULA||'''','NULL')||','
||COALESCE(''''||NEW.SENHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(NEW.ID_FUNCAO,'NULL')||','
||COALESCE(''''||NEW.LOGIN||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.PERMISSAO_CONFERE||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_VISITANTE||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SETORTRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SETOREDUCACAO||'''','NULL')||','
||COALESCE(''''||NEW.CONFIGURACOES||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO_TEMP||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO||'''','NULL')||','
||COALESCE(''''||NEW.ADMISSAO||'''','NULL')||','
||COALESCE(''''||NEW.CLASSE||'''','NULL')||','
||COALESCE(''''||NEW.MAE||'''','NULL')||','
||COALESCE(''''||NEW.PAI||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAOEMISSOR||'''','NULL')||','
||COALESCE(''''||NEW.FATORRH||'''','NULL')||','
||COALESCE(NEW.ID_NATURALIDADE,'NULL')||','
||COALESCE(''''||NEW.DTNASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.CARGO||'''','NULL')||','
||COALESCE(''''||NEW.AREA||'''','NULL')||','
||COALESCE(''''||NEW.IMPRIMIR||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CELULAR||'''','NULL')||','
||COALESCE(''''||NEW.EMAIL||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_LOTACAO||'''','NULL')||','
||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.PLANTAO_EXPEDIENTE||'''','NULL')||','
||COALESCE(NEW.NFUNCIONAL,'NULL')||','
||COALESCE(''''||NEW.PERMISSAO_CADASTRO||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PSICOSSOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_JURIDICA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_DISCIPLINA||'''','NULL')||','
||COALESCE(''''||NEW.DIRETORIO_RELATORIO||'''','NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_CURSO,'NULL')||','
||COALESCE(''''||NEW.PERMISSAO_CLINICAMEDICA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_ENFERMAGEM||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_FARMACIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PSIQUIATRIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SERVICOSOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_TERAPIAOCUPACIONAL||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_ODONTOLOGIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PEDAGOGIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_PSICOLOGIA||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_SAUDE||'''','NULL')||','
||COALESCE(''''||NEW.VISUALIZA_OUTRAS_UP||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_INTELIGENCIA||'''','NULL')||','
||COALESCE(''''||NEW.AUTORIZADO_DELPHI||'''','NULL')||','
||COALESCE(''''||NEW.AUTORIZADO_WEB||'''','NULL')||','
||COALESCE(''''||NEW.SENHA_WEB||'''','NULL')||','
||COALESCE(''''||NEW.PERMISSAO_ARMAS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCIONARIO', NEW.ID_FUNCIONARIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: FUNCIONARIO_BU_LOG */
CREATE TRIGGER FUNCIONARIO_BU_LOG FOR FUNCIONARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME_FUNCIONARIO,'')<>COALESCE(OLD.NOME_FUNCIONARIO,'')) THEN TXT=TXT||',NOME_FUNCIONARIO = '||COALESCE(''''||NEW.NOME_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.MATRICULA,'')<>COALESCE(OLD.MATRICULA,'')) THEN TXT=TXT||',MATRICULA = '||COALESCE(''''||NEW.MATRICULA||'''','NULL');
IF (COALESCE(NEW.SENHA,'')<>COALESCE(OLD.SENHA,'')) THEN TXT=TXT||',SENHA = '||COALESCE(''''||NEW.SENHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.ID_FUNCAO,'')<>COALESCE(OLD.ID_FUNCAO,'')) THEN TXT=TXT||',ID_FUNCAO = '||COALESCE(NEW.ID_FUNCAO,'NULL');
IF (COALESCE(NEW.LOGIN,'')<>COALESCE(OLD.LOGIN,'')) THEN TXT=TXT||',LOGIN = '||COALESCE(''''||NEW.LOGIN||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.PERMISSAO_CONFERE,'')<>COALESCE(OLD.PERMISSAO_CONFERE,'')) THEN TXT=TXT||',PERMISSAO_CONFERE = '||COALESCE(''''||NEW.PERMISSAO_CONFERE||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_VISITANTE,'')<>COALESCE(OLD.PERMISSAO_VISITANTE,'')) THEN TXT=TXT||',PERMISSAO_VISITANTE = '||COALESCE(''''||NEW.PERMISSAO_VISITANTE||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SETORTRABALHO,'')<>COALESCE(OLD.PERMISSAO_SETORTRABALHO,'')) THEN TXT=TXT||',PERMISSAO_SETORTRABALHO = '||COALESCE(''''||NEW.PERMISSAO_SETORTRABALHO||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SETOREDUCACAO,'')<>COALESCE(OLD.PERMISSAO_SETOREDUCACAO,'')) THEN TXT=TXT||',PERMISSAO_SETOREDUCACAO = '||COALESCE(''''||NEW.PERMISSAO_SETOREDUCACAO||'''','NULL');
IF (COALESCE(NEW.CONFIGURACOES,'')<>COALESCE(OLD.CONFIGURACOES,'')) THEN TXT=TXT||',CONFIGURACOES = '||COALESCE(''''||NEW.CONFIGURACOES||'''','NULL');
IF (COALESCE(NEW.FUNCAO_TEMP,'')<>COALESCE(OLD.FUNCAO_TEMP,'')) THEN TXT=TXT||',FUNCAO_TEMP = '||COALESCE(''''||NEW.FUNCAO_TEMP||'''','NULL');
IF (COALESCE(NEW.FUNCAO,'')<>COALESCE(OLD.FUNCAO,'')) THEN TXT=TXT||',FUNCAO = '||COALESCE(''''||NEW.FUNCAO||'''','NULL');
IF (COALESCE(NEW.ADMISSAO,'')<>COALESCE(OLD.ADMISSAO,'')) THEN TXT=TXT||',ADMISSAO = '||COALESCE(''''||NEW.ADMISSAO||'''','NULL');
IF (COALESCE(NEW.CLASSE,'')<>COALESCE(OLD.CLASSE,'')) THEN TXT=TXT||',CLASSE = '||COALESCE(''''||NEW.CLASSE||'''','NULL');
IF (COALESCE(NEW.MAE,'')<>COALESCE(OLD.MAE,'')) THEN TXT=TXT||',MAE = '||COALESCE(''''||NEW.MAE||'''','NULL');
IF (COALESCE(NEW.PAI,'')<>COALESCE(OLD.PAI,'')) THEN TXT=TXT||',PAI = '||COALESCE(''''||NEW.PAI||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAOEMISSOR,'')<>COALESCE(OLD.ORGAOEMISSOR,'')) THEN TXT=TXT||',ORGAOEMISSOR = '||COALESCE(''''||NEW.ORGAOEMISSOR||'''','NULL');
IF (COALESCE(NEW.FATORRH,'')<>COALESCE(OLD.FATORRH,'')) THEN TXT=TXT||',FATORRH = '||COALESCE(''''||NEW.FATORRH||'''','NULL');
IF (COALESCE(NEW.ID_NATURALIDADE,'')<>COALESCE(OLD.ID_NATURALIDADE,'')) THEN TXT=TXT||',ID_NATURALIDADE = '||COALESCE(NEW.ID_NATURALIDADE,'NULL');
IF (COALESCE(NEW.DTNASCIMENTO,'')<>COALESCE(OLD.DTNASCIMENTO,'')) THEN TXT=TXT||',DTNASCIMENTO = '||COALESCE(''''||NEW.DTNASCIMENTO||'''','NULL');
IF (COALESCE(NEW.CARGO,'')<>COALESCE(OLD.CARGO,'')) THEN TXT=TXT||',CARGO = '||COALESCE(''''||NEW.CARGO||'''','NULL');
IF (COALESCE(NEW.AREA,'')<>COALESCE(OLD.AREA,'')) THEN TXT=TXT||',AREA = '||COALESCE(''''||NEW.AREA||'''','NULL');
IF (COALESCE(NEW.IMPRIMIR,'')<>COALESCE(OLD.IMPRIMIR,'')) THEN TXT=TXT||',IMPRIMIR = '||COALESCE(''''||NEW.IMPRIMIR||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CELULAR,'')<>COALESCE(OLD.CELULAR,'')) THEN TXT=TXT||',CELULAR = '||COALESCE(''''||NEW.CELULAR||'''','NULL');
IF (COALESCE(NEW.EMAIL,'')<>COALESCE(OLD.EMAIL,'')) THEN TXT=TXT||',EMAIL = '||COALESCE(''''||NEW.EMAIL||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.DATA_LOTACAO,'')<>COALESCE(OLD.DATA_LOTACAO,'')) THEN TXT=TXT||',DATA_LOTACAO = '||COALESCE(''''||NEW.DATA_LOTACAO||'''','NULL');
IF (COALESCE(NEW.ESCOLARIDADE,'')<>COALESCE(OLD.ESCOLARIDADE,'')) THEN TXT=TXT||',ESCOLARIDADE = '||COALESCE(''''||NEW.ESCOLARIDADE||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.PLANTAO_EXPEDIENTE,'')<>COALESCE(OLD.PLANTAO_EXPEDIENTE,'')) THEN TXT=TXT||',PLANTAO_EXPEDIENTE = '||COALESCE(''''||NEW.PLANTAO_EXPEDIENTE||'''','NULL');
IF (COALESCE(NEW.NFUNCIONAL,'')<>COALESCE(OLD.NFUNCIONAL,'')) THEN TXT=TXT||',NFUNCIONAL = '||COALESCE(NEW.NFUNCIONAL,'NULL');
IF (COALESCE(NEW.PERMISSAO_CADASTRO,'')<>COALESCE(OLD.PERMISSAO_CADASTRO,'')) THEN TXT=TXT||',PERMISSAO_CADASTRO = '||COALESCE(''''||NEW.PERMISSAO_CADASTRO||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PSICOSSOCIAL,'')<>COALESCE(OLD.PERMISSAO_PSICOSSOCIAL,'')) THEN TXT=TXT||',PERMISSAO_PSICOSSOCIAL = '||COALESCE(''''||NEW.PERMISSAO_PSICOSSOCIAL||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_JURIDICA,'')<>COALESCE(OLD.PERMISSAO_JURIDICA,'')) THEN TXT=TXT||',PERMISSAO_JURIDICA = '||COALESCE(''''||NEW.PERMISSAO_JURIDICA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_DISCIPLINA,'')<>COALESCE(OLD.PERMISSAO_DISCIPLINA,'')) THEN TXT=TXT||',PERMISSAO_DISCIPLINA = '||COALESCE(''''||NEW.PERMISSAO_DISCIPLINA||'''','NULL');
IF (COALESCE(NEW.DIRETORIO_RELATORIO,'')<>COALESCE(OLD.DIRETORIO_RELATORIO,'')) THEN TXT=TXT||',DIRETORIO_RELATORIO = '||COALESCE(''''||NEW.DIRETORIO_RELATORIO||'''','NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_CURSO,'')<>COALESCE(OLD.ID_CURSO,'')) THEN TXT=TXT||',ID_CURSO = '||COALESCE(NEW.ID_CURSO,'NULL');
IF (COALESCE(NEW.PERMISSAO_CLINICAMEDICA,'')<>COALESCE(OLD.PERMISSAO_CLINICAMEDICA,'')) THEN TXT=TXT||',PERMISSAO_CLINICAMEDICA = '||COALESCE(''''||NEW.PERMISSAO_CLINICAMEDICA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_ENFERMAGEM,'')<>COALESCE(OLD.PERMISSAO_ENFERMAGEM,'')) THEN TXT=TXT||',PERMISSAO_ENFERMAGEM = '||COALESCE(''''||NEW.PERMISSAO_ENFERMAGEM||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_FARMACIA,'')<>COALESCE(OLD.PERMISSAO_FARMACIA,'')) THEN TXT=TXT||',PERMISSAO_FARMACIA = '||COALESCE(''''||NEW.PERMISSAO_FARMACIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PSIQUIATRIA,'')<>COALESCE(OLD.PERMISSAO_PSIQUIATRIA,'')) THEN TXT=TXT||',PERMISSAO_PSIQUIATRIA = '||COALESCE(''''||NEW.PERMISSAO_PSIQUIATRIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SERVICOSOCIAL,'')<>COALESCE(OLD.PERMISSAO_SERVICOSOCIAL,'')) THEN TXT=TXT||',PERMISSAO_SERVICOSOCIAL = '||COALESCE(''''||NEW.PERMISSAO_SERVICOSOCIAL||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_TERAPIAOCUPACIONAL,'')<>COALESCE(OLD.PERMISSAO_TERAPIAOCUPACIONAL,'')) THEN TXT=TXT||',PERMISSAO_TERAPIAOCUPACIONAL = '||COALESCE(''''||NEW.PERMISSAO_TERAPIAOCUPACIONAL||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_ODONTOLOGIA,'')<>COALESCE(OLD.PERMISSAO_ODONTOLOGIA,'')) THEN TXT=TXT||',PERMISSAO_ODONTOLOGIA = '||COALESCE(''''||NEW.PERMISSAO_ODONTOLOGIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PEDAGOGIA,'')<>COALESCE(OLD.PERMISSAO_PEDAGOGIA,'')) THEN TXT=TXT||',PERMISSAO_PEDAGOGIA = '||COALESCE(''''||NEW.PERMISSAO_PEDAGOGIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_PSICOLOGIA,'')<>COALESCE(OLD.PERMISSAO_PSICOLOGIA,'')) THEN TXT=TXT||',PERMISSAO_PSICOLOGIA = '||COALESCE(''''||NEW.PERMISSAO_PSICOLOGIA||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_SAUDE,'')<>COALESCE(OLD.PERMISSAO_SAUDE,'')) THEN TXT=TXT||',PERMISSAO_SAUDE = '||COALESCE(''''||NEW.PERMISSAO_SAUDE||'''','NULL');
IF (COALESCE(NEW.VISUALIZA_OUTRAS_UP,'')<>COALESCE(OLD.VISUALIZA_OUTRAS_UP,'')) THEN TXT=TXT||',VISUALIZA_OUTRAS_UP = '||COALESCE(''''||NEW.VISUALIZA_OUTRAS_UP||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_INTELIGENCIA,'')<>COALESCE(OLD.PERMISSAO_INTELIGENCIA,'')) THEN TXT=TXT||',PERMISSAO_INTELIGENCIA = '||COALESCE(''''||NEW.PERMISSAO_INTELIGENCIA||'''','NULL');
IF (COALESCE(NEW.AUTORIZADO_DELPHI,'')<>COALESCE(OLD.AUTORIZADO_DELPHI,'')) THEN TXT=TXT||',AUTORIZADO_DELPHI = '||COALESCE(''''||NEW.AUTORIZADO_DELPHI||'''','NULL');
IF (COALESCE(NEW.AUTORIZADO_WEB,'')<>COALESCE(OLD.AUTORIZADO_WEB,'')) THEN TXT=TXT||',AUTORIZADO_WEB = '||COALESCE(''''||NEW.AUTORIZADO_WEB||'''','NULL');
IF (COALESCE(NEW.SENHA_WEB,'')<>COALESCE(OLD.SENHA_WEB,'')) THEN TXT=TXT||',SENHA_WEB = '||COALESCE(''''||NEW.SENHA_WEB||'''','NULL');
IF (COALESCE(NEW.PERMISSAO_ARMAS,'')<>COALESCE(OLD.PERMISSAO_ARMAS,'')) THEN TXT=TXT||',PERMISSAO_ARMAS = '||COALESCE(''''||NEW.PERMISSAO_ARMAS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE FUNCIONARIO SET ID_FUNCIONARIO = '''||NEW.ID_FUNCIONARIO||''''||TXT||' WHERE ID_FUNCIONARIO = '''||NEW.ID_FUNCIONARIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'FUNCIONARIO', NEW.ID_FUNCIONARIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: FUNCIONARIO_IU_SINC_BLOB */
CREATE TRIGGER FUNCIONARIO_IU_SINC_BLOB FOR FUNCIONARIO
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.FOTO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'FUNCIONARIO', 'FOTO', 'ID_FUNCIONARIO', NEW.ID_FUNCIONARIO);
        END

        IF (NEW.DIGITAL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'FUNCIONARIO', 'DIGITAL', 'ID_FUNCIONARIO', NEW.ID_FUNCIONARIO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.FOTO IS NOT NULL) THEN
        BEGIN
            IF (OLD.FOTO <> NEW.FOTO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'FUNCIONARIO', 'FOTO', 'ID_FUNCIONARIO', NEW.ID_FUNCIONARIO);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'FUNCIONARIO', 'FOTO', 'ID_FUNCIONARIO', NEW.ID_FUNCIONARIO);
        END

        IF (OLD.DIGITAL IS NOT NULL) THEN
        BEGIN
            IF (OLD.DIGITAL <> NEW.DIGITAL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'FUNCIONARIO', 'DIGITAL', 'ID_FUNCIONARIO', NEW.ID_FUNCIONARIO);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'FUNCIONARIO', 'DIGITAL', 'ID_FUNCIONARIO', NEW.ID_FUNCIONARIO);
        END

    END

   END

END
^

/* Trigger: GALERIA_AD_SINCRONISMO */
CREATE TRIGGER GALERIA_AD_SINCRONISMO FOR GALERIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM GALERIA WHERE ID_GALERIA = '||OLD.ID_GALERIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: GALERIA_AI_SINCRONISMO */
CREATE TRIGGER GALERIA_AI_SINCRONISMO FOR GALERIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO GALERIA (ID_GALERIA,'
||' GALERIA,'
||' IDPAVILHAO) VALUES ('
||COALESCE(NEW.ID_GALERIA,'NULL')||','
||COALESCE(''''||NEW.GALERIA||'''','NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: GALERIA_AU_SINCRONISMO */
CREATE TRIGGER GALERIA_AU_SINCRONISMO FOR GALERIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.GALERIA,'')<>COALESCE(OLD.GALERIA,'')) THEN TXT=TXT||',GALERIA = '||COALESCE(''''||NEW.GALERIA||'''','NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE GALERIA SET ID_GALERIA = '''||NEW.ID_GALERIA||''''||TXT||' WHERE ID_GALERIA = '''||NEW.ID_GALERIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: GALERIA_BD_LOG */
CREATE TRIGGER GALERIA_BD_LOG FOR GALERIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO GALERIA (ID_GALERIA,'
||' GALERIA,'
||' IDPAVILHAO) VALUES ('
||COALESCE(OLD.ID_GALERIA,'NULL')||','
||COALESCE(''''||OLD.GALERIA||'''','NULL')||','
||COALESCE(OLD.IDPAVILHAO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'GALERIA', OLD.ID_GALERIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: GALERIA_BI0 */
CREATE TRIGGER GALERIA_BI0 FOR GALERIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_galeria IS null or (new.id_galeria = 0)  ) then
    new.id_galeria = gen_id (cod_up, 0) || gen_id (id_galeria, 1);
end
^

/* Trigger: GALERIA_BI_LOG */
CREATE TRIGGER GALERIA_BI_LOG FOR GALERIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO GALERIA (ID_GALERIA,'
||' GALERIA,'
||' IDPAVILHAO) VALUES ('
||COALESCE(NEW.ID_GALERIA,'NULL')||','
||COALESCE(''''||NEW.GALERIA||'''','NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'GALERIA', NEW.ID_GALERIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: GALERIA_BU_LOG */
CREATE TRIGGER GALERIA_BU_LOG FOR GALERIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.GALERIA,'')<>COALESCE(OLD.GALERIA,'')) THEN TXT=TXT||',GALERIA = '||COALESCE(''''||NEW.GALERIA||'''','NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE GALERIA SET ID_GALERIA = '''||NEW.ID_GALERIA||''''||TXT||' WHERE ID_GALERIA = '''||NEW.ID_GALERIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'GALERIA', NEW.ID_GALERIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: GRAU_PARENTESCO_AD_SINCRONISMO */
CREATE TRIGGER GRAU_PARENTESCO_AD_SINCRONISMO FOR GRAU_PARENTESCO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM GRAU_PARENTESCO WHERE ID_GRAU_PARENTESCO = '||OLD.ID_GRAU_PARENTESCO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: GRAU_PARENTESCO_AI_SINCRONISMO */
CREATE TRIGGER GRAU_PARENTESCO_AI_SINCRONISMO FOR GRAU_PARENTESCO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO GRAU_PARENTESCO (ID_GRAU_PARENTESCO,'
||' GRAU_PARENTESCO) VALUES ('
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(''''||NEW.GRAU_PARENTESCO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: GRAU_PARENTESCO_AU_SINCRONISMO */
CREATE TRIGGER GRAU_PARENTESCO_AU_SINCRONISMO FOR GRAU_PARENTESCO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.GRAU_PARENTESCO,'')<>COALESCE(OLD.GRAU_PARENTESCO,'')) THEN TXT=TXT||',GRAU_PARENTESCO = '||COALESCE(''''||NEW.GRAU_PARENTESCO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE GRAU_PARENTESCO SET ID_GRAU_PARENTESCO = '''||NEW.ID_GRAU_PARENTESCO||''''||TXT||' WHERE ID_GRAU_PARENTESCO = '''||NEW.ID_GRAU_PARENTESCO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: GRAU_PARENTESCO_BD_LOG */
CREATE TRIGGER GRAU_PARENTESCO_BD_LOG FOR GRAU_PARENTESCO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO GRAU_PARENTESCO (ID_GRAU_PARENTESCO,'
||' GRAU_PARENTESCO) VALUES ('
||COALESCE(OLD.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(''''||OLD.GRAU_PARENTESCO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'GRAU_PARENTESCO', OLD.ID_GRAU_PARENTESCO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: GRAU_PARENTESCO_BI0 */
CREATE TRIGGER GRAU_PARENTESCO_BI0 FOR GRAU_PARENTESCO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_grau_parentesco IS null or (new.id_grau_parentesco = 0)  ) then
    new.id_grau_parentesco = gen_id (cod_up, 0) || gen_id (id_grau_parentesco, 1);
end
^

/* Trigger: GRAU_PARENTESCO_BI_LOG */
CREATE TRIGGER GRAU_PARENTESCO_BI_LOG FOR GRAU_PARENTESCO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO GRAU_PARENTESCO (ID_GRAU_PARENTESCO,'
||' GRAU_PARENTESCO) VALUES ('
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(''''||NEW.GRAU_PARENTESCO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'GRAU_PARENTESCO', NEW.ID_GRAU_PARENTESCO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: GRAU_PARENTESCO_BU_LOG */
CREATE TRIGGER GRAU_PARENTESCO_BU_LOG FOR GRAU_PARENTESCO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.GRAU_PARENTESCO,'')<>COALESCE(OLD.GRAU_PARENTESCO,'')) THEN TXT=TXT||',GRAU_PARENTESCO = '||COALESCE(''''||NEW.GRAU_PARENTESCO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE GRAU_PARENTESCO SET ID_GRAU_PARENTESCO = '''||NEW.ID_GRAU_PARENTESCO||''''||TXT||' WHERE ID_GRAU_PARENTESCO = '''||NEW.ID_GRAU_PARENTESCO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'GRAU_PARENTESCO', NEW.ID_GRAU_PARENTESCO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_CLINICA_MEDICA_AD_SIN */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_AD_SIN FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_CLINICA_MEDICA WHERE ID_HISTORICO_CLINICA_MEDICA = '||OLD.ID_HISTORICO_CLINICA_MEDICA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_CLINICA_MEDICA_AI_SIN */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_AI_SIN FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_CLINICA_MEDICA (ID_HISTORICO_CLINICA_MEDICA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_CLINICA_MEDICA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_CLINICA_MEDICA_AU_SIN */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_AU_SIN FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_CLINICA_MEDICA SET ID_HISTORICO_CLINICA_MEDICA = '''||NEW.ID_HISTORICO_CLINICA_MEDICA||''''||TXT||' WHERE ID_HISTORICO_CLINICA_MEDICA = '''||NEW.ID_HISTORICO_CLINICA_MEDICA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_CLINICA_MEDICA_BD_LOG */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_BD_LOG FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_CLINICA_MEDICA (ID_HISTORICO_CLINICA_MEDICA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_CLINICA_MEDICA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_CLINICA_MEDICA', OLD.ID_HISTORICO_CLINICA_MEDICA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_CLINICA_MEDICA_BI0 */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_BI0 FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_clinica_medica IS null or (new.id_historico_clinica_medica = 0)  ) then
      new.id_historico_clinica_medica = gen_id (cod_up, 0) || gen_id (idclinicamedica, 1);
end
^

/* Trigger: HISTORICO_CLINICA_MEDICA_BI_LOG */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_BI_LOG FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_CLINICA_MEDICA (ID_HISTORICO_CLINICA_MEDICA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_CLINICA_MEDICA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_CLINICA_MEDICA', NEW.ID_HISTORICO_CLINICA_MEDICA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_CLINICA_MEDICA_BU_LOG */
CREATE TRIGGER HISTORICO_CLINICA_MEDICA_BU_LOG FOR HISTORICO_CLINICA_MEDICA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_CLINICA_MEDICA SET ID_HISTORICO_CLINICA_MEDICA = '''||NEW.ID_HISTORICO_CLINICA_MEDICA||''''||TXT||' WHERE ID_HISTORICO_CLINICA_MEDICA = '''||NEW.ID_HISTORICO_CLINICA_MEDICA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_CLINICA_MEDICA', NEW.ID_HISTORICO_CLINICA_MEDICA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_ENFERMAGEM_AD_SINCRON */
CREATE TRIGGER HISTORICO_ENFERMAGEM_AD_SINCRON FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_ENFERMAGEM WHERE ID_HISTORICO_ENFERMAGEM = '||OLD.ID_HISTORICO_ENFERMAGEM||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_ENFERMAGEM_AI_SINCRON */
CREATE TRIGGER HISTORICO_ENFERMAGEM_AI_SINCRON FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_ENFERMAGEM (ID_HISTORICO_ENFERMAGEM,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_ENFERMAGEM,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_ENFERMAGEM_AU_SINCRON */
CREATE TRIGGER HISTORICO_ENFERMAGEM_AU_SINCRON FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_ENFERMAGEM SET ID_HISTORICO_ENFERMAGEM = '''||NEW.ID_HISTORICO_ENFERMAGEM||''''||TXT||' WHERE ID_HISTORICO_ENFERMAGEM = '''||NEW.ID_HISTORICO_ENFERMAGEM||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_ENFERMAGEM_BD_LOG */
CREATE TRIGGER HISTORICO_ENFERMAGEM_BD_LOG FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_ENFERMAGEM (ID_HISTORICO_ENFERMAGEM,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_ENFERMAGEM,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ENFERMAGEM', OLD.ID_HISTORICO_ENFERMAGEM,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_ENFERMAGEM_BI0 */
CREATE TRIGGER HISTORICO_ENFERMAGEM_BI0 FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_enfermagem IS null or (new.id_historico_enfermagem = 0)  ) then
    new.id_historico_enfermagem = gen_id (cod_up, 0) || gen_id (idenfermagem, 1);
end
^

/* Trigger: HISTORICO_ENFERMAGEM_BI_LOG */
CREATE TRIGGER HISTORICO_ENFERMAGEM_BI_LOG FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_ENFERMAGEM (ID_HISTORICO_ENFERMAGEM,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_ENFERMAGEM,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ENFERMAGEM', NEW.ID_HISTORICO_ENFERMAGEM,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_ENFERMAGEM_BU_LOG */
CREATE TRIGGER HISTORICO_ENFERMAGEM_BU_LOG FOR HISTORICO_ENFERMAGEM
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_ENFERMAGEM SET ID_HISTORICO_ENFERMAGEM = '''||NEW.ID_HISTORICO_ENFERMAGEM||''''||TXT||' WHERE ID_HISTORICO_ENFERMAGEM = '''||NEW.ID_HISTORICO_ENFERMAGEM||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ENFERMAGEM', NEW.ID_HISTORICO_ENFERMAGEM,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_ESTUDO_AD_SINCRONISMO */
CREATE TRIGGER HISTORICO_ESTUDO_AD_SINCRONISMO FOR HISTORICO_ESTUDO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_ESTUDO WHERE ID_HISTORICO_ESTUDO = '||OLD.ID_HISTORICO_ESTUDO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_ESTUDO_AI_SINCRONISMO */
CREATE TRIGGER HISTORICO_ESTUDO_AI_SINCRONISMO FOR HISTORICO_ESTUDO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_ESTUDO (ID_HISTORICO_ESTUDO,'
||' DATA_HISTORICO,'
||' ID_INTERNO,'
||' HISTORICO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_ESTUDO,'NULL')||','
||COALESCE(''''||NEW.DATA_HISTORICO||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_ESTUDO_AU_SINCRONISMO */
CREATE TRIGGER HISTORICO_ESTUDO_AU_SINCRONISMO FOR HISTORICO_ESTUDO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DATA_HISTORICO,'')<>COALESCE(OLD.DATA_HISTORICO,'')) THEN TXT=TXT||',DATA_HISTORICO = '||COALESCE(''''||NEW.DATA_HISTORICO||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_ESTUDO SET ID_HISTORICO_ESTUDO = '''||NEW.ID_HISTORICO_ESTUDO||''''||TXT||' WHERE ID_HISTORICO_ESTUDO = '''||NEW.ID_HISTORICO_ESTUDO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_ESTUDO_BD_LOG */
CREATE TRIGGER HISTORICO_ESTUDO_BD_LOG FOR HISTORICO_ESTUDO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_ESTUDO (ID_HISTORICO_ESTUDO,'
||' DATA_HISTORICO,'
||' ID_INTERNO,'
||' HISTORICO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_ESTUDO,'NULL')||','
||COALESCE(''''||OLD.DATA_HISTORICO||'''','NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.HISTORICO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ESTUDO', OLD.ID_HISTORICO_ESTUDO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_ESTUDO_BI0 */
CREATE TRIGGER HISTORICO_ESTUDO_BI0 FOR HISTORICO_ESTUDO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_estudo IS null or (new.id_historico_estudo = 0)  ) then
    new.id_historico_estudo = gen_id (cod_up, 0) || gen_id (idhistorico_estudo, 1);
end
^

/* Trigger: HISTORICO_ESTUDO_BI_LOG */
CREATE TRIGGER HISTORICO_ESTUDO_BI_LOG FOR HISTORICO_ESTUDO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_ESTUDO (ID_HISTORICO_ESTUDO,'
||' DATA_HISTORICO,'
||' ID_INTERNO,'
||' HISTORICO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_ESTUDO,'NULL')||','
||COALESCE(''''||NEW.DATA_HISTORICO||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ESTUDO', NEW.ID_HISTORICO_ESTUDO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_ESTUDO_BU_LOG */
CREATE TRIGGER HISTORICO_ESTUDO_BU_LOG FOR HISTORICO_ESTUDO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DATA_HISTORICO,'')<>COALESCE(OLD.DATA_HISTORICO,'')) THEN TXT=TXT||',DATA_HISTORICO = '||COALESCE(''''||NEW.DATA_HISTORICO||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_ESTUDO SET ID_HISTORICO_ESTUDO = '''||NEW.ID_HISTORICO_ESTUDO||''''||TXT||' WHERE ID_HISTORICO_ESTUDO = '''||NEW.ID_HISTORICO_ESTUDO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ESTUDO', NEW.ID_HISTORICO_ESTUDO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_FARMACIA_AD_SINCRONIS */
CREATE TRIGGER HISTORICO_FARMACIA_AD_SINCRONIS FOR HISTORICO_FARMACIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_FARMACIA WHERE ID_HISTORICO_FARMACIA = '||OLD.ID_HISTORICO_FARMACIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_FARMACIA_AI_SINCRONIS */
CREATE TRIGGER HISTORICO_FARMACIA_AI_SINCRONIS FOR HISTORICO_FARMACIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_FARMACIA (ID_HISTORICO_FARMACIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_FARMACIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_FARMACIA_AU_SINCRONIS */
CREATE TRIGGER HISTORICO_FARMACIA_AU_SINCRONIS FOR HISTORICO_FARMACIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_FARMACIA SET ID_HISTORICO_FARMACIA = '''||NEW.ID_HISTORICO_FARMACIA||''''||TXT||' WHERE ID_HISTORICO_FARMACIA = '''||NEW.ID_HISTORICO_FARMACIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_FARMACIA_BD_LOG */
CREATE TRIGGER HISTORICO_FARMACIA_BD_LOG FOR HISTORICO_FARMACIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_FARMACIA (ID_HISTORICO_FARMACIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_FARMACIA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_FARMACIA', OLD.ID_HISTORICO_FARMACIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_FARMACIA_BI0 */
CREATE TRIGGER HISTORICO_FARMACIA_BI0 FOR HISTORICO_FARMACIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_farmacia IS null or (new.id_historico_farmacia = 0)  ) then
    new.id_historico_farmacia = gen_id (cod_up, 0) || gen_id (idfarmacia, 1);
end
^

/* Trigger: HISTORICO_FARMACIA_BI_LOG */
CREATE TRIGGER HISTORICO_FARMACIA_BI_LOG FOR HISTORICO_FARMACIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_FARMACIA (ID_HISTORICO_FARMACIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_FARMACIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_FARMACIA', NEW.ID_HISTORICO_FARMACIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_FARMACIA_BU_LOG */
CREATE TRIGGER HISTORICO_FARMACIA_BU_LOG FOR HISTORICO_FARMACIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_FARMACIA SET ID_HISTORICO_FARMACIA = '''||NEW.ID_HISTORICO_FARMACIA||''''||TXT||' WHERE ID_HISTORICO_FARMACIA = '''||NEW.ID_HISTORICO_FARMACIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_FARMACIA', NEW.ID_HISTORICO_FARMACIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_INTERNO_AD0 */
CREATE TRIGGER HISTORICO_INTERNO_AD0 FOR HISTORICO_INTERNO
ACTIVE AFTER DELETE POSITION 0
AS
declare variable ID_FUNCIONARIO_LOGIN VARCHAR(200);
declare variable IP_MAQUINA VARCHAR(200);
begin

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
  insert into log_sistema (idlog_sistema, id_funcionario, data_hora, tabela, id_pk, tipo, script_reversao, ip_maquina)
  values (0, :id_funcionario_login, 'NOW', 'HISTORICO_INTERNO', OLD.idhistorico_interno,'D', 'DELETADO', :ip_maquina);
end
^

/* Trigger: HISTORICO_INTERNO_AD_SINCRONISM */
CREATE TRIGGER HISTORICO_INTERNO_AD_SINCRONISM FOR HISTORICO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_INTERNO WHERE IDHISTORICO_INTERNO = '||OLD.IDHISTORICO_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_INTERNO_AI_SINCRONISM */
CREATE TRIGGER HISTORICO_INTERNO_AI_SINCRONISM FOR HISTORICO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_INTERNO (IDHISTORICO_INTERNO,'
||' DESCRICAO,'
||' DATA_HORA,'
||' IDINTERNO,'
||' STATUS,'
||' MOTIVO_SAIDA,'
||' IDPROCEDENCIA,'
||' IDUP,'
||' SETOR,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(NEW.IDHISTORICO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_HORA||'''','NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_SAIDA||'''','NULL')||','
||COALESCE(NEW.IDPROCEDENCIA,'NULL')||','
||COALESCE(NEW.IDUP,'NULL')||','
||COALESCE(''''||NEW.SETOR||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_INTERNO_AU_SINCRONISM */
CREATE TRIGGER HISTORICO_INTERNO_AU_SINCRONISM FOR HISTORICO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA_HORA,'')<>COALESCE(OLD.DATA_HORA,'')) THEN TXT=TXT||',DATA_HORA = '||COALESCE(''''||NEW.DATA_HORA||'''','NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.MOTIVO_SAIDA,'')<>COALESCE(OLD.MOTIVO_SAIDA,'')) THEN TXT=TXT||',MOTIVO_SAIDA = '||COALESCE(''''||NEW.MOTIVO_SAIDA||'''','NULL');
IF (COALESCE(NEW.IDPROCEDENCIA,'')<>COALESCE(OLD.IDPROCEDENCIA,'')) THEN TXT=TXT||',IDPROCEDENCIA = '||COALESCE(NEW.IDPROCEDENCIA,'NULL');
IF (COALESCE(NEW.IDUP,'')<>COALESCE(OLD.IDUP,'')) THEN TXT=TXT||',IDUP = '||COALESCE(NEW.IDUP,'NULL');
IF (COALESCE(NEW.SETOR,'')<>COALESCE(OLD.SETOR,'')) THEN TXT=TXT||',SETOR = '||COALESCE(''''||NEW.SETOR||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_INTERNO SET IDHISTORICO_INTERNO = '''||NEW.IDHISTORICO_INTERNO||''''||TXT||' WHERE IDHISTORICO_INTERNO = '''||NEW.IDHISTORICO_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_INTERNO_BD_LOG */
CREATE TRIGGER HISTORICO_INTERNO_BD_LOG FOR HISTORICO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_INTERNO (IDHISTORICO_INTERNO,'
||' DESCRICAO,'
||' DATA_HORA,'
||' IDINTERNO,'
||' STATUS,'
||' MOTIVO_SAIDA,'
||' IDPROCEDENCIA,'
||' IDUP,'
||' SETOR,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(OLD.IDHISTORICO_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_HORA||'''','NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||','
||COALESCE(''''||OLD.STATUS||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVO_SAIDA||'''','NULL')||','
||COALESCE(OLD.IDPROCEDENCIA,'NULL')||','
||COALESCE(OLD.IDUP,'NULL')||','
||COALESCE(''''||OLD.SETOR||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_INTERNO', OLD.IDHISTORICO_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_INTERNO_BI0 */
CREATE TRIGGER HISTORICO_INTERNO_BI0 FOR HISTORICO_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.idhistorico_interno = 0 or (new.IDHISTORICO_INTERNO is null) ) then
    new.idhistorico_interno = gen_id(cod_up,0)||gen_id(IDHISTORICO_INTERNO,1);
end
^

/* Trigger: HISTORICO_INTERNO_BIU_LIMPA */
CREATE TRIGGER HISTORICO_INTERNO_BIU_LIMPA FOR HISTORICO_INTERNO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
begin
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.DESCRICAO) INTO NEW.DESCRICAO;

end
^

/* Trigger: HISTORICO_INTERNO_BI_LOG */
CREATE TRIGGER HISTORICO_INTERNO_BI_LOG FOR HISTORICO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_INTERNO (IDHISTORICO_INTERNO,'
||' DESCRICAO,'
||' DATA_HORA,'
||' IDINTERNO,'
||' STATUS,'
||' MOTIVO_SAIDA,'
||' IDPROCEDENCIA,'
||' IDUP,'
||' SETOR,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(NEW.IDHISTORICO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_HORA||'''','NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_SAIDA||'''','NULL')||','
||COALESCE(NEW.IDPROCEDENCIA,'NULL')||','
||COALESCE(NEW.IDUP,'NULL')||','
||COALESCE(''''||NEW.SETOR||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_INTERNO', NEW.IDHISTORICO_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_INTERNO_BU_LOG */
CREATE TRIGGER HISTORICO_INTERNO_BU_LOG FOR HISTORICO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA_HORA,'')<>COALESCE(OLD.DATA_HORA,'')) THEN TXT=TXT||',DATA_HORA = '||COALESCE(''''||NEW.DATA_HORA||'''','NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.MOTIVO_SAIDA,'')<>COALESCE(OLD.MOTIVO_SAIDA,'')) THEN TXT=TXT||',MOTIVO_SAIDA = '||COALESCE(''''||NEW.MOTIVO_SAIDA||'''','NULL');
IF (COALESCE(NEW.IDPROCEDENCIA,'')<>COALESCE(OLD.IDPROCEDENCIA,'')) THEN TXT=TXT||',IDPROCEDENCIA = '||COALESCE(NEW.IDPROCEDENCIA,'NULL');
IF (COALESCE(NEW.IDUP,'')<>COALESCE(OLD.IDUP,'')) THEN TXT=TXT||',IDUP = '||COALESCE(NEW.IDUP,'NULL');
IF (COALESCE(NEW.SETOR,'')<>COALESCE(OLD.SETOR,'')) THEN TXT=TXT||',SETOR = '||COALESCE(''''||NEW.SETOR||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_INTERNO SET IDHISTORICO_INTERNO = '''||NEW.IDHISTORICO_INTERNO||''''||TXT||' WHERE IDHISTORICO_INTERNO = '''||NEW.IDHISTORICO_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_INTERNO', NEW.IDHISTORICO_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_ODONTOLOGIA_AD_SINCRO */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_AD_SINCRO FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_ODONTOLOGIA WHERE ID_HISTORICO_ODONTOLOGIA = '||OLD.ID_HISTORICO_ODONTOLOGIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_ODONTOLOGIA_AI_SINCRO */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_AI_SINCRO FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_ODONTOLOGIA (ID_HISTORICO_ODONTOLOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_ODONTOLOGIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_ODONTOLOGIA_AU_SINCRO */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_AU_SINCRO FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_ODONTOLOGIA SET ID_HISTORICO_ODONTOLOGIA = '''||NEW.ID_HISTORICO_ODONTOLOGIA||''''||TXT||' WHERE ID_HISTORICO_ODONTOLOGIA = '''||NEW.ID_HISTORICO_ODONTOLOGIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_ODONTOLOGIA_BD_LOG */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_BD_LOG FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_ODONTOLOGIA (ID_HISTORICO_ODONTOLOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_ODONTOLOGIA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ODONTOLOGIA', OLD.ID_HISTORICO_ODONTOLOGIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_ODONTOLOGIA_BI0 */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_BI0 FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_odontologia IS null or (new.id_historico_odontologia = 0)  ) then
    new.id_historico_odontologia = gen_id (cod_up, 0) || gen_id (idodontologia, 1);
end
^

/* Trigger: HISTORICO_ODONTOLOGIA_BI_LOG */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_BI_LOG FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_ODONTOLOGIA (ID_HISTORICO_ODONTOLOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_ODONTOLOGIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ODONTOLOGIA', NEW.ID_HISTORICO_ODONTOLOGIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_ODONTOLOGIA_BU_LOG */
CREATE TRIGGER HISTORICO_ODONTOLOGIA_BU_LOG FOR HISTORICO_ODONTOLOGIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_ODONTOLOGIA SET ID_HISTORICO_ODONTOLOGIA = '''||NEW.ID_HISTORICO_ODONTOLOGIA||''''||TXT||' WHERE ID_HISTORICO_ODONTOLOGIA = '''||NEW.ID_HISTORICO_ODONTOLOGIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_ODONTOLOGIA', NEW.ID_HISTORICO_ODONTOLOGIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_PEDAGOGIA_AD_SINCRONI */
CREATE TRIGGER HISTORICO_PEDAGOGIA_AD_SINCRONI FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_PEDAGOGIA WHERE ID_HISTORICO_PEDAGOGIA = '||OLD.ID_HISTORICO_PEDAGOGIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_PEDAGOGIA_AI_SINCRONI */
CREATE TRIGGER HISTORICO_PEDAGOGIA_AI_SINCRONI FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_PEDAGOGIA (ID_HISTORICO_PEDAGOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_PEDAGOGIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_PEDAGOGIA_AU_SINCRONI */
CREATE TRIGGER HISTORICO_PEDAGOGIA_AU_SINCRONI FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_PEDAGOGIA SET ID_HISTORICO_PEDAGOGIA = '''||NEW.ID_HISTORICO_PEDAGOGIA||''''||TXT||' WHERE ID_HISTORICO_PEDAGOGIA = '''||NEW.ID_HISTORICO_PEDAGOGIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_PEDAGOGIA_BD_LOG */
CREATE TRIGGER HISTORICO_PEDAGOGIA_BD_LOG FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_PEDAGOGIA (ID_HISTORICO_PEDAGOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_PEDAGOGIA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PEDAGOGIA', OLD.ID_HISTORICO_PEDAGOGIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_PEDAGOGIA_BI0 */
CREATE TRIGGER HISTORICO_PEDAGOGIA_BI0 FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_pedagogia IS null or (new.id_historico_pedagogia = 0)  ) then
    new.id_historico_pedagogia = gen_id (cod_up, 0) || gen_id (idpedagogia, 1);
end
^

/* Trigger: HISTORICO_PEDAGOGIA_BI_LOG */
CREATE TRIGGER HISTORICO_PEDAGOGIA_BI_LOG FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_PEDAGOGIA (ID_HISTORICO_PEDAGOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_PEDAGOGIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PEDAGOGIA', NEW.ID_HISTORICO_PEDAGOGIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_PEDAGOGIA_BU_LOG */
CREATE TRIGGER HISTORICO_PEDAGOGIA_BU_LOG FOR HISTORICO_PEDAGOGIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_PEDAGOGIA SET ID_HISTORICO_PEDAGOGIA = '''||NEW.ID_HISTORICO_PEDAGOGIA||''''||TXT||' WHERE ID_HISTORICO_PEDAGOGIA = '''||NEW.ID_HISTORICO_PEDAGOGIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PEDAGOGIA', NEW.ID_HISTORICO_PEDAGOGIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_PSICOLOGIA_AD_SINCRON */
CREATE TRIGGER HISTORICO_PSICOLOGIA_AD_SINCRON FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_PSICOLOGIA WHERE ID_HISTORICO_PSICOLOGIA = '||OLD.ID_HISTORICO_PSICOLOGIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_PSICOLOGIA_AI_SINCRON */
CREATE TRIGGER HISTORICO_PSICOLOGIA_AI_SINCRON FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_PSICOLOGIA (ID_HISTORICO_PSICOLOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_PSICOLOGIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_PSICOLOGIA_AU_SINCRON */
CREATE TRIGGER HISTORICO_PSICOLOGIA_AU_SINCRON FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_PSICOLOGIA SET ID_HISTORICO_PSICOLOGIA = '''||NEW.ID_HISTORICO_PSICOLOGIA||''''||TXT||' WHERE ID_HISTORICO_PSICOLOGIA = '''||NEW.ID_HISTORICO_PSICOLOGIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_PSICOLOGIA_BD_LOG */
CREATE TRIGGER HISTORICO_PSICOLOGIA_BD_LOG FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_PSICOLOGIA (ID_HISTORICO_PSICOLOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_PSICOLOGIA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PSICOLOGIA', OLD.ID_HISTORICO_PSICOLOGIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_PSICOLOGIA_BI0 */
CREATE TRIGGER HISTORICO_PSICOLOGIA_BI0 FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_psicologia IS null or (new.id_historico_psicologia = 0)  ) then
    new.id_historico_psicologia = gen_id (cod_up, 0) || gen_id (idpsicologia, 1);
end
^

/* Trigger: HISTORICO_PSICOLOGIA_BI_LOG */
CREATE TRIGGER HISTORICO_PSICOLOGIA_BI_LOG FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_PSICOLOGIA (ID_HISTORICO_PSICOLOGIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_PSICOLOGIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PSICOLOGIA', NEW.ID_HISTORICO_PSICOLOGIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_PSICOLOGIA_BU_LOG */
CREATE TRIGGER HISTORICO_PSICOLOGIA_BU_LOG FOR HISTORICO_PSICOLOGIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_PSICOLOGIA SET ID_HISTORICO_PSICOLOGIA = '''||NEW.ID_HISTORICO_PSICOLOGIA||''''||TXT||' WHERE ID_HISTORICO_PSICOLOGIA = '''||NEW.ID_HISTORICO_PSICOLOGIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PSICOLOGIA', NEW.ID_HISTORICO_PSICOLOGIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_PSIQUIATRIA_AD_SINCRO */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_AD_SINCRO FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_PSIQUIATRIA WHERE ID_HISTORICO_PSIQUIATRIA = '||OLD.ID_HISTORICO_PSIQUIATRIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_PSIQUIATRIA_AI_SINCRO */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_AI_SINCRO FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_PSIQUIATRIA (ID_HISTORICO_PSIQUIATRIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_PSIQUIATRIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_PSIQUIATRIA_AU_SINCRO */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_AU_SINCRO FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_PSIQUIATRIA SET ID_HISTORICO_PSIQUIATRIA = '''||NEW.ID_HISTORICO_PSIQUIATRIA||''''||TXT||' WHERE ID_HISTORICO_PSIQUIATRIA = '''||NEW.ID_HISTORICO_PSIQUIATRIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_PSIQUIATRIA_BD_LOG */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_BD_LOG FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_PSIQUIATRIA (ID_HISTORICO_PSIQUIATRIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_PSIQUIATRIA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PSIQUIATRIA', OLD.ID_HISTORICO_PSIQUIATRIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_PSIQUIATRIA_BI0 */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_BI0 FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_psiquiatria IS null or (new.id_historico_psiquiatria = 0)  ) then
    new.id_historico_psiquiatria = gen_id (cod_up, 0) || gen_id (idpsiquiatria, 1);
end
^

/* Trigger: HISTORICO_PSIQUIATRIA_BI_LOG */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_BI_LOG FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_PSIQUIATRIA (ID_HISTORICO_PSIQUIATRIA,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_PSIQUIATRIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PSIQUIATRIA', NEW.ID_HISTORICO_PSIQUIATRIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_PSIQUIATRIA_BU_LOG */
CREATE TRIGGER HISTORICO_PSIQUIATRIA_BU_LOG FOR HISTORICO_PSIQUIATRIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_PSIQUIATRIA SET ID_HISTORICO_PSIQUIATRIA = '''||NEW.ID_HISTORICO_PSIQUIATRIA||''''||TXT||' WHERE ID_HISTORICO_PSIQUIATRIA = '''||NEW.ID_HISTORICO_PSIQUIATRIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_PSIQUIATRIA', NEW.ID_HISTORICO_PSIQUIATRIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_AD_SIN */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_AD_SIN FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_SERVICO_SOCIAL WHERE ID_HISTORICO_SERVICO_SOCIAL = '||OLD.ID_HISTORICO_SERVICO_SOCIAL||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_AI_SIN */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_AI_SIN FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_SERVICO_SOCIAL (ID_HISTORICO_SERVICO_SOCIAL,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_SERVICO_SOCIAL,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_AU_SIN */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_AU_SIN FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_SERVICO_SOCIAL SET ID_HISTORICO_SERVICO_SOCIAL = '''||NEW.ID_HISTORICO_SERVICO_SOCIAL||''''||TXT||' WHERE ID_HISTORICO_SERVICO_SOCIAL = '''||NEW.ID_HISTORICO_SERVICO_SOCIAL||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_BD_LOG */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_BD_LOG FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_SERVICO_SOCIAL (ID_HISTORICO_SERVICO_SOCIAL,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_SERVICO_SOCIAL,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_SERVICO_SOCIAL', OLD.ID_HISTORICO_SERVICO_SOCIAL,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_BI0 */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_BI0 FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_servico_social IS null or (new.id_historico_servico_social = 0)  ) then
    new.id_historico_servico_social = gen_id (cod_up, 0) || gen_id (idhistorico_servico_social, 1);
end
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_BI_LOG */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_BI_LOG FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_SERVICO_SOCIAL (ID_HISTORICO_SERVICO_SOCIAL,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_SERVICO_SOCIAL,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_SERVICO_SOCIAL', NEW.ID_HISTORICO_SERVICO_SOCIAL,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_SERVICO_SOCIAL_BU_LOG */
CREATE TRIGGER HISTORICO_SERVICO_SOCIAL_BU_LOG FOR HISTORICO_SERVICO_SOCIAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_SERVICO_SOCIAL SET ID_HISTORICO_SERVICO_SOCIAL = '''||NEW.ID_HISTORICO_SERVICO_SOCIAL||''''||TXT||' WHERE ID_HISTORICO_SERVICO_SOCIAL = '''||NEW.ID_HISTORICO_SERVICO_SOCIAL||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_SERVICO_SOCIAL', NEW.ID_HISTORICO_SERVICO_SOCIAL,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_TERAPIA_OCUP_AD_SINCR */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_AD_SINCR FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_TERAPIA_OCUP WHERE ID_HISTORICO_TERAPIA_OCUP = '||OLD.ID_HISTORICO_TERAPIA_OCUP||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_TERAPIA_OCUP_AI_SINCR */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_AI_SINCR FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_TERAPIA_OCUP (ID_HISTORICO_TERAPIA_OCUP,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_TERAPIA_OCUP,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_TERAPIA_OCUP_AU_SINCR */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_AU_SINCR FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_TERAPIA_OCUP SET ID_HISTORICO_TERAPIA_OCUP = '''||NEW.ID_HISTORICO_TERAPIA_OCUP||''''||TXT||' WHERE ID_HISTORICO_TERAPIA_OCUP = '''||NEW.ID_HISTORICO_TERAPIA_OCUP||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_TERAPIA_OCUP_BD_LOG */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_BD_LOG FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_TERAPIA_OCUP (ID_HISTORICO_TERAPIA_OCUP,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_HISTORICO_TERAPIA_OCUP,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_TERAPIA_OCUP', OLD.ID_HISTORICO_TERAPIA_OCUP,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_TERAPIA_OCUP_BI0 */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_BI0 FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_historico_terapia_ocup IS null or (new.id_historico_terapia_ocup = 0)  ) then
    new.id_historico_terapia_ocup = gen_id (cod_up, 0) || gen_id (idterapiaocupacional, 1);
end
^

/* Trigger: HISTORICO_TERAPIA_OCUP_BI_LOG */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_BI_LOG FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_TERAPIA_OCUP (ID_HISTORICO_TERAPIA_OCUP,'
||' DESCRICAO,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_HISTORICO_TERAPIA_OCUP,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_TERAPIA_OCUP', NEW.ID_HISTORICO_TERAPIA_OCUP,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_TERAPIA_OCUP_BU_LOG */
CREATE TRIGGER HISTORICO_TERAPIA_OCUP_BU_LOG FOR HISTORICO_TERAPIA_OCUP
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_TERAPIA_OCUP SET ID_HISTORICO_TERAPIA_OCUP = '''||NEW.ID_HISTORICO_TERAPIA_OCUP||''''||TXT||' WHERE ID_HISTORICO_TERAPIA_OCUP = '''||NEW.ID_HISTORICO_TERAPIA_OCUP||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_TERAPIA_OCUP', NEW.ID_HISTORICO_TERAPIA_OCUP,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HISTORICO_VISITANTE_AD_SINCRONI */
CREATE TRIGGER HISTORICO_VISITANTE_AD_SINCRONI FOR HISTORICO_VISITANTE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HISTORICO_VISITANTE WHERE ID_HISTORICO_VISITANTE = '||OLD.ID_HISTORICO_VISITANTE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HISTORICO_VISITANTE_AI_SINCRONI */
CREATE TRIGGER HISTORICO_VISITANTE_AI_SINCRONI FOR HISTORICO_VISITANTE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HISTORICO_VISITANTE (ID_HISTORICO_VISITANTE,'
||' ID_VISITANTE,'
||' NOME_VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_VISITA,'
||' HORA_VISITA,'
||' ORDEM) VALUES ('
||COALESCE(NEW.ID_HISTORICO_VISITANTE,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_VISITA||'''','NULL')||','
||COALESCE(NEW.ORDEM,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HISTORICO_VISITANTE_AU_SINCRONI */
CREATE TRIGGER HISTORICO_VISITANTE_AU_SINCRONI FOR HISTORICO_VISITANTE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.NOME_VISITANTE,'')<>COALESCE(OLD.NOME_VISITANTE,'')) THEN TXT=TXT||',NOME_VISITANTE = '||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.NUMERO_CARTEIRINHA,'')<>COALESCE(OLD.NUMERO_CARTEIRINHA,'')) THEN TXT=TXT||',NUMERO_CARTEIRINHA = '||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.DATA_VISITA,'')<>COALESCE(OLD.DATA_VISITA,'')) THEN TXT=TXT||',DATA_VISITA = '||COALESCE(''''||NEW.DATA_VISITA||'''','NULL');
IF (COALESCE(NEW.HORA_VISITA,'')<>COALESCE(OLD.HORA_VISITA,'')) THEN TXT=TXT||',HORA_VISITA = '||COALESCE(''''||NEW.HORA_VISITA||'''','NULL');
IF (COALESCE(NEW.ORDEM,'')<>COALESCE(OLD.ORDEM,'')) THEN TXT=TXT||',ORDEM = '||COALESCE(NEW.ORDEM,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_VISITANTE SET ID_HISTORICO_VISITANTE = '''||NEW.ID_HISTORICO_VISITANTE||''''||TXT||' WHERE ID_HISTORICO_VISITANTE = '''||NEW.ID_HISTORICO_VISITANTE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HISTORICO_VISITANTE_BD_LOG */
CREATE TRIGGER HISTORICO_VISITANTE_BD_LOG FOR HISTORICO_VISITANTE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_VISITANTE (ID_HISTORICO_VISITANTE,'
||' ID_VISITANTE,'
||' NOME_VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_VISITA,'
||' HORA_VISITA,'
||' ORDEM) VALUES ('
||COALESCE(OLD.ID_HISTORICO_VISITANTE,'NULL')||','
||COALESCE(OLD.ID_VISITANTE,'NULL')||','
||COALESCE(''''||OLD.NOME_VISITANTE||'''','NULL')||','
||COALESCE(OLD.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||OLD.CPF||'''','NULL')||','
||COALESCE(''''||OLD.RG||'''','NULL')||','
||COALESCE(''''||OLD.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||OLD.SEXO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_VISITA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_VISITA||'''','NULL')||','
||COALESCE(OLD.ORDEM,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_VISITANTE', OLD.ID_HISTORICO_VISITANTE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_VISITANTE_BI0 */
CREATE TRIGGER HISTORICO_VISITANTE_BI0 FOR HISTORICO_VISITANTE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_historico_visitante IS null or (new.id_historico_visitante = 0)  ) then
    new.id_historico_visitante = gen_id (cod_up, 0) || gen_id (id_historico_visitante, 1);
end
^

/* Trigger: HISTORICO_VISITANTE_BI_LOG */
CREATE TRIGGER HISTORICO_VISITANTE_BI_LOG FOR HISTORICO_VISITANTE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HISTORICO_VISITANTE (ID_HISTORICO_VISITANTE,'
||' ID_VISITANTE,'
||' NOME_VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_VISITA,'
||' HORA_VISITA,'
||' ORDEM) VALUES ('
||COALESCE(NEW.ID_HISTORICO_VISITANTE,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_VISITA||'''','NULL')||','
||COALESCE(NEW.ORDEM,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_VISITANTE', NEW.ID_HISTORICO_VISITANTE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HISTORICO_VISITANTE_BU_LOG */
CREATE TRIGGER HISTORICO_VISITANTE_BU_LOG FOR HISTORICO_VISITANTE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.NOME_VISITANTE,'')<>COALESCE(OLD.NOME_VISITANTE,'')) THEN TXT=TXT||',NOME_VISITANTE = '||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.NUMERO_CARTEIRINHA,'')<>COALESCE(OLD.NUMERO_CARTEIRINHA,'')) THEN TXT=TXT||',NUMERO_CARTEIRINHA = '||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.DATA_VISITA,'')<>COALESCE(OLD.DATA_VISITA,'')) THEN TXT=TXT||',DATA_VISITA = '||COALESCE(''''||NEW.DATA_VISITA||'''','NULL');
IF (COALESCE(NEW.HORA_VISITA,'')<>COALESCE(OLD.HORA_VISITA,'')) THEN TXT=TXT||',HORA_VISITA = '||COALESCE(''''||NEW.HORA_VISITA||'''','NULL');
IF (COALESCE(NEW.ORDEM,'')<>COALESCE(OLD.ORDEM,'')) THEN TXT=TXT||',ORDEM = '||COALESCE(NEW.ORDEM,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HISTORICO_VISITANTE SET ID_HISTORICO_VISITANTE = '''||NEW.ID_HISTORICO_VISITANTE||''''||TXT||' WHERE ID_HISTORICO_VISITANTE = '''||NEW.ID_HISTORICO_VISITANTE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HISTORICO_VISITANTE', NEW.ID_HISTORICO_VISITANTE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: HORARIO_FUNCIONARIO_AD_SINCRONI */
CREATE TRIGGER HORARIO_FUNCIONARIO_AD_SINCRONI FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM HORARIO_FUNCIONARIO WHERE IDHORARIO_FUNCIONARIO = '||OLD.IDHORARIO_FUNCIONARIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: HORARIO_FUNCIONARIO_AI_SINCRONI */
CREATE TRIGGER HORARIO_FUNCIONARIO_AI_SINCRONI FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO HORARIO_FUNCIONARIO (IDHORARIO_FUNCIONARIO,'
||' HORARIO_FUNCIONARIO,'
||' PLANTAO,'
||' HORAS_TRABALHO,'
||' HORAS_FOLGA,'
||' HORA_INICIO_MANHA,'
||' HORA_FIM_MANHA,'
||' HORA_INICIO_TARDE,'
||' HORA_FIM_TARDE) VALUES ('
||COALESCE(NEW.IDHORARIO_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.HORARIO_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.PLANTAO||'''','NULL')||','
||COALESCE(NEW.HORAS_TRABALHO,'NULL')||','
||COALESCE(NEW.HORAS_FOLGA,'NULL')||','
||COALESCE(''''||NEW.HORA_INICIO_MANHA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FIM_MANHA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIO_TARDE||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FIM_TARDE||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: HORARIO_FUNCIONARIO_AU_SINCRONI */
CREATE TRIGGER HORARIO_FUNCIONARIO_AU_SINCRONI FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.HORARIO_FUNCIONARIO,'')<>COALESCE(OLD.HORARIO_FUNCIONARIO,'')) THEN TXT=TXT||',HORARIO_FUNCIONARIO = '||COALESCE(''''||NEW.HORARIO_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.PLANTAO,'')<>COALESCE(OLD.PLANTAO,'')) THEN TXT=TXT||',PLANTAO = '||COALESCE(''''||NEW.PLANTAO||'''','NULL');
IF (COALESCE(NEW.HORAS_TRABALHO,'')<>COALESCE(OLD.HORAS_TRABALHO,'')) THEN TXT=TXT||',HORAS_TRABALHO = '||COALESCE(NEW.HORAS_TRABALHO,'NULL');
IF (COALESCE(NEW.HORAS_FOLGA,'')<>COALESCE(OLD.HORAS_FOLGA,'')) THEN TXT=TXT||',HORAS_FOLGA = '||COALESCE(NEW.HORAS_FOLGA,'NULL');
IF (COALESCE(NEW.HORA_INICIO_MANHA,'')<>COALESCE(OLD.HORA_INICIO_MANHA,'')) THEN TXT=TXT||',HORA_INICIO_MANHA = '||COALESCE(''''||NEW.HORA_INICIO_MANHA||'''','NULL');
IF (COALESCE(NEW.HORA_FIM_MANHA,'')<>COALESCE(OLD.HORA_FIM_MANHA,'')) THEN TXT=TXT||',HORA_FIM_MANHA = '||COALESCE(''''||NEW.HORA_FIM_MANHA||'''','NULL');
IF (COALESCE(NEW.HORA_INICIO_TARDE,'')<>COALESCE(OLD.HORA_INICIO_TARDE,'')) THEN TXT=TXT||',HORA_INICIO_TARDE = '||COALESCE(''''||NEW.HORA_INICIO_TARDE||'''','NULL');
IF (COALESCE(NEW.HORA_FIM_TARDE,'')<>COALESCE(OLD.HORA_FIM_TARDE,'')) THEN TXT=TXT||',HORA_FIM_TARDE = '||COALESCE(''''||NEW.HORA_FIM_TARDE||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HORARIO_FUNCIONARIO SET IDHORARIO_FUNCIONARIO = '''||NEW.IDHORARIO_FUNCIONARIO||''''||TXT||' WHERE IDHORARIO_FUNCIONARIO = '''||NEW.IDHORARIO_FUNCIONARIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: HORARIO_FUNCIONARIO_BD_LOG */
CREATE TRIGGER HORARIO_FUNCIONARIO_BD_LOG FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HORARIO_FUNCIONARIO (IDHORARIO_FUNCIONARIO,'
||' HORARIO_FUNCIONARIO,'
||' PLANTAO,'
||' HORAS_TRABALHO,'
||' HORAS_FOLGA,'
||' HORA_INICIO_MANHA,'
||' HORA_FIM_MANHA,'
||' HORA_INICIO_TARDE,'
||' HORA_FIM_TARDE) VALUES ('
||COALESCE(OLD.IDHORARIO_FUNCIONARIO,'NULL')||','
||COALESCE(''''||OLD.HORARIO_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||OLD.PLANTAO||'''','NULL')||','
||COALESCE(OLD.HORAS_TRABALHO,'NULL')||','
||COALESCE(OLD.HORAS_FOLGA,'NULL')||','
||COALESCE(''''||OLD.HORA_INICIO_MANHA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_FIM_MANHA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_INICIO_TARDE||'''','NULL')||','
||COALESCE(''''||OLD.HORA_FIM_TARDE||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HORARIO_FUNCIONARIO', OLD.IDHORARIO_FUNCIONARIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HORARIO_FUNCIONARIO_BI0 */
CREATE TRIGGER HORARIO_FUNCIONARIO_BI0 FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (COALESCE(NEW.idhorario_funcionario,0) = 0) then
  BEGIN
    NEW.idhorario_funcionario = GEN_ID(cod_up,0)||GEN_ID(idhorario_funcionario,1) ;
  END
end
^

/* Trigger: HORARIO_FUNCIONARIO_BI_LOG */
CREATE TRIGGER HORARIO_FUNCIONARIO_BI_LOG FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO HORARIO_FUNCIONARIO (IDHORARIO_FUNCIONARIO,'
||' HORARIO_FUNCIONARIO,'
||' PLANTAO,'
||' HORAS_TRABALHO,'
||' HORAS_FOLGA,'
||' HORA_INICIO_MANHA,'
||' HORA_FIM_MANHA,'
||' HORA_INICIO_TARDE,'
||' HORA_FIM_TARDE) VALUES ('
||COALESCE(NEW.IDHORARIO_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.HORARIO_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.PLANTAO||'''','NULL')||','
||COALESCE(NEW.HORAS_TRABALHO,'NULL')||','
||COALESCE(NEW.HORAS_FOLGA,'NULL')||','
||COALESCE(''''||NEW.HORA_INICIO_MANHA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FIM_MANHA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIO_TARDE||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FIM_TARDE||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HORARIO_FUNCIONARIO', NEW.IDHORARIO_FUNCIONARIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: HORARIO_FUNCIONARIO_BU_LOG */
CREATE TRIGGER HORARIO_FUNCIONARIO_BU_LOG FOR HORARIO_FUNCIONARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.HORARIO_FUNCIONARIO,'')<>COALESCE(OLD.HORARIO_FUNCIONARIO,'')) THEN TXT=TXT||',HORARIO_FUNCIONARIO = '||COALESCE(''''||NEW.HORARIO_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.PLANTAO,'')<>COALESCE(OLD.PLANTAO,'')) THEN TXT=TXT||',PLANTAO = '||COALESCE(''''||NEW.PLANTAO||'''','NULL');
IF (COALESCE(NEW.HORAS_TRABALHO,'')<>COALESCE(OLD.HORAS_TRABALHO,'')) THEN TXT=TXT||',HORAS_TRABALHO = '||COALESCE(NEW.HORAS_TRABALHO,'NULL');
IF (COALESCE(NEW.HORAS_FOLGA,'')<>COALESCE(OLD.HORAS_FOLGA,'')) THEN TXT=TXT||',HORAS_FOLGA = '||COALESCE(NEW.HORAS_FOLGA,'NULL');
IF (COALESCE(NEW.HORA_INICIO_MANHA,'')<>COALESCE(OLD.HORA_INICIO_MANHA,'')) THEN TXT=TXT||',HORA_INICIO_MANHA = '||COALESCE(''''||NEW.HORA_INICIO_MANHA||'''','NULL');
IF (COALESCE(NEW.HORA_FIM_MANHA,'')<>COALESCE(OLD.HORA_FIM_MANHA,'')) THEN TXT=TXT||',HORA_FIM_MANHA = '||COALESCE(''''||NEW.HORA_FIM_MANHA||'''','NULL');
IF (COALESCE(NEW.HORA_INICIO_TARDE,'')<>COALESCE(OLD.HORA_INICIO_TARDE,'')) THEN TXT=TXT||',HORA_INICIO_TARDE = '||COALESCE(''''||NEW.HORA_INICIO_TARDE||'''','NULL');
IF (COALESCE(NEW.HORA_FIM_TARDE,'')<>COALESCE(OLD.HORA_FIM_TARDE,'')) THEN TXT=TXT||',HORA_FIM_TARDE = '||COALESCE(''''||NEW.HORA_FIM_TARDE||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE HORARIO_FUNCIONARIO SET IDHORARIO_FUNCIONARIO = '''||NEW.IDHORARIO_FUNCIONARIO||''''||TXT||' WHERE IDHORARIO_FUNCIONARIO = '''||NEW.IDHORARIO_FUNCIONARIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'HORARIO_FUNCIONARIO', NEW.IDHORARIO_FUNCIONARIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: INTELIGENCIA_AD_SINCRONISMO */
CREATE TRIGGER INTELIGENCIA_AD_SINCRONISMO FOR INTELIGENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM INTELIGENCIA WHERE ID_INTELIGENCIA = '||OLD.ID_INTELIGENCIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: INTELIGENCIA_AI_SINCRONISMO */
CREATE TRIGGER INTELIGENCIA_AI_SINCRONISMO FOR INTELIGENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO INTELIGENCIA (ID_INTELIGENCIA,'
||' ID_INTERNO,'
||' DATA,'
||' DESCRICAO,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(NEW.ID_INTELIGENCIA,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: INTELIGENCIA_AU_SINCRONISMO */
CREATE TRIGGER INTELIGENCIA_AU_SINCRONISMO FOR INTELIGENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE INTELIGENCIA SET ID_INTELIGENCIA = '''||NEW.ID_INTELIGENCIA||''''||TXT||' WHERE ID_INTELIGENCIA = '''||NEW.ID_INTELIGENCIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: INTELIGENCIA_BD_LOG */
CREATE TRIGGER INTELIGENCIA_BD_LOG FOR INTELIGENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO INTELIGENCIA (ID_INTELIGENCIA,'
||' ID_INTERNO,'
||' DATA,'
||' DESCRICAO,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(OLD.ID_INTELIGENCIA,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'INTELIGENCIA', OLD.ID_INTELIGENCIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: INTELIGENCIA_BI0 */
CREATE TRIGGER INTELIGENCIA_BI0 FOR INTELIGENCIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
    if (NEW.id_inteligencia IS null or (new.id_inteligencia = 0)  ) then
    new.id_inteligencia = gen_id (cod_up, 0) || gen_id (idinteligencia, 1);
end
^

/* Trigger: INTELIGENCIA_BI_LOG */
CREATE TRIGGER INTELIGENCIA_BI_LOG FOR INTELIGENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO INTELIGENCIA (ID_INTELIGENCIA,'
||' ID_INTERNO,'
||' DATA,'
||' DESCRICAO,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(NEW.ID_INTELIGENCIA,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'INTELIGENCIA', NEW.ID_INTELIGENCIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: INTELIGENCIA_BU_LOG */
CREATE TRIGGER INTELIGENCIA_BU_LOG FOR INTELIGENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE INTELIGENCIA SET ID_INTELIGENCIA = '''||NEW.ID_INTELIGENCIA||''''||TXT||' WHERE ID_INTELIGENCIA = '''||NEW.ID_INTELIGENCIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'INTELIGENCIA', NEW.ID_INTELIGENCIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: INTERNO_AD_SINCRONISMO */
CREATE TRIGGER INTERNO_AD_SINCRONISMO FOR INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-08 10:04:18.3240
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM INTERNO WHERE ID_INTERNO = '||OLD.ID_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: INTERNO_AI_SINCRONISMO */
CREATE TRIGGER INTERNO_AI_SINCRONISMO FOR INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-08 10:04:18.3240

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO INTERNO (ID_INTERNO,'
||' NOME_INTERNO,'
||' RGI,'
||' IDPROFISSAO,'
||' IDGALERIA,'
||' IDPAVILHAO,'
||' IDSOLARIO,'
||' IDCELA,'
||' DATA_ENTRADA,'
||' MAE,'
||' PAI,'
||' IDNATURALIDADE,'
||' IDNACIONALIDADE,'
||' IDRACA,'
||' IDESCOLARIDADE,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENETO,'
||' CEP,'
||' IDCIDADE,'
||' FONE,'
||' CONTATO,'
||' RELIGIAO,'
||' IDADVOGADO,'
||' ID_PROCEDENCIA,'
||' CONDENACAO,'
||' DATA_PRISAO,'
||' HISTORICO,'
||' ST,'
||' SEXO,'
||' ID_UP,'
||' IDCONDICAO_INTERNO,'
||' IDDESTINO,'
||' ID_FUNCIONARIO,'
||' STATUS_ISOLAMENTO,'
||' IDSETOR_TRABALHO,'
||' DATA_SETOR,'
||' DATA_SAIDA,'
||' MOTIVO_SAIDA,'
||' ID_FUNCAOINTERNO,'
||' OBSTRABALHO,'
||' DATA_NASCIMENTO,'
||' RG,'
||' CPF,'
||' ESTADO_CIVIL,'
||' VULGO,'
||' OUTRO_NOME,'
||' SINAIS_PARTICULARES,'
||' ALTURA,'
||' PESO,'
||' CI,'
||' CISAIDA,'
||' ARTIGO,'
||' DATA_ISOLAMENTO,'
||' DATA_MATRICULA,'
||' OBSEDUCACAO,'
||' DEFICIENCIA,'
||' IDSERIEESTUDO,'
||' COR_OLHOS,'
||' COR_CABELOS,'
||' NOME_SOCIAL,'
||' ORIENTACAO_SEXUAL,'
||' IDENTIDADE_GENERO,'
||' HISTORICO_VELHO,'
||' TIPOPROCESSO,'
||' CONCEITO_DISCIPLINAR,'
||' TIPOCONDUTA,'
||' PERIODO,'
||' FAMILIARPRESO,'
||' PARENTESCOPRESO,'
||' UPFAMILIARPRESO,'
||' MOTIVODELITO,'
||' MAIORPERDA,'
||' PAISVIVOS,'
||' PAISSEPARADOS,'
||' IDADEPAISSEPARADOS,'
||' PROFISSAOPAIS,'
||' QUEMCRIOU,'
||' TRABALHOFAMILIA,'
||' QTDEIRMAOS,'
||' CRIADOIRMAOS,'
||' MORADIA,'
||' REPRESENTACAOPAIS,'
||' EDUCACAORECEBIDA,'
||' MUDANCAFAMILIA,'
||' FUGACASA,'
||' CONDICOESCRIACAO,'
||' INSTITUICAOASSISTENCIAL,'
||' VIOLENCIADOMESTICA,'
||' MORADIAANTESPRESO,'
||' RESIDENCIAFAMILIAR,'
||' QTDEFILHOS,'
||' FILHOSMENORES16,'
||' FILHOSVIVEM,'
||' FILHOADOCAO,'
||' PROVEDORFAMILIA,'
||' RENDIMENTOFAMILIAR,'
||' PROGRAMASOCIAL,'
||' AUXRECLUSAO,'
||' REPROVADOESCOLA,'
||' IDADETRABALHO,'
||' CURSOPROFISSIONALIZANTE,'
||' EXERCICIATRABALHO,'
||' REGISTROCARTEIRA,'
||' TRABALHOUPANTERIOR,'
||' DOCUMENTOS,'
||' USODROGAS,'
||' DATADEPENDENCIA,'
||' ABANDONODROGAS,'
||' DROGASCOMCRIME,'
||' DOENCAGRAVE,'
||' DOENCAMENTAL,'
||' PROBLEMASAUDE,'
||' DOENCALABORAL,'
||' VISITAOUTRAPESSOA,'
||' ESTUDOCUMPENA,'
||' TRABALHOCUMPENA,'
||' PROFISSAOCUMPENA,'
||' DATAPSICOSSOCIAL,'
||' IDTECNICO,'
||' OBSPSICOSSOCIAL,'
||' DATA_DELITO,'
||' DATA_REABILITACAO,'
||' MP,'
||' SUICIDIO,'
||' CID,'
||' EFEITOSDROGA,'
||' SINTOMASDEPRESSIVOS,'
||' EPISODIOSHUMOR,'
||' SINTOMASPSICOTICOS,'
||' DELIRIOS,'
||' ALUCINACOES,'
||' PERSONALIDADE,'
||' VISITANTES,'
||' MEDICACAOCONTROLADA,'
||' DOENCAINFECTOCONTAGIOSA,'
||' TRATAMENTOINFECTO,'
||' RESULTADOINFECTO,'
||' SITUACAOCIVIL,'
||' MEDIDASEGURANCA,'
||' FACCAO,'
||' VARA_ORIGEM,'
||' EM_TRANSITO,'
||' NUMERO_INFOPEN,'
||' REINCERSAO,'
||' IDPAIS_ENDERECO,'
||' OUTROS_ADVOGADOS,'
||' TITULO_ELEITOR,'
||' TIPOREGIME,'
||' DATA_PERMANENCIA,'
||' PASSAGEM_SPF,'
||' MOTIVACAO_INCLUSAO,'
||' NUMERO_ROUPA,'
||' ORGAO_EMISSOR_RG) VALUES ('
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NOME_INTERNO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RGI,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDPROFISSAO,'NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(NEW.IDSOLARIO,'NULL')||','
||COALESCE(NEW.IDCELA,'NULL')||','
||COALESCE(''''||NEW.DATA_ENTRADA||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MAE,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PAI,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDNATURALIDADE,'NULL')||','
||COALESCE(NEW.IDNACIONALIDADE,'NULL')||','
||COALESCE(NEW.IDRACA,'NULL')||','
||COALESCE(NEW.IDESCOLARIDADE,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ENDERECO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NUMERO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.BAIRRO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.COMPLEMENETO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CEP,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDCIDADE,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FONE,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONTATO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RELIGIAO,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDADVOGADO,'NULL')||','
||COALESCE(NEW.ID_PROCEDENCIA,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONDENACAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||NEW.DATA_PRISAO||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.HISTORICO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ST,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SEXO,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.IDCONDICAO_INTERNO,'NULL')||','
||COALESCE(NEW.IDDESTINO,'NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.STATUS_ISOLAMENTO,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDSETOR_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DATA_SETOR||'''','NULL')||','
||COALESCE(''''||NEW.DATA_SAIDA||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MOTIVO_SAIDA,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.ID_FUNCAOINTERNO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OBSTRABALHO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RG,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CPF,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ESTADO_CIVIL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VULGO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OUTRO_NOME,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SINAIS_PARTICULARES,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ALTURA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PESO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CI,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CISAIDA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ARTIGO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ISOLAMENTO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_MATRICULA||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OBSEDUCACAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DEFICIENCIA,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDSERIEESTUDO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.COR_OLHOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.COR_CABELOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NOME_SOCIAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ORIENTACAO_SEXUAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.IDENTIDADE_GENERO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.HISTORICO_VELHO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TIPOPROCESSO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONCEITO_DISCIPLINAR,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TIPOCONDUTA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PERIODO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FAMILIARPRESO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PARENTESCOPRESO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.UPFAMILIARPRESO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MOTIVODELITO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MAIORPERDA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PAISVIVOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PAISSEPARADOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.IDADEPAISSEPARADOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROFISSAOPAIS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.QUEMCRIOU,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRABALHOFAMILIA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.QTDEIRMAOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CRIADOIRMAOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MORADIA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REPRESENTACAOPAIS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EDUCACAORECEBIDA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MUDANCAFAMILIA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FUGACASA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONDICOESCRIACAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.INSTITUICAOASSISTENCIAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VIOLENCIADOMESTICA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MORADIAANTESPRESO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RESIDENCIAFAMILIAR,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.QTDEFILHOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FILHOSMENORES16,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FILHOSVIVEM,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FILHOADOCAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROVEDORFAMILIA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RENDIMENTOFAMILIAR,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROGRAMASOCIAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.AUXRECLUSAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REPROVADOESCOLA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.IDADETRABALHO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CURSOPROFISSIONALIZANTE,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EXERCICIATRABALHO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REGISTROCARTEIRA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRABALHOUPANTERIOR,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOCUMENTOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.USODROGAS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DATADEPENDENCIA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ABANDONODROGAS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DROGASCOMCRIME,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCAGRAVE,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCAMENTAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROBLEMASAUDE,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCALABORAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VISITAOUTRAPESSOA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ESTUDOCUMPENA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRABALHOCUMPENA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROFISSAOCUMPENA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||NEW.DATAPSICOSSOCIAL||'''','NULL')||','
||COALESCE(NEW.IDTECNICO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OBSPSICOSSOCIAL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||NEW.DATA_DELITO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL')||','
||COALESCE(NEW.MP,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SUICIDIO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CID,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EFEITOSDROGA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SINTOMASDEPRESSIVOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EPISODIOSHUMOR,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SINTOMASPSICOTICOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DELIRIOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ALUCINACOES,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PERSONALIDADE,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VISITANTES,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MEDICACAOCONTROLADA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCAINFECTOCONTAGIOSA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRATAMENTOINFECTO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RESULTADOINFECTO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SITUACAOCIVIL,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MEDIDASEGURANCA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FACCAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VARA_ORIGEM,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EM_TRANSITO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NUMERO_INFOPEN,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REINCERSAO,'''',''''''))||'''','NULL')||','
||COALESCE(NEW.IDPAIS_ENDERECO,'NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OUTROS_ADVOGADOS,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TITULO_ELEITOR,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TIPOREGIME,'''',''''''))||'''','NULL')||','
||COALESCE(''''||NEW.DATA_PERMANENCIA||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PASSAGEM_SPF,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MOTIVACAO_INCLUSAO,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NUMERO_ROUPA,'''',''''''))||'''','NULL')||','
||COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ORGAO_EMISSOR_RG,'''',''''''))||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: INTERNO_AU_SINCRONISMO */
CREATE TRIGGER INTERNO_AU_SINCRONISMO FOR INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-08 10:04:18.3240
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME_INTERNO,'')<>COALESCE(OLD.NOME_INTERNO,'')) THEN TXT=TXT||',NOME_INTERNO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NOME_INTERNO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.RGI,'')<>COALESCE(OLD.RGI,'')) THEN TXT=TXT||',RGI = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RGI,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDPROFISSAO,'')<>COALESCE(OLD.IDPROFISSAO,'')) THEN TXT=TXT||',IDPROFISSAO = '||COALESCE(NEW.IDPROFISSAO,'NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.IDSOLARIO,'')<>COALESCE(OLD.IDSOLARIO,'')) THEN TXT=TXT||',IDSOLARIO = '||COALESCE(NEW.IDSOLARIO,'NULL');
IF (COALESCE(NEW.IDCELA,'')<>COALESCE(OLD.IDCELA,'')) THEN TXT=TXT||',IDCELA = '||COALESCE(NEW.IDCELA,'NULL');
IF (COALESCE(NEW.DATA_ENTRADA,'')<>COALESCE(OLD.DATA_ENTRADA,'')) THEN TXT=TXT||',DATA_ENTRADA = '||COALESCE(''''||NEW.DATA_ENTRADA||'''','NULL');
IF (COALESCE(NEW.MAE,'')<>COALESCE(OLD.MAE,'')) THEN TXT=TXT||',MAE = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MAE,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PAI,'')<>COALESCE(OLD.PAI,'')) THEN TXT=TXT||',PAI = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PAI,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDNATURALIDADE,'')<>COALESCE(OLD.IDNATURALIDADE,'')) THEN TXT=TXT||',IDNATURALIDADE = '||COALESCE(NEW.IDNATURALIDADE,'NULL');
IF (COALESCE(NEW.IDNACIONALIDADE,'')<>COALESCE(OLD.IDNACIONALIDADE,'')) THEN TXT=TXT||',IDNACIONALIDADE = '||COALESCE(NEW.IDNACIONALIDADE,'NULL');
IF (COALESCE(NEW.IDRACA,'')<>COALESCE(OLD.IDRACA,'')) THEN TXT=TXT||',IDRACA = '||COALESCE(NEW.IDRACA,'NULL');
IF (COALESCE(NEW.IDESCOLARIDADE,'')<>COALESCE(OLD.IDESCOLARIDADE,'')) THEN TXT=TXT||',IDESCOLARIDADE = '||COALESCE(NEW.IDESCOLARIDADE,'NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ENDERECO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NUMERO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.BAIRRO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.COMPLEMENETO,'')<>COALESCE(OLD.COMPLEMENETO,'')) THEN TXT=TXT||',COMPLEMENETO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.COMPLEMENETO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CEP,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDCIDADE,'')<>COALESCE(OLD.IDCIDADE,'')) THEN TXT=TXT||',IDCIDADE = '||COALESCE(NEW.IDCIDADE,'NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FONE,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONTATO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.RELIGIAO,'')<>COALESCE(OLD.RELIGIAO,'')) THEN TXT=TXT||',RELIGIAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RELIGIAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDADVOGADO,'')<>COALESCE(OLD.IDADVOGADO,'')) THEN TXT=TXT||',IDADVOGADO = '||COALESCE(NEW.IDADVOGADO,'NULL');
IF (COALESCE(NEW.ID_PROCEDENCIA,'')<>COALESCE(OLD.ID_PROCEDENCIA,'')) THEN TXT=TXT||',ID_PROCEDENCIA = '||COALESCE(NEW.ID_PROCEDENCIA,'NULL');
IF (COALESCE(NEW.CONDENACAO,'')<>COALESCE(OLD.CONDENACAO,'')) THEN TXT=TXT||',CONDENACAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONDENACAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATA_PRISAO,'')<>COALESCE(OLD.DATA_PRISAO,'')) THEN TXT=TXT||',DATA_PRISAO = '||COALESCE(''''||NEW.DATA_PRISAO||'''','NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.HISTORICO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ST,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SEXO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.IDCONDICAO_INTERNO,'')<>COALESCE(OLD.IDCONDICAO_INTERNO,'')) THEN TXT=TXT||',IDCONDICAO_INTERNO = '||COALESCE(NEW.IDCONDICAO_INTERNO,'NULL');
IF (COALESCE(NEW.IDDESTINO,'')<>COALESCE(OLD.IDDESTINO,'')) THEN TXT=TXT||',IDDESTINO = '||COALESCE(NEW.IDDESTINO,'NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.STATUS_ISOLAMENTO,'')<>COALESCE(OLD.STATUS_ISOLAMENTO,'')) THEN TXT=TXT||',STATUS_ISOLAMENTO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.STATUS_ISOLAMENTO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDSETOR_TRABALHO,'')<>COALESCE(OLD.IDSETOR_TRABALHO,'')) THEN TXT=TXT||',IDSETOR_TRABALHO = '||COALESCE(NEW.IDSETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.DATA_SETOR,'')<>COALESCE(OLD.DATA_SETOR,'')) THEN TXT=TXT||',DATA_SETOR = '||COALESCE(''''||NEW.DATA_SETOR||'''','NULL');
IF (COALESCE(NEW.DATA_SAIDA,'')<>COALESCE(OLD.DATA_SAIDA,'')) THEN TXT=TXT||',DATA_SAIDA = '||COALESCE(''''||NEW.DATA_SAIDA||'''','NULL');
IF (COALESCE(NEW.MOTIVO_SAIDA,'')<>COALESCE(OLD.MOTIVO_SAIDA,'')) THEN TXT=TXT||',MOTIVO_SAIDA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MOTIVO_SAIDA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ID_FUNCAOINTERNO,'')<>COALESCE(OLD.ID_FUNCAOINTERNO,'')) THEN TXT=TXT||',ID_FUNCAOINTERNO = '||COALESCE(NEW.ID_FUNCAOINTERNO,'NULL');
IF (COALESCE(NEW.OBSTRABALHO,'')<>COALESCE(OLD.OBSTRABALHO,'')) THEN TXT=TXT||',OBSTRABALHO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OBSTRABALHO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RG,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CPF,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ESTADO_CIVIL,'')<>COALESCE(OLD.ESTADO_CIVIL,'')) THEN TXT=TXT||',ESTADO_CIVIL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ESTADO_CIVIL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.VULGO,'')<>COALESCE(OLD.VULGO,'')) THEN TXT=TXT||',VULGO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VULGO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.OUTRO_NOME,'')<>COALESCE(OLD.OUTRO_NOME,'')) THEN TXT=TXT||',OUTRO_NOME = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OUTRO_NOME,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.SINAIS_PARTICULARES,'')<>COALESCE(OLD.SINAIS_PARTICULARES,'')) THEN TXT=TXT||',SINAIS_PARTICULARES = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SINAIS_PARTICULARES,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ALTURA,'')<>COALESCE(OLD.ALTURA,'')) THEN TXT=TXT||',ALTURA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ALTURA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PESO,'')<>COALESCE(OLD.PESO,'')) THEN TXT=TXT||',PESO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PESO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CI,'')<>COALESCE(OLD.CI,'')) THEN TXT=TXT||',CI = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CI,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CISAIDA,'')<>COALESCE(OLD.CISAIDA,'')) THEN TXT=TXT||',CISAIDA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CISAIDA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ARTIGO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATA_ISOLAMENTO,'')<>COALESCE(OLD.DATA_ISOLAMENTO,'')) THEN TXT=TXT||',DATA_ISOLAMENTO = '||COALESCE(''''||NEW.DATA_ISOLAMENTO||'''','NULL');
IF (COALESCE(NEW.DATA_MATRICULA,'')<>COALESCE(OLD.DATA_MATRICULA,'')) THEN TXT=TXT||',DATA_MATRICULA = '||COALESCE(''''||NEW.DATA_MATRICULA||'''','NULL');
IF (COALESCE(NEW.OBSEDUCACAO,'')<>COALESCE(OLD.OBSEDUCACAO,'')) THEN TXT=TXT||',OBSEDUCACAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OBSEDUCACAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DEFICIENCIA,'')<>COALESCE(OLD.DEFICIENCIA,'')) THEN TXT=TXT||',DEFICIENCIA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DEFICIENCIA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDSERIEESTUDO,'')<>COALESCE(OLD.IDSERIEESTUDO,'')) THEN TXT=TXT||',IDSERIEESTUDO = '||COALESCE(NEW.IDSERIEESTUDO,'NULL');
IF (COALESCE(NEW.COR_OLHOS,'')<>COALESCE(OLD.COR_OLHOS,'')) THEN TXT=TXT||',COR_OLHOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.COR_OLHOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.COR_CABELOS,'')<>COALESCE(OLD.COR_CABELOS,'')) THEN TXT=TXT||',COR_CABELOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.COR_CABELOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.NOME_SOCIAL,'')<>COALESCE(OLD.NOME_SOCIAL,'')) THEN TXT=TXT||',NOME_SOCIAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NOME_SOCIAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ORIENTACAO_SEXUAL,'')<>COALESCE(OLD.ORIENTACAO_SEXUAL,'')) THEN TXT=TXT||',ORIENTACAO_SEXUAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ORIENTACAO_SEXUAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDENTIDADE_GENERO,'')<>COALESCE(OLD.IDENTIDADE_GENERO,'')) THEN TXT=TXT||',IDENTIDADE_GENERO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.IDENTIDADE_GENERO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.HISTORICO_VELHO,'')<>COALESCE(OLD.HISTORICO_VELHO,'')) THEN TXT=TXT||',HISTORICO_VELHO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.HISTORICO_VELHO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TIPOPROCESSO,'')<>COALESCE(OLD.TIPOPROCESSO,'')) THEN TXT=TXT||',TIPOPROCESSO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TIPOPROCESSO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CONCEITO_DISCIPLINAR,'')<>COALESCE(OLD.CONCEITO_DISCIPLINAR,'')) THEN TXT=TXT||',CONCEITO_DISCIPLINAR = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONCEITO_DISCIPLINAR,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TIPOCONDUTA,'')<>COALESCE(OLD.TIPOCONDUTA,'')) THEN TXT=TXT||',TIPOCONDUTA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TIPOCONDUTA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PERIODO,'')<>COALESCE(OLD.PERIODO,'')) THEN TXT=TXT||',PERIODO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PERIODO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.FAMILIARPRESO,'')<>COALESCE(OLD.FAMILIARPRESO,'')) THEN TXT=TXT||',FAMILIARPRESO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FAMILIARPRESO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PARENTESCOPRESO,'')<>COALESCE(OLD.PARENTESCOPRESO,'')) THEN TXT=TXT||',PARENTESCOPRESO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PARENTESCOPRESO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.UPFAMILIARPRESO,'')<>COALESCE(OLD.UPFAMILIARPRESO,'')) THEN TXT=TXT||',UPFAMILIARPRESO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.UPFAMILIARPRESO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MOTIVODELITO,'')<>COALESCE(OLD.MOTIVODELITO,'')) THEN TXT=TXT||',MOTIVODELITO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MOTIVODELITO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MAIORPERDA,'')<>COALESCE(OLD.MAIORPERDA,'')) THEN TXT=TXT||',MAIORPERDA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MAIORPERDA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PAISVIVOS,'')<>COALESCE(OLD.PAISVIVOS,'')) THEN TXT=TXT||',PAISVIVOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PAISVIVOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PAISSEPARADOS,'')<>COALESCE(OLD.PAISSEPARADOS,'')) THEN TXT=TXT||',PAISSEPARADOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PAISSEPARADOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDADEPAISSEPARADOS,'')<>COALESCE(OLD.IDADEPAISSEPARADOS,'')) THEN TXT=TXT||',IDADEPAISSEPARADOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.IDADEPAISSEPARADOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PROFISSAOPAIS,'')<>COALESCE(OLD.PROFISSAOPAIS,'')) THEN TXT=TXT||',PROFISSAOPAIS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROFISSAOPAIS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.QUEMCRIOU,'')<>COALESCE(OLD.QUEMCRIOU,'')) THEN TXT=TXT||',QUEMCRIOU = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.QUEMCRIOU,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TRABALHOFAMILIA,'')<>COALESCE(OLD.TRABALHOFAMILIA,'')) THEN TXT=TXT||',TRABALHOFAMILIA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRABALHOFAMILIA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.QTDEIRMAOS,'')<>COALESCE(OLD.QTDEIRMAOS,'')) THEN TXT=TXT||',QTDEIRMAOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.QTDEIRMAOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CRIADOIRMAOS,'')<>COALESCE(OLD.CRIADOIRMAOS,'')) THEN TXT=TXT||',CRIADOIRMAOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CRIADOIRMAOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MORADIA,'')<>COALESCE(OLD.MORADIA,'')) THEN TXT=TXT||',MORADIA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MORADIA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.REPRESENTACAOPAIS,'')<>COALESCE(OLD.REPRESENTACAOPAIS,'')) THEN TXT=TXT||',REPRESENTACAOPAIS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REPRESENTACAOPAIS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.EDUCACAORECEBIDA,'')<>COALESCE(OLD.EDUCACAORECEBIDA,'')) THEN TXT=TXT||',EDUCACAORECEBIDA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EDUCACAORECEBIDA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MUDANCAFAMILIA,'')<>COALESCE(OLD.MUDANCAFAMILIA,'')) THEN TXT=TXT||',MUDANCAFAMILIA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MUDANCAFAMILIA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.FUGACASA,'')<>COALESCE(OLD.FUGACASA,'')) THEN TXT=TXT||',FUGACASA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FUGACASA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CONDICOESCRIACAO,'')<>COALESCE(OLD.CONDICOESCRIACAO,'')) THEN TXT=TXT||',CONDICOESCRIACAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CONDICOESCRIACAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.INSTITUICAOASSISTENCIAL,'')<>COALESCE(OLD.INSTITUICAOASSISTENCIAL,'')) THEN TXT=TXT||',INSTITUICAOASSISTENCIAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.INSTITUICAOASSISTENCIAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.VIOLENCIADOMESTICA,'')<>COALESCE(OLD.VIOLENCIADOMESTICA,'')) THEN TXT=TXT||',VIOLENCIADOMESTICA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VIOLENCIADOMESTICA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MORADIAANTESPRESO,'')<>COALESCE(OLD.MORADIAANTESPRESO,'')) THEN TXT=TXT||',MORADIAANTESPRESO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MORADIAANTESPRESO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.RESIDENCIAFAMILIAR,'')<>COALESCE(OLD.RESIDENCIAFAMILIAR,'')) THEN TXT=TXT||',RESIDENCIAFAMILIAR = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RESIDENCIAFAMILIAR,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.QTDEFILHOS,'')<>COALESCE(OLD.QTDEFILHOS,'')) THEN TXT=TXT||',QTDEFILHOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.QTDEFILHOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.FILHOSMENORES16,'')<>COALESCE(OLD.FILHOSMENORES16,'')) THEN TXT=TXT||',FILHOSMENORES16 = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FILHOSMENORES16,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.FILHOSVIVEM,'')<>COALESCE(OLD.FILHOSVIVEM,'')) THEN TXT=TXT||',FILHOSVIVEM = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FILHOSVIVEM,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.FILHOADOCAO,'')<>COALESCE(OLD.FILHOADOCAO,'')) THEN TXT=TXT||',FILHOADOCAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FILHOADOCAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PROVEDORFAMILIA,'')<>COALESCE(OLD.PROVEDORFAMILIA,'')) THEN TXT=TXT||',PROVEDORFAMILIA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROVEDORFAMILIA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.RENDIMENTOFAMILIAR,'')<>COALESCE(OLD.RENDIMENTOFAMILIAR,'')) THEN TXT=TXT||',RENDIMENTOFAMILIAR = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RENDIMENTOFAMILIAR,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PROGRAMASOCIAL,'')<>COALESCE(OLD.PROGRAMASOCIAL,'')) THEN TXT=TXT||',PROGRAMASOCIAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROGRAMASOCIAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.AUXRECLUSAO,'')<>COALESCE(OLD.AUXRECLUSAO,'')) THEN TXT=TXT||',AUXRECLUSAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.AUXRECLUSAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.REPROVADOESCOLA,'')<>COALESCE(OLD.REPROVADOESCOLA,'')) THEN TXT=TXT||',REPROVADOESCOLA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REPROVADOESCOLA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDADETRABALHO,'')<>COALESCE(OLD.IDADETRABALHO,'')) THEN TXT=TXT||',IDADETRABALHO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.IDADETRABALHO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CURSOPROFISSIONALIZANTE,'')<>COALESCE(OLD.CURSOPROFISSIONALIZANTE,'')) THEN TXT=TXT||',CURSOPROFISSIONALIZANTE = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CURSOPROFISSIONALIZANTE,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.EXERCICIATRABALHO,'')<>COALESCE(OLD.EXERCICIATRABALHO,'')) THEN TXT=TXT||',EXERCICIATRABALHO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EXERCICIATRABALHO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.REGISTROCARTEIRA,'')<>COALESCE(OLD.REGISTROCARTEIRA,'')) THEN TXT=TXT||',REGISTROCARTEIRA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REGISTROCARTEIRA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TRABALHOUPANTERIOR,'')<>COALESCE(OLD.TRABALHOUPANTERIOR,'')) THEN TXT=TXT||',TRABALHOUPANTERIOR = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRABALHOUPANTERIOR,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DOCUMENTOS,'')<>COALESCE(OLD.DOCUMENTOS,'')) THEN TXT=TXT||',DOCUMENTOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOCUMENTOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.USODROGAS,'')<>COALESCE(OLD.USODROGAS,'')) THEN TXT=TXT||',USODROGAS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.USODROGAS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATADEPENDENCIA,'')<>COALESCE(OLD.DATADEPENDENCIA,'')) THEN TXT=TXT||',DATADEPENDENCIA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DATADEPENDENCIA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ABANDONODROGAS,'')<>COALESCE(OLD.ABANDONODROGAS,'')) THEN TXT=TXT||',ABANDONODROGAS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ABANDONODROGAS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DROGASCOMCRIME,'')<>COALESCE(OLD.DROGASCOMCRIME,'')) THEN TXT=TXT||',DROGASCOMCRIME = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DROGASCOMCRIME,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DOENCAGRAVE,'')<>COALESCE(OLD.DOENCAGRAVE,'')) THEN TXT=TXT||',DOENCAGRAVE = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCAGRAVE,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DOENCAMENTAL,'')<>COALESCE(OLD.DOENCAMENTAL,'')) THEN TXT=TXT||',DOENCAMENTAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCAMENTAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PROBLEMASAUDE,'')<>COALESCE(OLD.PROBLEMASAUDE,'')) THEN TXT=TXT||',PROBLEMASAUDE = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROBLEMASAUDE,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DOENCALABORAL,'')<>COALESCE(OLD.DOENCALABORAL,'')) THEN TXT=TXT||',DOENCALABORAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCALABORAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.VISITAOUTRAPESSOA,'')<>COALESCE(OLD.VISITAOUTRAPESSOA,'')) THEN TXT=TXT||',VISITAOUTRAPESSOA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VISITAOUTRAPESSOA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ESTUDOCUMPENA,'')<>COALESCE(OLD.ESTUDOCUMPENA,'')) THEN TXT=TXT||',ESTUDOCUMPENA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ESTUDOCUMPENA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TRABALHOCUMPENA,'')<>COALESCE(OLD.TRABALHOCUMPENA,'')) THEN TXT=TXT||',TRABALHOCUMPENA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRABALHOCUMPENA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PROFISSAOCUMPENA,'')<>COALESCE(OLD.PROFISSAOCUMPENA,'')) THEN TXT=TXT||',PROFISSAOCUMPENA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PROFISSAOCUMPENA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATAPSICOSSOCIAL,'')<>COALESCE(OLD.DATAPSICOSSOCIAL,'')) THEN TXT=TXT||',DATAPSICOSSOCIAL = '||COALESCE(''''||NEW.DATAPSICOSSOCIAL||'''','NULL');
IF (COALESCE(NEW.IDTECNICO,'')<>COALESCE(OLD.IDTECNICO,'')) THEN TXT=TXT||',IDTECNICO = '||COALESCE(NEW.IDTECNICO,'NULL');
IF (COALESCE(NEW.OBSPSICOSSOCIAL,'')<>COALESCE(OLD.OBSPSICOSSOCIAL,'')) THEN TXT=TXT||',OBSPSICOSSOCIAL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OBSPSICOSSOCIAL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATA_DELITO,'')<>COALESCE(OLD.DATA_DELITO,'')) THEN TXT=TXT||',DATA_DELITO = '||COALESCE(''''||NEW.DATA_DELITO||'''','NULL');
IF (COALESCE(NEW.DATA_REABILITACAO,'')<>COALESCE(OLD.DATA_REABILITACAO,'')) THEN TXT=TXT||',DATA_REABILITACAO = '||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL');
IF (COALESCE(NEW.MP,'')<>COALESCE(OLD.MP,'')) THEN TXT=TXT||',MP = '||COALESCE(NEW.MP,'NULL');
IF (COALESCE(NEW.SUICIDIO,'')<>COALESCE(OLD.SUICIDIO,'')) THEN TXT=TXT||',SUICIDIO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SUICIDIO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.CID,'')<>COALESCE(OLD.CID,'')) THEN TXT=TXT||',CID = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.CID,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.EFEITOSDROGA,'')<>COALESCE(OLD.EFEITOSDROGA,'')) THEN TXT=TXT||',EFEITOSDROGA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EFEITOSDROGA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.SINTOMASDEPRESSIVOS,'')<>COALESCE(OLD.SINTOMASDEPRESSIVOS,'')) THEN TXT=TXT||',SINTOMASDEPRESSIVOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SINTOMASDEPRESSIVOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.EPISODIOSHUMOR,'')<>COALESCE(OLD.EPISODIOSHUMOR,'')) THEN TXT=TXT||',EPISODIOSHUMOR = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EPISODIOSHUMOR,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.SINTOMASPSICOTICOS,'')<>COALESCE(OLD.SINTOMASPSICOTICOS,'')) THEN TXT=TXT||',SINTOMASPSICOTICOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SINTOMASPSICOTICOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DELIRIOS,'')<>COALESCE(OLD.DELIRIOS,'')) THEN TXT=TXT||',DELIRIOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DELIRIOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ALUCINACOES,'')<>COALESCE(OLD.ALUCINACOES,'')) THEN TXT=TXT||',ALUCINACOES = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ALUCINACOES,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.PERSONALIDADE,'')<>COALESCE(OLD.PERSONALIDADE,'')) THEN TXT=TXT||',PERSONALIDADE = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PERSONALIDADE,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.VISITANTES,'')<>COALESCE(OLD.VISITANTES,'')) THEN TXT=TXT||',VISITANTES = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VISITANTES,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MEDICACAOCONTROLADA,'')<>COALESCE(OLD.MEDICACAOCONTROLADA,'')) THEN TXT=TXT||',MEDICACAOCONTROLADA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MEDICACAOCONTROLADA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DOENCAINFECTOCONTAGIOSA,'')<>COALESCE(OLD.DOENCAINFECTOCONTAGIOSA,'')) THEN TXT=TXT||',DOENCAINFECTOCONTAGIOSA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.DOENCAINFECTOCONTAGIOSA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TRATAMENTOINFECTO,'')<>COALESCE(OLD.TRATAMENTOINFECTO,'')) THEN TXT=TXT||',TRATAMENTOINFECTO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TRATAMENTOINFECTO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.RESULTADOINFECTO,'')<>COALESCE(OLD.RESULTADOINFECTO,'')) THEN TXT=TXT||',RESULTADOINFECTO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.RESULTADOINFECTO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.SITUACAOCIVIL,'')<>COALESCE(OLD.SITUACAOCIVIL,'')) THEN TXT=TXT||',SITUACAOCIVIL = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.SITUACAOCIVIL,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MEDIDASEGURANCA,'')<>COALESCE(OLD.MEDIDASEGURANCA,'')) THEN TXT=TXT||',MEDIDASEGURANCA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MEDIDASEGURANCA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.FACCAO,'')<>COALESCE(OLD.FACCAO,'')) THEN TXT=TXT||',FACCAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.FACCAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.VARA_ORIGEM,'')<>COALESCE(OLD.VARA_ORIGEM,'')) THEN TXT=TXT||',VARA_ORIGEM = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.VARA_ORIGEM,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.EM_TRANSITO,'')<>COALESCE(OLD.EM_TRANSITO,'')) THEN TXT=TXT||',EM_TRANSITO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.EM_TRANSITO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.NUMERO_INFOPEN,'')<>COALESCE(OLD.NUMERO_INFOPEN,'')) THEN TXT=TXT||',NUMERO_INFOPEN = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NUMERO_INFOPEN,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.REINCERSAO,'')<>COALESCE(OLD.REINCERSAO,'')) THEN TXT=TXT||',REINCERSAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.REINCERSAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.IDPAIS_ENDERECO,'')<>COALESCE(OLD.IDPAIS_ENDERECO,'')) THEN TXT=TXT||',IDPAIS_ENDERECO = '||COALESCE(NEW.IDPAIS_ENDERECO,'NULL');
IF (COALESCE(NEW.OUTROS_ADVOGADOS,'')<>COALESCE(OLD.OUTROS_ADVOGADOS,'')) THEN TXT=TXT||',OUTROS_ADVOGADOS = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.OUTROS_ADVOGADOS,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TITULO_ELEITOR,'')<>COALESCE(OLD.TITULO_ELEITOR,'')) THEN TXT=TXT||',TITULO_ELEITOR = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TITULO_ELEITOR,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.TIPOREGIME,'')<>COALESCE(OLD.TIPOREGIME,'')) THEN TXT=TXT||',TIPOREGIME = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.TIPOREGIME,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.DATA_PERMANENCIA,'')<>COALESCE(OLD.DATA_PERMANENCIA,'')) THEN TXT=TXT||',DATA_PERMANENCIA = '||COALESCE(''''||NEW.DATA_PERMANENCIA||'''','NULL');
IF (COALESCE(NEW.PASSAGEM_SPF,'')<>COALESCE(OLD.PASSAGEM_SPF,'')) THEN TXT=TXT||',PASSAGEM_SPF = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.PASSAGEM_SPF,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.MOTIVACAO_INCLUSAO,'')<>COALESCE(OLD.MOTIVACAO_INCLUSAO,'')) THEN TXT=TXT||',MOTIVACAO_INCLUSAO = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.MOTIVACAO_INCLUSAO,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.NUMERO_ROUPA,'')<>COALESCE(OLD.NUMERO_ROUPA,'')) THEN TXT=TXT||',NUMERO_ROUPA = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.NUMERO_ROUPA,'''',''''''))||'''','NULL');
IF (COALESCE(NEW.ORGAO_EMISSOR_RG,'')<>COALESCE(OLD.ORGAO_EMISSOR_RG,'')) THEN TXT=TXT||',ORGAO_EMISSOR_RG = '||
COALESCE(''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.ORGAO_EMISSOR_RG,'''',''''''))||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE INTERNO SET ID_INTERNO = '''||NEW.ID_INTERNO||''''||TXT||' WHERE ID_INTERNO = '''||NEW.ID_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: INTERNO_BD0 */
CREATE TRIGGER INTERNO_BD0 FOR INTERNO
ACTIVE BEFORE DELETE POSITION 0
AS
begin
--  exception messagem_diversas 'Nao pode deletar.';
end
^

/* Trigger: INTERNO_BD_LOG */
CREATE TRIGGER INTERNO_BD_LOG FOR INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 09:38:12.4530

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO INTERNO (ID_INTERNO,'
||' NOME_INTERNO,'
||' RGI,'
||' IDPROFISSAO,'
||' IDGALERIA,'
||' IDPAVILHAO,'
||' IDSOLARIO,'
||' IDCELA,'
||' DATA_ENTRADA,'
||' MAE,'
||' PAI,'
||' IDNATURALIDADE,'
||' IDNACIONALIDADE,'
||' IDRACA,'
||' IDESCOLARIDADE,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENETO,'
||' CEP,'
||' IDCIDADE,'
||' FONE,'
||' CONTATO,'
||' RELIGIAO,'
||' IDADVOGADO,'
||' ID_PROCEDENCIA,'
||' CONDENACAO,'
||' DATA_PRISAO,'
||' HISTORICO,'
||' ST,'
||' SEXO,'
||' ID_UP,'
||' IDCONDICAO_INTERNO,'
||' IDDESTINO,'
||' ID_FUNCIONARIO,'
||' STATUS_ISOLAMENTO,'
||' IDSETOR_TRABALHO,'
||' DATA_SETOR,'
||' DATA_SAIDA,'
||' MOTIVO_SAIDA,'
||' ID_FUNCAOINTERNO,'
||' OBSTRABALHO,'
||' DATA_NASCIMENTO,'
||' RG,'
||' CPF,'
||' ESTADO_CIVIL,'
||' VULGO,'
||' OUTRO_NOME,'
||' SINAIS_PARTICULARES,'
||' ALTURA,'
||' PESO,'
||' CI,'
||' CISAIDA,'
||' ARTIGO,'
||' DATA_ISOLAMENTO,'
||' DATA_MATRICULA,'
||' OBSEDUCACAO,'
||' DEFICIENCIA,'
||' IDSERIEESTUDO,'
||' COR_OLHOS,'
||' COR_CABELOS,'
||' NOME_SOCIAL,'
||' ORIENTACAO_SEXUAL,'
||' IDENTIDADE_GENERO,'
||' HISTORICO_VELHO,'
||' TIPOPROCESSO,'
||' CONCEITO_DISCIPLINAR,'
||' TIPOCONDUTA,'
||' PERIODO,'
||' FAMILIARPRESO,'
||' PARENTESCOPRESO,'
||' UPFAMILIARPRESO,'
||' MOTIVODELITO,'
||' MAIORPERDA,'
||' PAISVIVOS,'
||' PAISSEPARADOS,'
||' IDADEPAISSEPARADOS,'
||' PROFISSAOPAIS,'
||' QUEMCRIOU,'
||' TRABALHOFAMILIA,'
||' QTDEIRMAOS,'
||' CRIADOIRMAOS,'
||' MORADIA,'
||' REPRESENTACAOPAIS,'
||' EDUCACAORECEBIDA,'
||' MUDANCAFAMILIA,'
||' FUGACASA,'
||' CONDICOESCRIACAO,'
||' INSTITUICAOASSISTENCIAL,'
||' VIOLENCIADOMESTICA,'
||' MORADIAANTESPRESO,'
||' RESIDENCIAFAMILIAR,'
||' QTDEFILHOS,'
||' FILHOSMENORES16,'
||' FILHOSVIVEM,'
||' FILHOADOCAO,'
||' PROVEDORFAMILIA,'
||' RENDIMENTOFAMILIAR,'
||' PROGRAMASOCIAL,'
||' AUXRECLUSAO,'
||' REPROVADOESCOLA,'
||' IDADETRABALHO,'
||' CURSOPROFISSIONALIZANTE,'
||' EXERCICIATRABALHO,'
||' REGISTROCARTEIRA,'
||' TRABALHOUPANTERIOR,'
||' DOCUMENTOS,'
||' USODROGAS,'
||' DATADEPENDENCIA,'
||' ABANDONODROGAS,'
||' DROGASCOMCRIME,'
||' DOENCAGRAVE,'
||' DOENCAMENTAL,'
||' PROBLEMASAUDE,'
||' DOENCALABORAL,'
||' VISITAOUTRAPESSOA,'
||' ESTUDOCUMPENA,'
||' TRABALHOCUMPENA,'
||' PROFISSAOCUMPENA,'
||' DATAPSICOSSOCIAL,'
||' IDTECNICO,'
||' OBSPSICOSSOCIAL,'
||' DATA_DELITO,'
||' DATA_REABILITACAO,'
||' MP,'
||' SUICIDIO,'
||' CID,'
||' EFEITOSDROGA,'
||' SINTOMASDEPRESSIVOS,'
||' EPISODIOSHUMOR,'
||' SINTOMASPSICOTICOS,'
||' DELIRIOS,'
||' ALUCINACOES,'
||' PERSONALIDADE,'
||' VISITANTES,'
||' MEDICACAOCONTROLADA,'
||' DOENCAINFECTOCONTAGIOSA,'
||' TRATAMENTOINFECTO,'
||' RESULTADOINFECTO,'
||' SITUACAOCIVIL,'
||' MEDIDASEGURANCA,'
||' FACCAO,'
||' VARA_ORIGEM,'
||' EM_TRANSITO,'
||' NUMERO_INFOPEN,'
||' REINCERSAO,'
||' IDPAIS_ENDERECO,'
||' OUTROS_ADVOGADOS,'
||' TITULO_ELEITOR,'
||' TIPOREGIME,'
||' DATA_PERMANENCIA,'
||' PASSAGEM_SPF,'
||' MOTIVACAO_INCLUSAO,'
||' NUMERO_ROUPA,'
||' ORGAO_EMISSOR_RG) VALUES ('
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.NOME_INTERNO||'''','NULL')||','
||COALESCE(''''||OLD.RGI||'''','NULL')||','
||COALESCE(OLD.IDPROFISSAO,'NULL')||','
||COALESCE(OLD.IDGALERIA,'NULL')||','
||COALESCE(OLD.IDPAVILHAO,'NULL')||','
||COALESCE(OLD.IDSOLARIO,'NULL')||','
||COALESCE(OLD.IDCELA,'NULL')||','
||COALESCE(''''||OLD.DATA_ENTRADA||'''','NULL')||','
||COALESCE(''''||OLD.MAE||'''','NULL')||','
||COALESCE(''''||OLD.PAI||'''','NULL')||','
||COALESCE(OLD.IDNATURALIDADE,'NULL')||','
||COALESCE(OLD.IDNACIONALIDADE,'NULL')||','
||COALESCE(OLD.IDRACA,'NULL')||','
||COALESCE(OLD.IDESCOLARIDADE,'NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO||'''','NULL')||','
||COALESCE(''''||OLD.BAIRRO||'''','NULL')||','
||COALESCE(''''||OLD.COMPLEMENETO||'''','NULL')||','
||COALESCE(''''||OLD.CEP||'''','NULL')||','
||COALESCE(OLD.IDCIDADE,'NULL')||','
||COALESCE(''''||OLD.FONE||'''','NULL')||','
||COALESCE(''''||OLD.CONTATO||'''','NULL')||','
||COALESCE(''''||OLD.RELIGIAO||'''','NULL')||','
||COALESCE(OLD.IDADVOGADO,'NULL')||','
||COALESCE(OLD.ID_PROCEDENCIA,'NULL')||','
||COALESCE(''''||OLD.CONDENACAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_PRISAO||'''','NULL')||','
||COALESCE(''''||OLD.HISTORICO||'''','NULL')||','
||COALESCE(''''||OLD.ST||'''','NULL')||','
||COALESCE(''''||OLD.SEXO||'''','NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(OLD.IDCONDICAO_INTERNO,'NULL')||','
||COALESCE(OLD.IDDESTINO,'NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||OLD.STATUS_ISOLAMENTO||'''','NULL')||','
||COALESCE(OLD.IDSETOR_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.DATA_SETOR||'''','NULL')||','
||COALESCE(''''||OLD.DATA_SAIDA||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVO_SAIDA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCAOINTERNO,'NULL')||','
||COALESCE(''''||OLD.OBSTRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.RG||'''','NULL')||','
||COALESCE(''''||OLD.CPF||'''','NULL')||','
||COALESCE(''''||OLD.ESTADO_CIVIL||'''','NULL')||','
||COALESCE(''''||OLD.VULGO||'''','NULL')||','
||COALESCE(''''||OLD.OUTRO_NOME||'''','NULL')||','
||COALESCE(''''||OLD.SINAIS_PARTICULARES||'''','NULL')||','
||COALESCE(''''||OLD.ALTURA||'''','NULL')||','
||COALESCE(''''||OLD.PESO||'''','NULL')||','
||COALESCE(''''||OLD.CI||'''','NULL')||','
||COALESCE(''''||OLD.CISAIDA||'''','NULL')||','
||COALESCE(''''||OLD.ARTIGO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_ISOLAMENTO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_MATRICULA||'''','NULL')||','
||COALESCE(''''||OLD.OBSEDUCACAO||'''','NULL')||','
||COALESCE(''''||OLD.DEFICIENCIA||'''','NULL')||','
||COALESCE(OLD.IDSERIEESTUDO,'NULL')||','
||COALESCE(''''||OLD.COR_OLHOS||'''','NULL')||','
||COALESCE(''''||OLD.COR_CABELOS||'''','NULL')||','
||COALESCE(''''||OLD.NOME_SOCIAL||'''','NULL')||','
||COALESCE(''''||OLD.ORIENTACAO_SEXUAL||'''','NULL')||','
||COALESCE(''''||OLD.IDENTIDADE_GENERO||'''','NULL')||','
||COALESCE(''''||OLD.HISTORICO_VELHO||'''','NULL')||','
||COALESCE(''''||OLD.TIPOPROCESSO||'''','NULL')||','
||COALESCE(''''||OLD.CONCEITO_DISCIPLINAR||'''','NULL')||','
||COALESCE(''''||OLD.TIPOCONDUTA||'''','NULL')||','
||COALESCE(''''||OLD.PERIODO||'''','NULL')||','
||COALESCE(''''||OLD.FAMILIARPRESO||'''','NULL')||','
||COALESCE(''''||OLD.PARENTESCOPRESO||'''','NULL')||','
||COALESCE(''''||OLD.UPFAMILIARPRESO||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVODELITO||'''','NULL')||','
||COALESCE(''''||OLD.MAIORPERDA||'''','NULL')||','
||COALESCE(''''||OLD.PAISVIVOS||'''','NULL')||','
||COALESCE(''''||OLD.PAISSEPARADOS||'''','NULL')||','
||COALESCE(''''||OLD.IDADEPAISSEPARADOS||'''','NULL')||','
||COALESCE(''''||OLD.PROFISSAOPAIS||'''','NULL')||','
||COALESCE(''''||OLD.QUEMCRIOU||'''','NULL')||','
||COALESCE(''''||OLD.TRABALHOFAMILIA||'''','NULL')||','
||COALESCE(''''||OLD.QTDEIRMAOS||'''','NULL')||','
||COALESCE(''''||OLD.CRIADOIRMAOS||'''','NULL')||','
||COALESCE(''''||OLD.MORADIA||'''','NULL')||','
||COALESCE(''''||OLD.REPRESENTACAOPAIS||'''','NULL')||','
||COALESCE(''''||OLD.EDUCACAORECEBIDA||'''','NULL')||','
||COALESCE(''''||OLD.MUDANCAFAMILIA||'''','NULL')||','
||COALESCE(''''||OLD.FUGACASA||'''','NULL')||','
||COALESCE(''''||OLD.CONDICOESCRIACAO||'''','NULL')||','
||COALESCE(''''||OLD.INSTITUICAOASSISTENCIAL||'''','NULL')||','
||COALESCE(''''||OLD.VIOLENCIADOMESTICA||'''','NULL')||','
||COALESCE(''''||OLD.MORADIAANTESPRESO||'''','NULL')||','
||COALESCE(''''||OLD.RESIDENCIAFAMILIAR||'''','NULL')||','
||COALESCE(''''||OLD.QTDEFILHOS||'''','NULL')||','
||COALESCE(''''||OLD.FILHOSMENORES16||'''','NULL')||','
||COALESCE(''''||OLD.FILHOSVIVEM||'''','NULL')||','
||COALESCE(''''||OLD.FILHOADOCAO||'''','NULL')||','
||COALESCE(''''||OLD.PROVEDORFAMILIA||'''','NULL')||','
||COALESCE(''''||OLD.RENDIMENTOFAMILIAR||'''','NULL')||','
||COALESCE(''''||OLD.PROGRAMASOCIAL||'''','NULL')||','
||COALESCE(''''||OLD.AUXRECLUSAO||'''','NULL')||','
||COALESCE(''''||OLD.REPROVADOESCOLA||'''','NULL')||','
||COALESCE(''''||OLD.IDADETRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.CURSOPROFISSIONALIZANTE||'''','NULL')||','
||COALESCE(''''||OLD.EXERCICIATRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.REGISTROCARTEIRA||'''','NULL')||','
||COALESCE(''''||OLD.TRABALHOUPANTERIOR||'''','NULL')||','
||COALESCE(''''||OLD.DOCUMENTOS||'''','NULL')||','
||COALESCE(''''||OLD.USODROGAS||'''','NULL')||','
||COALESCE(''''||OLD.DATADEPENDENCIA||'''','NULL')||','
||COALESCE(''''||OLD.ABANDONODROGAS||'''','NULL')||','
||COALESCE(''''||OLD.DROGASCOMCRIME||'''','NULL')||','
||COALESCE(''''||OLD.DOENCAGRAVE||'''','NULL')||','
||COALESCE(''''||OLD.DOENCAMENTAL||'''','NULL')||','
||COALESCE(''''||OLD.PROBLEMASAUDE||'''','NULL')||','
||COALESCE(''''||OLD.DOENCALABORAL||'''','NULL')||','
||COALESCE(''''||OLD.VISITAOUTRAPESSOA||'''','NULL')||','
||COALESCE(''''||OLD.ESTUDOCUMPENA||'''','NULL')||','
||COALESCE(''''||OLD.TRABALHOCUMPENA||'''','NULL')||','
||COALESCE(''''||OLD.PROFISSAOCUMPENA||'''','NULL')||','
||COALESCE(''''||OLD.DATAPSICOSSOCIAL||'''','NULL')||','
||COALESCE(OLD.IDTECNICO,'NULL')||','
||COALESCE(''''||OLD.OBSPSICOSSOCIAL||'''','NULL')||','
||COALESCE(''''||OLD.DATA_DELITO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_REABILITACAO||'''','NULL')||','
||COALESCE(OLD.MP,'NULL')||','
||COALESCE(''''||OLD.SUICIDIO||'''','NULL')||','
||COALESCE(''''||OLD.CID||'''','NULL')||','
||COALESCE(''''||OLD.EFEITOSDROGA||'''','NULL')||','
||COALESCE(''''||OLD.SINTOMASDEPRESSIVOS||'''','NULL')||','
||COALESCE(''''||OLD.EPISODIOSHUMOR||'''','NULL')||','
||COALESCE(''''||OLD.SINTOMASPSICOTICOS||'''','NULL')||','
||COALESCE(''''||OLD.DELIRIOS||'''','NULL')||','
||COALESCE(''''||OLD.ALUCINACOES||'''','NULL')||','
||COALESCE(''''||OLD.PERSONALIDADE||'''','NULL')||','
||COALESCE(''''||OLD.VISITANTES||'''','NULL')||','
||COALESCE(''''||OLD.MEDICACAOCONTROLADA||'''','NULL')||','
||COALESCE(''''||OLD.DOENCAINFECTOCONTAGIOSA||'''','NULL')||','
||COALESCE(''''||OLD.TRATAMENTOINFECTO||'''','NULL')||','
||COALESCE(''''||OLD.RESULTADOINFECTO||'''','NULL')||','
||COALESCE(''''||OLD.SITUACAOCIVIL||'''','NULL')||','
||COALESCE(''''||OLD.MEDIDASEGURANCA||'''','NULL')||','
||COALESCE(''''||OLD.FACCAO||'''','NULL')||','
||COALESCE(''''||OLD.VARA_ORIGEM||'''','NULL')||','
||COALESCE(''''||OLD.EM_TRANSITO||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO_INFOPEN||'''','NULL')||','
||COALESCE(''''||OLD.REINCERSAO||'''','NULL')||','
||COALESCE(OLD.IDPAIS_ENDERECO,'NULL')||','
||COALESCE(''''||OLD.OUTROS_ADVOGADOS||'''','NULL')||','
||COALESCE(''''||OLD.TITULO_ELEITOR||'''','NULL')||','
||COALESCE(''''||OLD.TIPOREGIME||'''','NULL')||','
||COALESCE(''''||OLD.DATA_PERMANENCIA||'''','NULL')||','
||COALESCE(''''||OLD.PASSAGEM_SPF||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVACAO_INCLUSAO||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO_ROUPA||'''','NULL')||','
||COALESCE(''''||OLD.ORGAO_EMISSOR_RG||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'INTERNO', OLD.ID_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: INTERNO_BI0 */
CREATE TRIGGER INTERNO_BI0 FOR INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_interno IS null or (new.id_interno = 0)  ) then
    new.id_interno = gen_id (cod_up, 0) || gen_id (id_interno, 1);

    if (new.st is null) then
      new.st = 'A' ;

    if (NEW.IDPAVILHAO is not null) then
    begin
     SELECT ID_UP FROM PAVILHAO WHERE PAVILHAO.ID_PAVILHAO=NEW.IDPAVILHAO
     INTO NEW.ID_UP ;
    end


--    if (LTRIM(RTRIM(COALESCE(NEW.rgi,'')))='') then
--      NEW.rgi = 'NAO INFORMADO';

--    if (COALESCE(NEW.data_entrada,0)=0) then
--      NEW.data_entrada = CURRENT_DATE;

--    if (COALESCE(NEW.data_prisao,0)=0) then
--      NEW.data_prisao = NEW.data_entrada;



end
^

/* Trigger: INTERNO_BIU0 */
CREATE TRIGGER INTERNO_BIU0 FOR INTERNO
INACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
declare variable idsetor integer;
declare variable data varchar(7);
declare variable descricao varchar(50);
begin
  --se for novo ativo e antigo inativo: limpa o setor trabalho;
  if (new.st='A' and old.st='I') then
  begin
    new.idsetor_trabalho = null;
  end


  if (new.idsetor_trabalho is null and (new.st <> 'I')) then
  begin
    
      select
        ltrim(rtrim(substr(extract(month from current_date)+100,2,3)||'/'||
        substr(extract(year from current_date)+10000,2,5)))
      from rdb$database
      into :data;
    
      idsetor = 0;
      descricao = 'Z - VAGA - '||:data;
    
      select first 1 id_setor_trabalho
      from setor_trabalho
      where setor_trabalho = :descricao
      into :idsetor;
    
      if (idsetor=0) then
      begin
        insert into setor_trabalho (id_setor_trabalho, setor_trabalho)
        values (:idsetor, :descricao);
      end
    
      select first 1 id_setor_trabalho
      from setor_trabalho
      where setor_trabalho = :descricao
      into :idsetor;

      new.idsetor_trabalho = :idsetor;

  end

end
^

/* Trigger: INTERNO_BIU_LIMPA_VARCHAR */
CREATE TRIGGER INTERNO_BIU_LIMPA_VARCHAR FOR INTERNO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
begin
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.CPF) INTO NEW.CPF;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.HISTORICO) INTO NEW.HISTORICO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.CONTATO) INTO NEW.CONTATO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.ENDERECO) INTO NEW.ENDERECO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.IDENTIDADE_GENERO) INTO NEW.IDENTIDADE_GENERO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.MAE) INTO NEW.MAE;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.NOME_INTERNO) INTO NEW.NOME_INTERNO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.NOME_SOCIAL) INTO NEW.NOME_SOCIAL;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.ORIENTACAO_SEXUAL) INTO NEW.ORIENTACAO_SEXUAL;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.PAI) INTO NEW.PAI;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.RELIGIAO) INTO NEW.RELIGIAO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.FONE) INTO NEW.FONE;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.NUMERO) INTO NEW.NUMERO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.CEP) INTO NEW.CEP;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.ST) INTO NEW.ST;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.SEXO) INTO NEW.SEXO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.ALTURA) INTO NEW.ALTURA;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.BAIRRO) INTO NEW.BAIRRO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.CI) INTO NEW.CI;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.CISAIDA) INTO NEW.CISAIDA;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.COMPLEMENETO) INTO NEW.COMPLEMENETO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.ESTADO_CIVIL) INTO NEW.ESTADO_CIVIL;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.PESO) INTO NEW.PESO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.RG) INTO NEW.RG;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.RGI) INTO NEW.RGI;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.STATUS_ISOLAMENTO) INTO NEW.STATUS_ISOLAMENTO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.ARTIGO) INTO NEW.ARTIGO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.COR_CABELOS) INTO NEW.COR_CABELOS;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.CONDENACAO) INTO NEW.CONDENACAO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.COR_OLHOS) INTO NEW.COR_OLHOS;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.DEFICIENCIA) INTO NEW.DEFICIENCIA;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.MOTIVO_SAIDA) INTO NEW.MOTIVO_SAIDA;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.OUTRO_NOME) INTO NEW.OUTRO_NOME;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.OBSTRABALHO) INTO NEW.OBSTRABALHO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.VULGO) INTO NEW.VULGO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.SINAIS_PARTICULARES) INTO NEW.SINAIS_PARTICULARES;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.HISTORICO_VELHO) INTO NEW.HISTORICO_VELHO;
SELECT RETORNO FROM SP_LIMPA_CHAR(NEW.OBSEDUCACAO) INTO NEW.OBSEDUCACAO;

end
^

/* Trigger: INTERNO_BI_LOG */
CREATE TRIGGER INTERNO_BI_LOG FOR INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 09:38:12.4530

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO INTERNO (ID_INTERNO,'
||' NOME_INTERNO,'
||' RGI,'
||' IDPROFISSAO,'
||' IDGALERIA,'
||' IDPAVILHAO,'
||' IDSOLARIO,'
||' IDCELA,'
||' DATA_ENTRADA,'
||' MAE,'
||' PAI,'
||' IDNATURALIDADE,'
||' IDNACIONALIDADE,'
||' IDRACA,'
||' IDESCOLARIDADE,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENETO,'
||' CEP,'
||' IDCIDADE,'
||' FONE,'
||' CONTATO,'
||' RELIGIAO,'
||' IDADVOGADO,'
||' ID_PROCEDENCIA,'
||' CONDENACAO,'
||' DATA_PRISAO,'
||' HISTORICO,'
||' ST,'
||' SEXO,'
||' ID_UP,'
||' IDCONDICAO_INTERNO,'
||' IDDESTINO,'
||' ID_FUNCIONARIO,'
||' STATUS_ISOLAMENTO,'
||' IDSETOR_TRABALHO,'
||' DATA_SETOR,'
||' DATA_SAIDA,'
||' MOTIVO_SAIDA,'
||' ID_FUNCAOINTERNO,'
||' OBSTRABALHO,'
||' DATA_NASCIMENTO,'
||' RG,'
||' CPF,'
||' ESTADO_CIVIL,'
||' VULGO,'
||' OUTRO_NOME,'
||' SINAIS_PARTICULARES,'
||' ALTURA,'
||' PESO,'
||' CI,'
||' CISAIDA,'
||' ARTIGO,'
||' DATA_ISOLAMENTO,'
||' DATA_MATRICULA,'
||' OBSEDUCACAO,'
||' DEFICIENCIA,'
||' IDSERIEESTUDO,'
||' COR_OLHOS,'
||' COR_CABELOS,'
||' NOME_SOCIAL,'
||' ORIENTACAO_SEXUAL,'
||' IDENTIDADE_GENERO,'
||' HISTORICO_VELHO,'
||' TIPOPROCESSO,'
||' CONCEITO_DISCIPLINAR,'
||' TIPOCONDUTA,'
||' PERIODO,'
||' FAMILIARPRESO,'
||' PARENTESCOPRESO,'
||' UPFAMILIARPRESO,'
||' MOTIVODELITO,'
||' MAIORPERDA,'
||' PAISVIVOS,'
||' PAISSEPARADOS,'
||' IDADEPAISSEPARADOS,'
||' PROFISSAOPAIS,'
||' QUEMCRIOU,'
||' TRABALHOFAMILIA,'
||' QTDEIRMAOS,'
||' CRIADOIRMAOS,'
||' MORADIA,'
||' REPRESENTACAOPAIS,'
||' EDUCACAORECEBIDA,'
||' MUDANCAFAMILIA,'
||' FUGACASA,'
||' CONDICOESCRIACAO,'
||' INSTITUICAOASSISTENCIAL,'
||' VIOLENCIADOMESTICA,'
||' MORADIAANTESPRESO,'
||' RESIDENCIAFAMILIAR,'
||' QTDEFILHOS,'
||' FILHOSMENORES16,'
||' FILHOSVIVEM,'
||' FILHOADOCAO,'
||' PROVEDORFAMILIA,'
||' RENDIMENTOFAMILIAR,'
||' PROGRAMASOCIAL,'
||' AUXRECLUSAO,'
||' REPROVADOESCOLA,'
||' IDADETRABALHO,'
||' CURSOPROFISSIONALIZANTE,'
||' EXERCICIATRABALHO,'
||' REGISTROCARTEIRA,'
||' TRABALHOUPANTERIOR,'
||' DOCUMENTOS,'
||' USODROGAS,'
||' DATADEPENDENCIA,'
||' ABANDONODROGAS,'
||' DROGASCOMCRIME,'
||' DOENCAGRAVE,'
||' DOENCAMENTAL,'
||' PROBLEMASAUDE,'
||' DOENCALABORAL,'
||' VISITAOUTRAPESSOA,'
||' ESTUDOCUMPENA,'
||' TRABALHOCUMPENA,'
||' PROFISSAOCUMPENA,'
||' DATAPSICOSSOCIAL,'
||' IDTECNICO,'
||' OBSPSICOSSOCIAL,'
||' DATA_DELITO,'
||' DATA_REABILITACAO,'
||' MP,'
||' SUICIDIO,'
||' CID,'
||' EFEITOSDROGA,'
||' SINTOMASDEPRESSIVOS,'
||' EPISODIOSHUMOR,'
||' SINTOMASPSICOTICOS,'
||' DELIRIOS,'
||' ALUCINACOES,'
||' PERSONALIDADE,'
||' VISITANTES,'
||' MEDICACAOCONTROLADA,'
||' DOENCAINFECTOCONTAGIOSA,'
||' TRATAMENTOINFECTO,'
||' RESULTADOINFECTO,'
||' SITUACAOCIVIL,'
||' MEDIDASEGURANCA,'
||' FACCAO,'
||' VARA_ORIGEM,'
||' EM_TRANSITO,'
||' NUMERO_INFOPEN,'
||' REINCERSAO,'
||' IDPAIS_ENDERECO,'
||' OUTROS_ADVOGADOS,'
||' TITULO_ELEITOR,'
||' TIPOREGIME,'
||' DATA_PERMANENCIA,'
||' PASSAGEM_SPF,'
||' MOTIVACAO_INCLUSAO,'
||' NUMERO_ROUPA,'
||' ORGAO_EMISSOR_RG) VALUES ('
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NOME_INTERNO||'''','NULL')||','
||COALESCE(''''||NEW.RGI||'''','NULL')||','
||COALESCE(NEW.IDPROFISSAO,'NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(NEW.IDSOLARIO,'NULL')||','
||COALESCE(NEW.IDCELA,'NULL')||','
||COALESCE(''''||NEW.DATA_ENTRADA||'''','NULL')||','
||COALESCE(''''||NEW.MAE||'''','NULL')||','
||COALESCE(''''||NEW.PAI||'''','NULL')||','
||COALESCE(NEW.IDNATURALIDADE,'NULL')||','
||COALESCE(NEW.IDNACIONALIDADE,'NULL')||','
||COALESCE(NEW.IDRACA,'NULL')||','
||COALESCE(NEW.IDESCOLARIDADE,'NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENETO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(NEW.IDCIDADE,'NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||','
||COALESCE(''''||NEW.RELIGIAO||'''','NULL')||','
||COALESCE(NEW.IDADVOGADO,'NULL')||','
||COALESCE(NEW.ID_PROCEDENCIA,'NULL')||','
||COALESCE(''''||NEW.CONDENACAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_PRISAO||'''','NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.IDCONDICAO_INTERNO,'NULL')||','
||COALESCE(NEW.IDDESTINO,'NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(''''||NEW.STATUS_ISOLAMENTO||'''','NULL')||','
||COALESCE(NEW.IDSETOR_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.DATA_SETOR||'''','NULL')||','
||COALESCE(''''||NEW.DATA_SAIDA||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_SAIDA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCAOINTERNO,'NULL')||','
||COALESCE(''''||NEW.OBSTRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.ESTADO_CIVIL||'''','NULL')||','
||COALESCE(''''||NEW.VULGO||'''','NULL')||','
||COALESCE(''''||NEW.OUTRO_NOME||'''','NULL')||','
||COALESCE(''''||NEW.SINAIS_PARTICULARES||'''','NULL')||','
||COALESCE(''''||NEW.ALTURA||'''','NULL')||','
||COALESCE(''''||NEW.PESO||'''','NULL')||','
||COALESCE(''''||NEW.CI||'''','NULL')||','
||COALESCE(''''||NEW.CISAIDA||'''','NULL')||','
||COALESCE(''''||NEW.ARTIGO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ISOLAMENTO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_MATRICULA||'''','NULL')||','
||COALESCE(''''||NEW.OBSEDUCACAO||'''','NULL')||','
||COALESCE(''''||NEW.DEFICIENCIA||'''','NULL')||','
||COALESCE(NEW.IDSERIEESTUDO,'NULL')||','
||COALESCE(''''||NEW.COR_OLHOS||'''','NULL')||','
||COALESCE(''''||NEW.COR_CABELOS||'''','NULL')||','
||COALESCE(''''||NEW.NOME_SOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.ORIENTACAO_SEXUAL||'''','NULL')||','
||COALESCE(''''||NEW.IDENTIDADE_GENERO||'''','NULL')||','
||COALESCE(''''||NEW.HISTORICO_VELHO||'''','NULL')||','
||COALESCE(''''||NEW.TIPOPROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.CONCEITO_DISCIPLINAR||'''','NULL')||','
||COALESCE(''''||NEW.TIPOCONDUTA||'''','NULL')||','
||COALESCE(''''||NEW.PERIODO||'''','NULL')||','
||COALESCE(''''||NEW.FAMILIARPRESO||'''','NULL')||','
||COALESCE(''''||NEW.PARENTESCOPRESO||'''','NULL')||','
||COALESCE(''''||NEW.UPFAMILIARPRESO||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVODELITO||'''','NULL')||','
||COALESCE(''''||NEW.MAIORPERDA||'''','NULL')||','
||COALESCE(''''||NEW.PAISVIVOS||'''','NULL')||','
||COALESCE(''''||NEW.PAISSEPARADOS||'''','NULL')||','
||COALESCE(''''||NEW.IDADEPAISSEPARADOS||'''','NULL')||','
||COALESCE(''''||NEW.PROFISSAOPAIS||'''','NULL')||','
||COALESCE(''''||NEW.QUEMCRIOU||'''','NULL')||','
||COALESCE(''''||NEW.TRABALHOFAMILIA||'''','NULL')||','
||COALESCE(''''||NEW.QTDEIRMAOS||'''','NULL')||','
||COALESCE(''''||NEW.CRIADOIRMAOS||'''','NULL')||','
||COALESCE(''''||NEW.MORADIA||'''','NULL')||','
||COALESCE(''''||NEW.REPRESENTACAOPAIS||'''','NULL')||','
||COALESCE(''''||NEW.EDUCACAORECEBIDA||'''','NULL')||','
||COALESCE(''''||NEW.MUDANCAFAMILIA||'''','NULL')||','
||COALESCE(''''||NEW.FUGACASA||'''','NULL')||','
||COALESCE(''''||NEW.CONDICOESCRIACAO||'''','NULL')||','
||COALESCE(''''||NEW.INSTITUICAOASSISTENCIAL||'''','NULL')||','
||COALESCE(''''||NEW.VIOLENCIADOMESTICA||'''','NULL')||','
||COALESCE(''''||NEW.MORADIAANTESPRESO||'''','NULL')||','
||COALESCE(''''||NEW.RESIDENCIAFAMILIAR||'''','NULL')||','
||COALESCE(''''||NEW.QTDEFILHOS||'''','NULL')||','
||COALESCE(''''||NEW.FILHOSMENORES16||'''','NULL')||','
||COALESCE(''''||NEW.FILHOSVIVEM||'''','NULL')||','
||COALESCE(''''||NEW.FILHOADOCAO||'''','NULL')||','
||COALESCE(''''||NEW.PROVEDORFAMILIA||'''','NULL')||','
||COALESCE(''''||NEW.RENDIMENTOFAMILIAR||'''','NULL')||','
||COALESCE(''''||NEW.PROGRAMASOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.AUXRECLUSAO||'''','NULL')||','
||COALESCE(''''||NEW.REPROVADOESCOLA||'''','NULL')||','
||COALESCE(''''||NEW.IDADETRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.CURSOPROFISSIONALIZANTE||'''','NULL')||','
||COALESCE(''''||NEW.EXERCICIATRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.REGISTROCARTEIRA||'''','NULL')||','
||COALESCE(''''||NEW.TRABALHOUPANTERIOR||'''','NULL')||','
||COALESCE(''''||NEW.DOCUMENTOS||'''','NULL')||','
||COALESCE(''''||NEW.USODROGAS||'''','NULL')||','
||COALESCE(''''||NEW.DATADEPENDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.ABANDONODROGAS||'''','NULL')||','
||COALESCE(''''||NEW.DROGASCOMCRIME||'''','NULL')||','
||COALESCE(''''||NEW.DOENCAGRAVE||'''','NULL')||','
||COALESCE(''''||NEW.DOENCAMENTAL||'''','NULL')||','
||COALESCE(''''||NEW.PROBLEMASAUDE||'''','NULL')||','
||COALESCE(''''||NEW.DOENCALABORAL||'''','NULL')||','
||COALESCE(''''||NEW.VISITAOUTRAPESSOA||'''','NULL')||','
||COALESCE(''''||NEW.ESTUDOCUMPENA||'''','NULL')||','
||COALESCE(''''||NEW.TRABALHOCUMPENA||'''','NULL')||','
||COALESCE(''''||NEW.PROFISSAOCUMPENA||'''','NULL')||','
||COALESCE(''''||NEW.DATAPSICOSSOCIAL||'''','NULL')||','
||COALESCE(NEW.IDTECNICO,'NULL')||','
||COALESCE(''''||NEW.OBSPSICOSSOCIAL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_DELITO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL')||','
||COALESCE(NEW.MP,'NULL')||','
||COALESCE(''''||NEW.SUICIDIO||'''','NULL')||','
||COALESCE(''''||NEW.CID||'''','NULL')||','
||COALESCE(''''||NEW.EFEITOSDROGA||'''','NULL')||','
||COALESCE(''''||NEW.SINTOMASDEPRESSIVOS||'''','NULL')||','
||COALESCE(''''||NEW.EPISODIOSHUMOR||'''','NULL')||','
||COALESCE(''''||NEW.SINTOMASPSICOTICOS||'''','NULL')||','
||COALESCE(''''||NEW.DELIRIOS||'''','NULL')||','
||COALESCE(''''||NEW.ALUCINACOES||'''','NULL')||','
||COALESCE(''''||NEW.PERSONALIDADE||'''','NULL')||','
||COALESCE(''''||NEW.VISITANTES||'''','NULL')||','
||COALESCE(''''||NEW.MEDICACAOCONTROLADA||'''','NULL')||','
||COALESCE(''''||NEW.DOENCAINFECTOCONTAGIOSA||'''','NULL')||','
||COALESCE(''''||NEW.TRATAMENTOINFECTO||'''','NULL')||','
||COALESCE(''''||NEW.RESULTADOINFECTO||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAOCIVIL||'''','NULL')||','
||COALESCE(''''||NEW.MEDIDASEGURANCA||'''','NULL')||','
||COALESCE(''''||NEW.FACCAO||'''','NULL')||','
||COALESCE(''''||NEW.VARA_ORIGEM||'''','NULL')||','
||COALESCE(''''||NEW.EM_TRANSITO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_INFOPEN||'''','NULL')||','
||COALESCE(''''||NEW.REINCERSAO||'''','NULL')||','
||COALESCE(NEW.IDPAIS_ENDERECO,'NULL')||','
||COALESCE(''''||NEW.OUTROS_ADVOGADOS||'''','NULL')||','
||COALESCE(''''||NEW.TITULO_ELEITOR||'''','NULL')||','
||COALESCE(''''||NEW.TIPOREGIME||'''','NULL')||','
||COALESCE(''''||NEW.DATA_PERMANENCIA||'''','NULL')||','
||COALESCE(''''||NEW.PASSAGEM_SPF||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVACAO_INCLUSAO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_ROUPA||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EMISSOR_RG||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'INTERNO', NEW.ID_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: INTERNO_BU_LOG */
CREATE TRIGGER INTERNO_BU_LOG FOR INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 09:38:12.4530
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME_INTERNO,'')<>COALESCE(OLD.NOME_INTERNO,'')) THEN TXT=TXT||',NOME_INTERNO = '||COALESCE(''''||NEW.NOME_INTERNO||'''','NULL');
IF (COALESCE(NEW.RGI,'')<>COALESCE(OLD.RGI,'')) THEN TXT=TXT||',RGI = '||COALESCE(''''||NEW.RGI||'''','NULL');
IF (COALESCE(NEW.IDPROFISSAO,'')<>COALESCE(OLD.IDPROFISSAO,'')) THEN TXT=TXT||',IDPROFISSAO = '||COALESCE(NEW.IDPROFISSAO,'NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.IDSOLARIO,'')<>COALESCE(OLD.IDSOLARIO,'')) THEN TXT=TXT||',IDSOLARIO = '||COALESCE(NEW.IDSOLARIO,'NULL');
IF (COALESCE(NEW.IDCELA,'')<>COALESCE(OLD.IDCELA,'')) THEN TXT=TXT||',IDCELA = '||COALESCE(NEW.IDCELA,'NULL');
IF (COALESCE(NEW.DATA_ENTRADA,'')<>COALESCE(OLD.DATA_ENTRADA,'')) THEN TXT=TXT||',DATA_ENTRADA = '||COALESCE(''''||NEW.DATA_ENTRADA||'''','NULL');
IF (COALESCE(NEW.MAE,'')<>COALESCE(OLD.MAE,'')) THEN TXT=TXT||',MAE = '||COALESCE(''''||NEW.MAE||'''','NULL');
IF (COALESCE(NEW.PAI,'')<>COALESCE(OLD.PAI,'')) THEN TXT=TXT||',PAI = '||COALESCE(''''||NEW.PAI||'''','NULL');
IF (COALESCE(NEW.IDNATURALIDADE,'')<>COALESCE(OLD.IDNATURALIDADE,'')) THEN TXT=TXT||',IDNATURALIDADE = '||COALESCE(NEW.IDNATURALIDADE,'NULL');
IF (COALESCE(NEW.IDNACIONALIDADE,'')<>COALESCE(OLD.IDNACIONALIDADE,'')) THEN TXT=TXT||',IDNACIONALIDADE = '||COALESCE(NEW.IDNACIONALIDADE,'NULL');
IF (COALESCE(NEW.IDRACA,'')<>COALESCE(OLD.IDRACA,'')) THEN TXT=TXT||',IDRACA = '||COALESCE(NEW.IDRACA,'NULL');
IF (COALESCE(NEW.IDESCOLARIDADE,'')<>COALESCE(OLD.IDESCOLARIDADE,'')) THEN TXT=TXT||',IDESCOLARIDADE = '||COALESCE(NEW.IDESCOLARIDADE,'NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENETO,'')<>COALESCE(OLD.COMPLEMENETO,'')) THEN TXT=TXT||',COMPLEMENETO = '||COALESCE(''''||NEW.COMPLEMENETO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.IDCIDADE,'')<>COALESCE(OLD.IDCIDADE,'')) THEN TXT=TXT||',IDCIDADE = '||COALESCE(NEW.IDCIDADE,'NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (COALESCE(NEW.RELIGIAO,'')<>COALESCE(OLD.RELIGIAO,'')) THEN TXT=TXT||',RELIGIAO = '||COALESCE(''''||NEW.RELIGIAO||'''','NULL');
IF (COALESCE(NEW.IDADVOGADO,'')<>COALESCE(OLD.IDADVOGADO,'')) THEN TXT=TXT||',IDADVOGADO = '||COALESCE(NEW.IDADVOGADO,'NULL');
IF (COALESCE(NEW.ID_PROCEDENCIA,'')<>COALESCE(OLD.ID_PROCEDENCIA,'')) THEN TXT=TXT||',ID_PROCEDENCIA = '||COALESCE(NEW.ID_PROCEDENCIA,'NULL');
IF (COALESCE(NEW.CONDENACAO,'')<>COALESCE(OLD.CONDENACAO,'')) THEN TXT=TXT||',CONDENACAO = '||COALESCE(''''||NEW.CONDENACAO||'''','NULL');
IF (COALESCE(NEW.DATA_PRISAO,'')<>COALESCE(OLD.DATA_PRISAO,'')) THEN TXT=TXT||',DATA_PRISAO = '||COALESCE(''''||NEW.DATA_PRISAO||'''','NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.IDCONDICAO_INTERNO,'')<>COALESCE(OLD.IDCONDICAO_INTERNO,'')) THEN TXT=TXT||',IDCONDICAO_INTERNO = '||COALESCE(NEW.IDCONDICAO_INTERNO,'NULL');
IF (COALESCE(NEW.IDDESTINO,'')<>COALESCE(OLD.IDDESTINO,'')) THEN TXT=TXT||',IDDESTINO = '||COALESCE(NEW.IDDESTINO,'NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.STATUS_ISOLAMENTO,'')<>COALESCE(OLD.STATUS_ISOLAMENTO,'')) THEN TXT=TXT||',STATUS_ISOLAMENTO = '||COALESCE(''''||NEW.STATUS_ISOLAMENTO||'''','NULL');
IF (COALESCE(NEW.IDSETOR_TRABALHO,'')<>COALESCE(OLD.IDSETOR_TRABALHO,'')) THEN TXT=TXT||',IDSETOR_TRABALHO = '||COALESCE(NEW.IDSETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.DATA_SETOR,'')<>COALESCE(OLD.DATA_SETOR,'')) THEN TXT=TXT||',DATA_SETOR = '||COALESCE(''''||NEW.DATA_SETOR||'''','NULL');
IF (COALESCE(NEW.DATA_SAIDA,'')<>COALESCE(OLD.DATA_SAIDA,'')) THEN TXT=TXT||',DATA_SAIDA = '||COALESCE(''''||NEW.DATA_SAIDA||'''','NULL');
IF (COALESCE(NEW.MOTIVO_SAIDA,'')<>COALESCE(OLD.MOTIVO_SAIDA,'')) THEN TXT=TXT||',MOTIVO_SAIDA = '||COALESCE(''''||NEW.MOTIVO_SAIDA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCAOINTERNO,'')<>COALESCE(OLD.ID_FUNCAOINTERNO,'')) THEN TXT=TXT||',ID_FUNCAOINTERNO = '||COALESCE(NEW.ID_FUNCAOINTERNO,'NULL');
IF (COALESCE(NEW.OBSTRABALHO,'')<>COALESCE(OLD.OBSTRABALHO,'')) THEN TXT=TXT||',OBSTRABALHO = '||COALESCE(''''||NEW.OBSTRABALHO||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.ESTADO_CIVIL,'')<>COALESCE(OLD.ESTADO_CIVIL,'')) THEN TXT=TXT||',ESTADO_CIVIL = '||COALESCE(''''||NEW.ESTADO_CIVIL||'''','NULL');
IF (COALESCE(NEW.VULGO,'')<>COALESCE(OLD.VULGO,'')) THEN TXT=TXT||',VULGO = '||COALESCE(''''||NEW.VULGO||'''','NULL');
IF (COALESCE(NEW.OUTRO_NOME,'')<>COALESCE(OLD.OUTRO_NOME,'')) THEN TXT=TXT||',OUTRO_NOME = '||COALESCE(''''||NEW.OUTRO_NOME||'''','NULL');
IF (COALESCE(NEW.SINAIS_PARTICULARES,'')<>COALESCE(OLD.SINAIS_PARTICULARES,'')) THEN TXT=TXT||',SINAIS_PARTICULARES = '||COALESCE(''''||NEW.SINAIS_PARTICULARES||'''','NULL');
IF (COALESCE(NEW.ALTURA,'')<>COALESCE(OLD.ALTURA,'')) THEN TXT=TXT||',ALTURA = '||COALESCE(''''||NEW.ALTURA||'''','NULL');
IF (COALESCE(NEW.PESO,'')<>COALESCE(OLD.PESO,'')) THEN TXT=TXT||',PESO = '||COALESCE(''''||NEW.PESO||'''','NULL');
IF (COALESCE(NEW.CI,'')<>COALESCE(OLD.CI,'')) THEN TXT=TXT||',CI = '||COALESCE(''''||NEW.CI||'''','NULL');
IF (COALESCE(NEW.CISAIDA,'')<>COALESCE(OLD.CISAIDA,'')) THEN TXT=TXT||',CISAIDA = '||COALESCE(''''||NEW.CISAIDA||'''','NULL');
IF (COALESCE(NEW.ARTIGO,'')<>COALESCE(OLD.ARTIGO,'')) THEN TXT=TXT||',ARTIGO = '||COALESCE(''''||NEW.ARTIGO||'''','NULL');
IF (COALESCE(NEW.DATA_ISOLAMENTO,'')<>COALESCE(OLD.DATA_ISOLAMENTO,'')) THEN TXT=TXT||',DATA_ISOLAMENTO = '||COALESCE(''''||NEW.DATA_ISOLAMENTO||'''','NULL');
IF (COALESCE(NEW.DATA_MATRICULA,'')<>COALESCE(OLD.DATA_MATRICULA,'')) THEN TXT=TXT||',DATA_MATRICULA = '||COALESCE(''''||NEW.DATA_MATRICULA||'''','NULL');
IF (COALESCE(NEW.OBSEDUCACAO,'')<>COALESCE(OLD.OBSEDUCACAO,'')) THEN TXT=TXT||',OBSEDUCACAO = '||COALESCE(''''||NEW.OBSEDUCACAO||'''','NULL');
IF (COALESCE(NEW.DEFICIENCIA,'')<>COALESCE(OLD.DEFICIENCIA,'')) THEN TXT=TXT||',DEFICIENCIA = '||COALESCE(''''||NEW.DEFICIENCIA||'''','NULL');
IF (COALESCE(NEW.IDSERIEESTUDO,'')<>COALESCE(OLD.IDSERIEESTUDO,'')) THEN TXT=TXT||',IDSERIEESTUDO = '||COALESCE(NEW.IDSERIEESTUDO,'NULL');
IF (COALESCE(NEW.COR_OLHOS,'')<>COALESCE(OLD.COR_OLHOS,'')) THEN TXT=TXT||',COR_OLHOS = '||COALESCE(''''||NEW.COR_OLHOS||'''','NULL');
IF (COALESCE(NEW.COR_CABELOS,'')<>COALESCE(OLD.COR_CABELOS,'')) THEN TXT=TXT||',COR_CABELOS = '||COALESCE(''''||NEW.COR_CABELOS||'''','NULL');
IF (COALESCE(NEW.NOME_SOCIAL,'')<>COALESCE(OLD.NOME_SOCIAL,'')) THEN TXT=TXT||',NOME_SOCIAL = '||COALESCE(''''||NEW.NOME_SOCIAL||'''','NULL');
IF (COALESCE(NEW.ORIENTACAO_SEXUAL,'')<>COALESCE(OLD.ORIENTACAO_SEXUAL,'')) THEN TXT=TXT||',ORIENTACAO_SEXUAL = '||COALESCE(''''||NEW.ORIENTACAO_SEXUAL||'''','NULL');
IF (COALESCE(NEW.IDENTIDADE_GENERO,'')<>COALESCE(OLD.IDENTIDADE_GENERO,'')) THEN TXT=TXT||',IDENTIDADE_GENERO = '||COALESCE(''''||NEW.IDENTIDADE_GENERO||'''','NULL');
IF (COALESCE(NEW.HISTORICO_VELHO,'')<>COALESCE(OLD.HISTORICO_VELHO,'')) THEN TXT=TXT||',HISTORICO_VELHO = '||COALESCE(''''||NEW.HISTORICO_VELHO||'''','NULL');
IF (COALESCE(NEW.TIPOPROCESSO,'')<>COALESCE(OLD.TIPOPROCESSO,'')) THEN TXT=TXT||',TIPOPROCESSO = '||COALESCE(''''||NEW.TIPOPROCESSO||'''','NULL');
IF (COALESCE(NEW.CONCEITO_DISCIPLINAR,'')<>COALESCE(OLD.CONCEITO_DISCIPLINAR,'')) THEN TXT=TXT||',CONCEITO_DISCIPLINAR = '||COALESCE(''''||NEW.CONCEITO_DISCIPLINAR||'''','NULL');
IF (COALESCE(NEW.TIPOCONDUTA,'')<>COALESCE(OLD.TIPOCONDUTA,'')) THEN TXT=TXT||',TIPOCONDUTA = '||COALESCE(''''||NEW.TIPOCONDUTA||'''','NULL');
IF (COALESCE(NEW.PERIODO,'')<>COALESCE(OLD.PERIODO,'')) THEN TXT=TXT||',PERIODO = '||COALESCE(''''||NEW.PERIODO||'''','NULL');
IF (COALESCE(NEW.FAMILIARPRESO,'')<>COALESCE(OLD.FAMILIARPRESO,'')) THEN TXT=TXT||',FAMILIARPRESO = '||COALESCE(''''||NEW.FAMILIARPRESO||'''','NULL');
IF (COALESCE(NEW.PARENTESCOPRESO,'')<>COALESCE(OLD.PARENTESCOPRESO,'')) THEN TXT=TXT||',PARENTESCOPRESO = '||COALESCE(''''||NEW.PARENTESCOPRESO||'''','NULL');
IF (COALESCE(NEW.UPFAMILIARPRESO,'')<>COALESCE(OLD.UPFAMILIARPRESO,'')) THEN TXT=TXT||',UPFAMILIARPRESO = '||COALESCE(''''||NEW.UPFAMILIARPRESO||'''','NULL');
IF (COALESCE(NEW.MOTIVODELITO,'')<>COALESCE(OLD.MOTIVODELITO,'')) THEN TXT=TXT||',MOTIVODELITO = '||COALESCE(''''||NEW.MOTIVODELITO||'''','NULL');
IF (COALESCE(NEW.MAIORPERDA,'')<>COALESCE(OLD.MAIORPERDA,'')) THEN TXT=TXT||',MAIORPERDA = '||COALESCE(''''||NEW.MAIORPERDA||'''','NULL');
IF (COALESCE(NEW.PAISVIVOS,'')<>COALESCE(OLD.PAISVIVOS,'')) THEN TXT=TXT||',PAISVIVOS = '||COALESCE(''''||NEW.PAISVIVOS||'''','NULL');
IF (COALESCE(NEW.PAISSEPARADOS,'')<>COALESCE(OLD.PAISSEPARADOS,'')) THEN TXT=TXT||',PAISSEPARADOS = '||COALESCE(''''||NEW.PAISSEPARADOS||'''','NULL');
IF (COALESCE(NEW.IDADEPAISSEPARADOS,'')<>COALESCE(OLD.IDADEPAISSEPARADOS,'')) THEN TXT=TXT||',IDADEPAISSEPARADOS = '||COALESCE(''''||NEW.IDADEPAISSEPARADOS||'''','NULL');
IF (COALESCE(NEW.PROFISSAOPAIS,'')<>COALESCE(OLD.PROFISSAOPAIS,'')) THEN TXT=TXT||',PROFISSAOPAIS = '||COALESCE(''''||NEW.PROFISSAOPAIS||'''','NULL');
IF (COALESCE(NEW.QUEMCRIOU,'')<>COALESCE(OLD.QUEMCRIOU,'')) THEN TXT=TXT||',QUEMCRIOU = '||COALESCE(''''||NEW.QUEMCRIOU||'''','NULL');
IF (COALESCE(NEW.TRABALHOFAMILIA,'')<>COALESCE(OLD.TRABALHOFAMILIA,'')) THEN TXT=TXT||',TRABALHOFAMILIA = '||COALESCE(''''||NEW.TRABALHOFAMILIA||'''','NULL');
IF (COALESCE(NEW.QTDEIRMAOS,'')<>COALESCE(OLD.QTDEIRMAOS,'')) THEN TXT=TXT||',QTDEIRMAOS = '||COALESCE(''''||NEW.QTDEIRMAOS||'''','NULL');
IF (COALESCE(NEW.CRIADOIRMAOS,'')<>COALESCE(OLD.CRIADOIRMAOS,'')) THEN TXT=TXT||',CRIADOIRMAOS = '||COALESCE(''''||NEW.CRIADOIRMAOS||'''','NULL');
IF (COALESCE(NEW.MORADIA,'')<>COALESCE(OLD.MORADIA,'')) THEN TXT=TXT||',MORADIA = '||COALESCE(''''||NEW.MORADIA||'''','NULL');
IF (COALESCE(NEW.REPRESENTACAOPAIS,'')<>COALESCE(OLD.REPRESENTACAOPAIS,'')) THEN TXT=TXT||',REPRESENTACAOPAIS = '||COALESCE(''''||NEW.REPRESENTACAOPAIS||'''','NULL');
IF (COALESCE(NEW.EDUCACAORECEBIDA,'')<>COALESCE(OLD.EDUCACAORECEBIDA,'')) THEN TXT=TXT||',EDUCACAORECEBIDA = '||COALESCE(''''||NEW.EDUCACAORECEBIDA||'''','NULL');
IF (COALESCE(NEW.MUDANCAFAMILIA,'')<>COALESCE(OLD.MUDANCAFAMILIA,'')) THEN TXT=TXT||',MUDANCAFAMILIA = '||COALESCE(''''||NEW.MUDANCAFAMILIA||'''','NULL');
IF (COALESCE(NEW.FUGACASA,'')<>COALESCE(OLD.FUGACASA,'')) THEN TXT=TXT||',FUGACASA = '||COALESCE(''''||NEW.FUGACASA||'''','NULL');
IF (COALESCE(NEW.CONDICOESCRIACAO,'')<>COALESCE(OLD.CONDICOESCRIACAO,'')) THEN TXT=TXT||',CONDICOESCRIACAO = '||COALESCE(''''||NEW.CONDICOESCRIACAO||'''','NULL');
IF (COALESCE(NEW.INSTITUICAOASSISTENCIAL,'')<>COALESCE(OLD.INSTITUICAOASSISTENCIAL,'')) THEN TXT=TXT||',INSTITUICAOASSISTENCIAL = '||COALESCE(''''||NEW.INSTITUICAOASSISTENCIAL||'''','NULL');
IF (COALESCE(NEW.VIOLENCIADOMESTICA,'')<>COALESCE(OLD.VIOLENCIADOMESTICA,'')) THEN TXT=TXT||',VIOLENCIADOMESTICA = '||COALESCE(''''||NEW.VIOLENCIADOMESTICA||'''','NULL');
IF (COALESCE(NEW.MORADIAANTESPRESO,'')<>COALESCE(OLD.MORADIAANTESPRESO,'')) THEN TXT=TXT||',MORADIAANTESPRESO = '||COALESCE(''''||NEW.MORADIAANTESPRESO||'''','NULL');
IF (COALESCE(NEW.RESIDENCIAFAMILIAR,'')<>COALESCE(OLD.RESIDENCIAFAMILIAR,'')) THEN TXT=TXT||',RESIDENCIAFAMILIAR = '||COALESCE(''''||NEW.RESIDENCIAFAMILIAR||'''','NULL');
IF (COALESCE(NEW.QTDEFILHOS,'')<>COALESCE(OLD.QTDEFILHOS,'')) THEN TXT=TXT||',QTDEFILHOS = '||COALESCE(''''||NEW.QTDEFILHOS||'''','NULL');
IF (COALESCE(NEW.FILHOSMENORES16,'')<>COALESCE(OLD.FILHOSMENORES16,'')) THEN TXT=TXT||',FILHOSMENORES16 = '||COALESCE(''''||NEW.FILHOSMENORES16||'''','NULL');
IF (COALESCE(NEW.FILHOSVIVEM,'')<>COALESCE(OLD.FILHOSVIVEM,'')) THEN TXT=TXT||',FILHOSVIVEM = '||COALESCE(''''||NEW.FILHOSVIVEM||'''','NULL');
IF (COALESCE(NEW.FILHOADOCAO,'')<>COALESCE(OLD.FILHOADOCAO,'')) THEN TXT=TXT||',FILHOADOCAO = '||COALESCE(''''||NEW.FILHOADOCAO||'''','NULL');
IF (COALESCE(NEW.PROVEDORFAMILIA,'')<>COALESCE(OLD.PROVEDORFAMILIA,'')) THEN TXT=TXT||',PROVEDORFAMILIA = '||COALESCE(''''||NEW.PROVEDORFAMILIA||'''','NULL');
IF (COALESCE(NEW.RENDIMENTOFAMILIAR,'')<>COALESCE(OLD.RENDIMENTOFAMILIAR,'')) THEN TXT=TXT||',RENDIMENTOFAMILIAR = '||COALESCE(''''||NEW.RENDIMENTOFAMILIAR||'''','NULL');
IF (COALESCE(NEW.PROGRAMASOCIAL,'')<>COALESCE(OLD.PROGRAMASOCIAL,'')) THEN TXT=TXT||',PROGRAMASOCIAL = '||COALESCE(''''||NEW.PROGRAMASOCIAL||'''','NULL');
IF (COALESCE(NEW.AUXRECLUSAO,'')<>COALESCE(OLD.AUXRECLUSAO,'')) THEN TXT=TXT||',AUXRECLUSAO = '||COALESCE(''''||NEW.AUXRECLUSAO||'''','NULL');
IF (COALESCE(NEW.REPROVADOESCOLA,'')<>COALESCE(OLD.REPROVADOESCOLA,'')) THEN TXT=TXT||',REPROVADOESCOLA = '||COALESCE(''''||NEW.REPROVADOESCOLA||'''','NULL');
IF (COALESCE(NEW.IDADETRABALHO,'')<>COALESCE(OLD.IDADETRABALHO,'')) THEN TXT=TXT||',IDADETRABALHO = '||COALESCE(''''||NEW.IDADETRABALHO||'''','NULL');
IF (COALESCE(NEW.CURSOPROFISSIONALIZANTE,'')<>COALESCE(OLD.CURSOPROFISSIONALIZANTE,'')) THEN TXT=TXT||',CURSOPROFISSIONALIZANTE = '||COALESCE(''''||NEW.CURSOPROFISSIONALIZANTE||'''','NULL');
IF (COALESCE(NEW.EXERCICIATRABALHO,'')<>COALESCE(OLD.EXERCICIATRABALHO,'')) THEN TXT=TXT||',EXERCICIATRABALHO = '||COALESCE(''''||NEW.EXERCICIATRABALHO||'''','NULL');
IF (COALESCE(NEW.REGISTROCARTEIRA,'')<>COALESCE(OLD.REGISTROCARTEIRA,'')) THEN TXT=TXT||',REGISTROCARTEIRA = '||COALESCE(''''||NEW.REGISTROCARTEIRA||'''','NULL');
IF (COALESCE(NEW.TRABALHOUPANTERIOR,'')<>COALESCE(OLD.TRABALHOUPANTERIOR,'')) THEN TXT=TXT||',TRABALHOUPANTERIOR = '||COALESCE(''''||NEW.TRABALHOUPANTERIOR||'''','NULL');
IF (COALESCE(NEW.DOCUMENTOS,'')<>COALESCE(OLD.DOCUMENTOS,'')) THEN TXT=TXT||',DOCUMENTOS = '||COALESCE(''''||NEW.DOCUMENTOS||'''','NULL');
IF (COALESCE(NEW.USODROGAS,'')<>COALESCE(OLD.USODROGAS,'')) THEN TXT=TXT||',USODROGAS = '||COALESCE(''''||NEW.USODROGAS||'''','NULL');
IF (COALESCE(NEW.DATADEPENDENCIA,'')<>COALESCE(OLD.DATADEPENDENCIA,'')) THEN TXT=TXT||',DATADEPENDENCIA = '||COALESCE(''''||NEW.DATADEPENDENCIA||'''','NULL');
IF (COALESCE(NEW.ABANDONODROGAS,'')<>COALESCE(OLD.ABANDONODROGAS,'')) THEN TXT=TXT||',ABANDONODROGAS = '||COALESCE(''''||NEW.ABANDONODROGAS||'''','NULL');
IF (COALESCE(NEW.DROGASCOMCRIME,'')<>COALESCE(OLD.DROGASCOMCRIME,'')) THEN TXT=TXT||',DROGASCOMCRIME = '||COALESCE(''''||NEW.DROGASCOMCRIME||'''','NULL');
IF (COALESCE(NEW.DOENCAGRAVE,'')<>COALESCE(OLD.DOENCAGRAVE,'')) THEN TXT=TXT||',DOENCAGRAVE = '||COALESCE(''''||NEW.DOENCAGRAVE||'''','NULL');
IF (COALESCE(NEW.DOENCAMENTAL,'')<>COALESCE(OLD.DOENCAMENTAL,'')) THEN TXT=TXT||',DOENCAMENTAL = '||COALESCE(''''||NEW.DOENCAMENTAL||'''','NULL');
IF (COALESCE(NEW.PROBLEMASAUDE,'')<>COALESCE(OLD.PROBLEMASAUDE,'')) THEN TXT=TXT||',PROBLEMASAUDE = '||COALESCE(''''||NEW.PROBLEMASAUDE||'''','NULL');
IF (COALESCE(NEW.DOENCALABORAL,'')<>COALESCE(OLD.DOENCALABORAL,'')) THEN TXT=TXT||',DOENCALABORAL = '||COALESCE(''''||NEW.DOENCALABORAL||'''','NULL');
IF (COALESCE(NEW.VISITAOUTRAPESSOA,'')<>COALESCE(OLD.VISITAOUTRAPESSOA,'')) THEN TXT=TXT||',VISITAOUTRAPESSOA = '||COALESCE(''''||NEW.VISITAOUTRAPESSOA||'''','NULL');
IF (COALESCE(NEW.ESTUDOCUMPENA,'')<>COALESCE(OLD.ESTUDOCUMPENA,'')) THEN TXT=TXT||',ESTUDOCUMPENA = '||COALESCE(''''||NEW.ESTUDOCUMPENA||'''','NULL');
IF (COALESCE(NEW.TRABALHOCUMPENA,'')<>COALESCE(OLD.TRABALHOCUMPENA,'')) THEN TXT=TXT||',TRABALHOCUMPENA = '||COALESCE(''''||NEW.TRABALHOCUMPENA||'''','NULL');
IF (COALESCE(NEW.PROFISSAOCUMPENA,'')<>COALESCE(OLD.PROFISSAOCUMPENA,'')) THEN TXT=TXT||',PROFISSAOCUMPENA = '||COALESCE(''''||NEW.PROFISSAOCUMPENA||'''','NULL');
IF (COALESCE(NEW.DATAPSICOSSOCIAL,'')<>COALESCE(OLD.DATAPSICOSSOCIAL,'')) THEN TXT=TXT||',DATAPSICOSSOCIAL = '||COALESCE(''''||NEW.DATAPSICOSSOCIAL||'''','NULL');
IF (COALESCE(NEW.IDTECNICO,'')<>COALESCE(OLD.IDTECNICO,'')) THEN TXT=TXT||',IDTECNICO = '||COALESCE(NEW.IDTECNICO,'NULL');
IF (COALESCE(NEW.OBSPSICOSSOCIAL,'')<>COALESCE(OLD.OBSPSICOSSOCIAL,'')) THEN TXT=TXT||',OBSPSICOSSOCIAL = '||COALESCE(''''||NEW.OBSPSICOSSOCIAL||'''','NULL');
IF (COALESCE(NEW.DATA_DELITO,'')<>COALESCE(OLD.DATA_DELITO,'')) THEN TXT=TXT||',DATA_DELITO = '||COALESCE(''''||NEW.DATA_DELITO||'''','NULL');
IF (COALESCE(NEW.DATA_REABILITACAO,'')<>COALESCE(OLD.DATA_REABILITACAO,'')) THEN TXT=TXT||',DATA_REABILITACAO = '||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL');
IF (COALESCE(NEW.MP,'')<>COALESCE(OLD.MP,'')) THEN TXT=TXT||',MP = '||COALESCE(NEW.MP,'NULL');
IF (COALESCE(NEW.SUICIDIO,'')<>COALESCE(OLD.SUICIDIO,'')) THEN TXT=TXT||',SUICIDIO = '||COALESCE(''''||NEW.SUICIDIO||'''','NULL');
IF (COALESCE(NEW.CID,'')<>COALESCE(OLD.CID,'')) THEN TXT=TXT||',CID = '||COALESCE(''''||NEW.CID||'''','NULL');
IF (COALESCE(NEW.EFEITOSDROGA,'')<>COALESCE(OLD.EFEITOSDROGA,'')) THEN TXT=TXT||',EFEITOSDROGA = '||COALESCE(''''||NEW.EFEITOSDROGA||'''','NULL');
IF (COALESCE(NEW.SINTOMASDEPRESSIVOS,'')<>COALESCE(OLD.SINTOMASDEPRESSIVOS,'')) THEN TXT=TXT||',SINTOMASDEPRESSIVOS = '||COALESCE(''''||NEW.SINTOMASDEPRESSIVOS||'''','NULL');
IF (COALESCE(NEW.EPISODIOSHUMOR,'')<>COALESCE(OLD.EPISODIOSHUMOR,'')) THEN TXT=TXT||',EPISODIOSHUMOR = '||COALESCE(''''||NEW.EPISODIOSHUMOR||'''','NULL');
IF (COALESCE(NEW.SINTOMASPSICOTICOS,'')<>COALESCE(OLD.SINTOMASPSICOTICOS,'')) THEN TXT=TXT||',SINTOMASPSICOTICOS = '||COALESCE(''''||NEW.SINTOMASPSICOTICOS||'''','NULL');
IF (COALESCE(NEW.DELIRIOS,'')<>COALESCE(OLD.DELIRIOS,'')) THEN TXT=TXT||',DELIRIOS = '||COALESCE(''''||NEW.DELIRIOS||'''','NULL');
IF (COALESCE(NEW.ALUCINACOES,'')<>COALESCE(OLD.ALUCINACOES,'')) THEN TXT=TXT||',ALUCINACOES = '||COALESCE(''''||NEW.ALUCINACOES||'''','NULL');
IF (COALESCE(NEW.PERSONALIDADE,'')<>COALESCE(OLD.PERSONALIDADE,'')) THEN TXT=TXT||',PERSONALIDADE = '||COALESCE(''''||NEW.PERSONALIDADE||'''','NULL');
IF (COALESCE(NEW.VISITANTES,'')<>COALESCE(OLD.VISITANTES,'')) THEN TXT=TXT||',VISITANTES = '||COALESCE(''''||NEW.VISITANTES||'''','NULL');
IF (COALESCE(NEW.MEDICACAOCONTROLADA,'')<>COALESCE(OLD.MEDICACAOCONTROLADA,'')) THEN TXT=TXT||',MEDICACAOCONTROLADA = '||COALESCE(''''||NEW.MEDICACAOCONTROLADA||'''','NULL');
IF (COALESCE(NEW.DOENCAINFECTOCONTAGIOSA,'')<>COALESCE(OLD.DOENCAINFECTOCONTAGIOSA,'')) THEN TXT=TXT||',DOENCAINFECTOCONTAGIOSA = '||COALESCE(''''||NEW.DOENCAINFECTOCONTAGIOSA||'''','NULL');
IF (COALESCE(NEW.TRATAMENTOINFECTO,'')<>COALESCE(OLD.TRATAMENTOINFECTO,'')) THEN TXT=TXT||',TRATAMENTOINFECTO = '||COALESCE(''''||NEW.TRATAMENTOINFECTO||'''','NULL');
IF (COALESCE(NEW.RESULTADOINFECTO,'')<>COALESCE(OLD.RESULTADOINFECTO,'')) THEN TXT=TXT||',RESULTADOINFECTO = '||COALESCE(''''||NEW.RESULTADOINFECTO||'''','NULL');
IF (COALESCE(NEW.SITUACAOCIVIL,'')<>COALESCE(OLD.SITUACAOCIVIL,'')) THEN TXT=TXT||',SITUACAOCIVIL = '||COALESCE(''''||NEW.SITUACAOCIVIL||'''','NULL');
IF (COALESCE(NEW.MEDIDASEGURANCA,'')<>COALESCE(OLD.MEDIDASEGURANCA,'')) THEN TXT=TXT||',MEDIDASEGURANCA = '||COALESCE(''''||NEW.MEDIDASEGURANCA||'''','NULL');
IF (COALESCE(NEW.FACCAO,'')<>COALESCE(OLD.FACCAO,'')) THEN TXT=TXT||',FACCAO = '||COALESCE(''''||NEW.FACCAO||'''','NULL');
IF (COALESCE(NEW.VARA_ORIGEM,'')<>COALESCE(OLD.VARA_ORIGEM,'')) THEN TXT=TXT||',VARA_ORIGEM = '||COALESCE(''''||NEW.VARA_ORIGEM||'''','NULL');
IF (COALESCE(NEW.EM_TRANSITO,'')<>COALESCE(OLD.EM_TRANSITO,'')) THEN TXT=TXT||',EM_TRANSITO = '||COALESCE(''''||NEW.EM_TRANSITO||'''','NULL');
IF (COALESCE(NEW.NUMERO_INFOPEN,'')<>COALESCE(OLD.NUMERO_INFOPEN,'')) THEN TXT=TXT||',NUMERO_INFOPEN = '||COALESCE(''''||NEW.NUMERO_INFOPEN||'''','NULL');
IF (COALESCE(NEW.REINCERSAO,'')<>COALESCE(OLD.REINCERSAO,'')) THEN TXT=TXT||',REINCERSAO = '||COALESCE(''''||NEW.REINCERSAO||'''','NULL');
IF (COALESCE(NEW.IDPAIS_ENDERECO,'')<>COALESCE(OLD.IDPAIS_ENDERECO,'')) THEN TXT=TXT||',IDPAIS_ENDERECO = '||COALESCE(NEW.IDPAIS_ENDERECO,'NULL');
IF (COALESCE(NEW.OUTROS_ADVOGADOS,'')<>COALESCE(OLD.OUTROS_ADVOGADOS,'')) THEN TXT=TXT||',OUTROS_ADVOGADOS = '||COALESCE(''''||NEW.OUTROS_ADVOGADOS||'''','NULL');
IF (COALESCE(NEW.TITULO_ELEITOR,'')<>COALESCE(OLD.TITULO_ELEITOR,'')) THEN TXT=TXT||',TITULO_ELEITOR = '||COALESCE(''''||NEW.TITULO_ELEITOR||'''','NULL');
IF (COALESCE(NEW.TIPOREGIME,'')<>COALESCE(OLD.TIPOREGIME,'')) THEN TXT=TXT||',TIPOREGIME = '||COALESCE(''''||NEW.TIPOREGIME||'''','NULL');
IF (COALESCE(NEW.DATA_PERMANENCIA,'')<>COALESCE(OLD.DATA_PERMANENCIA,'')) THEN TXT=TXT||',DATA_PERMANENCIA = '||COALESCE(''''||NEW.DATA_PERMANENCIA||'''','NULL');
IF (COALESCE(NEW.PASSAGEM_SPF,'')<>COALESCE(OLD.PASSAGEM_SPF,'')) THEN TXT=TXT||',PASSAGEM_SPF = '||COALESCE(''''||NEW.PASSAGEM_SPF||'''','NULL');
IF (COALESCE(NEW.MOTIVACAO_INCLUSAO,'')<>COALESCE(OLD.MOTIVACAO_INCLUSAO,'')) THEN TXT=TXT||',MOTIVACAO_INCLUSAO = '||COALESCE(''''||NEW.MOTIVACAO_INCLUSAO||'''','NULL');
IF (COALESCE(NEW.NUMERO_ROUPA,'')<>COALESCE(OLD.NUMERO_ROUPA,'')) THEN TXT=TXT||',NUMERO_ROUPA = '||COALESCE(''''||NEW.NUMERO_ROUPA||'''','NULL');
IF (COALESCE(NEW.ORGAO_EMISSOR_RG,'')<>COALESCE(OLD.ORGAO_EMISSOR_RG,'')) THEN TXT=TXT||',ORGAO_EMISSOR_RG = '||COALESCE(''''||NEW.ORGAO_EMISSOR_RG||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE INTERNO SET ID_INTERNO = '''||NEW.ID_INTERNO||''''||TXT||' WHERE ID_INTERNO = '''||NEW.ID_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'INTERNO', NEW.ID_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: INTERNO_BU_MOVIMENTO */
CREATE TRIGGER INTERNO_BU_MOVIMENTO FOR INTERNO
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE NOME_FUNC_ANTES VARCHAR(200);
DECLARE VARIABLE NOME_FUNC_ATUAL VARCHAR(200);
DECLARE VARIABLE PAVILHAO_ANTES VARCHAR(200);
DECLARE VARIABLE PAVILHAO_ATUAL VARCHAR(200);
DECLARE VARIABLE GALERIA_ANTES VARCHAR(200);
DECLARE VARIABLE GALERIA_ATUAL VARCHAR(200);
DECLARE VARIABLE SOLARIO_ANTES VARCHAR(200);
DECLARE VARIABLE SOLARIO_ATUAL VARCHAR(200);
DECLARE VARIABLE CELA_ANTES VARCHAR(200);
DECLARE VARIABLE CELA_ATUAL VARCHAR(200);
DECLARE VARIABLE CONDICAO_ANTES VARCHAR(200);
DECLARE VARIABLE CONDICAO_ATUAL VARCHAR(200);
DECLARE VARIABLE PROCEDENCIA_ANTES VARCHAR(200);
DECLARE VARIABLE PROCEDENCIA_ATUAL VARCHAR(200);
DECLARE VARIABLE SETOR_ANTES VARCHAR(200);
DECLARE VARIABLE SETOR_ATUAL VARCHAR(200);
DECLARE VARIABLE FOTO_ANTES VARCHAR(200);
DECLARE VARIABLE FOTO_ATUAL VARCHAR(200);
DECLARE VARIABLE STATUS_ANTES VARCHAR(200);
DECLARE VARIABLE STATUS_ATUAL VARCHAR(200);
DECLARE VARIABLE DESTINO_SAIDA VARCHAR(200);
DECLARE VARIABLE MOVIMENTACAO VARCHAR(16386);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
BEGIN

  IF (USER <> 'SYSDBA') THEN
    EXIT;

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');

  NEW.ID_FUNCIONARIO = COALESCE(:ID_FUNCIONARIO_LOGIN,NEW.ID_FUNCIONARIO);

  --REGISTRO ANTES
  NOME_FUNC_ANTES = '(FUNCIONARIO ANTES - NAO INFORMADO)' ;
  SELECT COALESCE(F.LOGIN,'SEM MATRICULA')||'-'||COALESCE(F.NOME_FUNCIONARIO,'SEM NOME')
  FROM FUNCIONARIO F
  WHERE F.ID_FUNCIONARIO = OLD.ID_FUNCIONARIO
  INTO :NOME_FUNC_ANTES;

  PAVILHAO_ANTES = '(PAVILHAO ANTES - NAO INFORMADO)' ;
  SELECT P.PAVILHAO
  FROM PAVILHAO P
  WHERE P.ID_PAVILHAO = OLD.IDPAVILHAO
  INTO :PAVILHAO_ANTES;

  GALERIA_ANTES = '(GALERIA ANTES - NAO INFORMADO)' ;
  SELECT G.GALERIA
  FROM GALERIA G
  WHERE G.ID_GALERIA = OLD.IDGALERIA
  INTO :GALERIA_ANTES;

  SOLARIO_ANTES = '(SOLARIO ANTES - NAO INFORMADO)' ;
  SELECT S.SOLARIO
  FROM SOLARIO S
  WHERE S.ID_SOLARIO = OLD.IDSOLARIO
  INTO :SOLARIO_ANTES;

  CELA_ANTES = '(CELA ANTES - NAO INFORMADO)' ;
  SELECT C.CELA
  FROM CELA C
  WHERE C.ID_CELA = OLD.IDCELA
  INTO :CELA_ANTES;

  CONDICAO_ANTES = '(CONDICAO ANTES - NAO INFORMADO)' ;
  SELECT C.DESCRICAO
  FROM CONDICAO_INTERNO C
  WHERE C.IDCONDICAO_INTERNO = OLD.IDCONDICAO_INTERNO
  INTO :CONDICAO_ANTES;

  PROCEDENCIA_ANTES = '(PROCEDENCIA ANTES - NAO INFORMADO)' ;
  SELECT P.PROEDENCIA
  FROM PROCEDENCIA P
  WHERE P.ID_PROCEDENCIA = OLD.ID_PROCEDENCIA
  INTO :PROCEDENCIA_ANTES;

  SETOR_ANTES = '(SETOR ANTES - NAO INFORMADO)' ;
  SELECT S.SETOR_TRABALHO
  FROM SETOR_TRABALHO S
  WHERE S.ID_SETOR_TRABALHO = OLD.IDSETOR_TRABALHO
  INTO :SETOR_ANTES;

  --################################################################
  --################################################################
  --################################################################
  --REGISTRO ATUAL
  NOME_FUNC_ATUAL = '(FUNCIONARIO ATUAL - NAO INFORMADO)' ;
  SELECT COALESCE(F.LOGIN,'SEM MATRICULA')||'-'||COALESCE(F.NOME_FUNCIONARIO,'SEM NOME')
  FROM FUNCIONARIO F
  WHERE F.ID_FUNCIONARIO = NEW.ID_FUNCIONARIO
  INTO :NOME_FUNC_ATUAL;

  PAVILHAO_ATUAL = '(PAVILHAO ATUAL - NAO INFORMADO)' ;
  SELECT P.PAVILHAO
  FROM PAVILHAO P
  WHERE P.ID_PAVILHAO = NEW.IDPAVILHAO
  INTO :PAVILHAO_ATUAL;

  GALERIA_ATUAL = '(GALERIA ATUAL - NAO INFORMADO)' ;
  SELECT G.GALERIA
  FROM GALERIA G
  WHERE G.ID_GALERIA = NEW.IDGALERIA
  INTO :GALERIA_ATUAL;

  SOLARIO_ATUAL = '(SOLARIO ATUAL - NAO INFORMADO)' ;
  SELECT S.SOLARIO
  FROM SOLARIO S
  WHERE S.ID_SOLARIO = NEW.IDSOLARIO
  INTO :SOLARIO_ATUAL;

  CELA_ATUAL = '(CELA ATUAL - NAO INFORMADO)' ;
  SELECT C.CELA
  FROM CELA C
  WHERE C.ID_CELA = NEW.IDCELA
  INTO :CELA_ATUAL;

  CONDICAO_ATUAL = '(CONDICAO ATUAL - NAO INFORMADO)' ;
  SELECT C.DESCRICAO
  FROM CONDICAO_INTERNO C
  WHERE C.IDCONDICAO_INTERNO = NEW.IDCONDICAO_INTERNO
  INTO :CONDICAO_ATUAL;

  PROCEDENCIA_ATUAL = '(PROCEDENCIA ATUAL - NAO INFORMADO)' ;
  SELECT P.PROEDENCIA
  FROM PROCEDENCIA P
  WHERE P.ID_PROCEDENCIA = NEW.ID_PROCEDENCIA
  INTO :PROCEDENCIA_ATUAL;

  SETOR_ATUAL = '(SETOR ATUAL - NAO INFORMADO)' ;
  SELECT S.SETOR_TRABALHO
  FROM SETOR_TRABALHO S
  WHERE S.ID_SETOR_TRABALHO = NEW.IDSETOR_TRABALHO
  INTO :SETOR_ATUAL;
  
  MOVIMENTACAO = '----------------------------------------------------------------------
' ;
  MOVIMENTACAO = MOVIMENTACAO||'RESPONSAVEL DAS INFORMAÃ‡Ã•ES ANTERIORES:
'||COALESCE(NOME_FUNC_ANTES,'');
  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;
  MOVIMENTACAO = MOVIMENTACAO||'RESPONSAVEL PELO REGISTRO ATUAL:
'||COALESCE(NOME_FUNC_ATUAL,'');

  IF (NEW.IDCELA <> OLD.IDCELA) THEN
  BEGIN
  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;
    MOVIMENTACAO = MOVIMENTACAO||'..:: PAVILHAO/GALERIA/SOLARIO/CELA ::..
ANTES........: '||pavilhao_antes||'/'||galeria_antes||'/'||solario_antes||'/'||cela_antes||'
ATUAL........: '||pavilhao_atual||'/'||galeria_atual||'/'||solario_atual||'/'||cela_atual;
  END

  IF (NEW.idcondicao_interno <> OLD.idcondicao_interno) THEN
  BEGIN
  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;
    MOVIMENTACAO = MOVIMENTACAO||'..:: CONDICAO DO INTERNO ::..
ANTES........: '||condicao_antes||'
ATUAL........: '||condicao_atual;
  END

  IF (NEW.id_procedencia <> OLD.id_procedencia) THEN
  BEGIN
  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;
    MOVIMENTACAO = MOVIMENTACAO||'..:: PROCEDENCIA DO INTERNO ::..
ANTES........: '||procedencia_antes||'
ATUAL........: '||procedencia_atual;
  END

  IF (NEW.idsetor_trabalho <> OLD.idsetor_trabalho) THEN
  BEGIN
  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;
    MOVIMENTACAO = MOVIMENTACAO||'..:: SETOR DE TRABALHO ::..
ANTES........: '||setor_antes||'
ATUAL........: '||setor_atual;
  END

  IF (NEW.foto <> OLD.foto) THEN
  BEGIN
  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;
    MOVIMENTACAO = MOVIMENTACAO||'FOI ALTERADA A FOTO DO INTERNO.'||setor_antes ;
  END

  MOVIMENTACAO = MOVIMENTACAO||'
----------------------------------------------------------------
' ;

  IF (NEW.st <> OLD.st) THEN
  BEGIN
  
      if (new.st='I') then
      begin
          DESTINO_SAIDA = '(DESTINO - NAO INFORMADO)' ;
          SELECT D.destino
          FROM DESTINO D
          WHERE D.id_destino = NEW.iddestino
          INTO :DESTINO_SAIDA;
          MOVIMENTACAO = MOVIMENTACAO||'STATUS INATIVO NO CONFERE MOTIVO: '||NEW.MOTIVO_SAIDA||'
DESTINO: '||:destino_saida ;
      end
      else
      begin
          MOVIMENTACAO = MOVIMENTACAO||'STATUS ATIVO NO CONFERE';
          NEW.MOTIVO_SAIDA = NULL ;
          NEW.DATA_SAIDA = NULL ;
          NEW.iddestino = NULL ;
      end
  END

  if (NEW.id_interno=old.id_interno) then
  begin
      if (NEW.id_up is not null) then
      begin
        insert into mov_interno (id_mov_interno, id_interno, id_unidade_penal, tipo_movimentacao, data_movimentacao, hora_movimentacao, id_funcionario, id_procedencia, id_destino, idpavilhao, idgaleria, idsolario, idcela, st_interno)
        values (0, NEW.id_interno, NEW.id_up,
        :movimentacao, current_date, current_time,
        coalesce(:ID_FUNCIONARIO_LOGIN, NEW.id_funcionario), NEW.id_procedencia, NEW.iddestino,
        NEW.idpavilhao, NEW.idgaleria, NEW.idsolario, NEW.idcela,
        NEW.st)  ;
      end
  end

END
^

/* Trigger: INTERNO_IU_SINC_BLOB */
CREATE TRIGGER INTERNO_IU_SINC_BLOB FOR INTERNO
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-08 10:04:18.3240
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.FOTO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_PERFIL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_PERFIL', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_TATUAGEM IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_TATUAGEM', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_SINAIS IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_SINAIS1 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS1', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_SINAIS2 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS2', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_SINAIS3 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS3', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (NEW.FOTO_SINAIS4 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS4', 'ID_INTERNO', NEW.ID_INTERNO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.FOTO <> NEW.FOTO) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_PERFIL <> NEW.FOTO_PERFIL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_PERFIL', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_TATUAGEM <> NEW.FOTO_TATUAGEM) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_TATUAGEM', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_SINAIS <> NEW.FOTO_SINAIS) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_SINAIS1 <> NEW.FOTO_SINAIS1) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS1', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_SINAIS2 <> NEW.FOTO_SINAIS2) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS2', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_SINAIS3 <> NEW.FOTO_SINAIS3) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS3', 'ID_INTERNO', NEW.ID_INTERNO);
        END

        IF (OLD.FOTO_SINAIS4 <> NEW.FOTO_SINAIS4) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS4', 'ID_INTERNO', NEW.ID_INTERNO);
        END

    END

   END

END
^

/* Trigger: INTERRUPCAO_BI */
CREATE TRIGGER INTERRUPCAO_BI FOR INTERRUPCAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDINTERRUPCAO,0)=0) THEN
    NEW.IDINTERRUPCAO = GEN_ID(COD_UP,0)||GEN_ID(IDINTERRUPCAO,1);
END
^

/* Trigger: ITENS_PATRIMONIO_AD_SINCRONISMO */
CREATE TRIGGER ITENS_PATRIMONIO_AD_SINCRONISMO FOR ITENS_PATRIMONIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM ITENS_PATRIMONIO WHERE ID_ITENS_PATRIMONIO = '||OLD.ID_ITENS_PATRIMONIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: ITENS_PATRIMONIO_AI_SINCRONISMO */
CREATE TRIGGER ITENS_PATRIMONIO_AI_SINCRONISMO FOR ITENS_PATRIMONIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO ITENS_PATRIMONIO (ID_ITENS_PATRIMONIO,'
||' ID_PATRIMONIO,'
||' ID_ACESSORIOS,'
||' QTDE) VALUES ('
||COALESCE(NEW.ID_ITENS_PATRIMONIO,'NULL')||','
||COALESCE(NEW.ID_PATRIMONIO,'NULL')||','
||COALESCE(NEW.ID_ACESSORIOS,'NULL')||','
||COALESCE(NEW.QTDE,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: ITENS_PATRIMONIO_AU_SINCRONISMO */
CREATE TRIGGER ITENS_PATRIMONIO_AU_SINCRONISMO FOR ITENS_PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_PATRIMONIO,'')<>COALESCE(OLD.ID_PATRIMONIO,'')) THEN TXT=TXT||',ID_PATRIMONIO = '||COALESCE(NEW.ID_PATRIMONIO,'NULL');
IF (COALESCE(NEW.ID_ACESSORIOS,'')<>COALESCE(OLD.ID_ACESSORIOS,'')) THEN TXT=TXT||',ID_ACESSORIOS = '||COALESCE(NEW.ID_ACESSORIOS,'NULL');
IF (COALESCE(NEW.QTDE,'')<>COALESCE(OLD.QTDE,'')) THEN TXT=TXT||',QTDE = '||COALESCE(NEW.QTDE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ITENS_PATRIMONIO SET ID_ITENS_PATRIMONIO = '''||NEW.ID_ITENS_PATRIMONIO||''''||TXT||' WHERE ID_ITENS_PATRIMONIO = '''||NEW.ID_ITENS_PATRIMONIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: ITENS_PATRIMONIO_BD_LOG */
CREATE TRIGGER ITENS_PATRIMONIO_BD_LOG FOR ITENS_PATRIMONIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ITENS_PATRIMONIO (ID_ITENS_PATRIMONIO,'
||' ID_PATRIMONIO,'
||' ID_ACESSORIOS,'
||' QTDE) VALUES ('
||COALESCE(OLD.ID_ITENS_PATRIMONIO,'NULL')||','
||COALESCE(OLD.ID_PATRIMONIO,'NULL')||','
||COALESCE(OLD.ID_ACESSORIOS,'NULL')||','
||COALESCE(OLD.QTDE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ITENS_PATRIMONIO', OLD.ID_ITENS_PATRIMONIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ITENS_PATRIMONIO_BI0 */
CREATE TRIGGER ITENS_PATRIMONIO_BI0 FOR ITENS_PATRIMONIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.id_itens_patrimonio,0)=0) THEN
  BEGIN
    NEW.id_itens_patrimonio = GEN_ID(COD_UP,0)||GEN_ID(iditenspatrimonio,1);
  END

END
^

/* Trigger: ITENS_PATRIMONIO_BI_LOG */
CREATE TRIGGER ITENS_PATRIMONIO_BI_LOG FOR ITENS_PATRIMONIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO ITENS_PATRIMONIO (ID_ITENS_PATRIMONIO,'
||' ID_PATRIMONIO,'
||' ID_ACESSORIOS,'
||' QTDE) VALUES ('
||COALESCE(NEW.ID_ITENS_PATRIMONIO,'NULL')||','
||COALESCE(NEW.ID_PATRIMONIO,'NULL')||','
||COALESCE(NEW.ID_ACESSORIOS,'NULL')||','
||COALESCE(NEW.QTDE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ITENS_PATRIMONIO', NEW.ID_ITENS_PATRIMONIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: ITENS_PATRIMONIO_BU_LOG */
CREATE TRIGGER ITENS_PATRIMONIO_BU_LOG FOR ITENS_PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_PATRIMONIO,'')<>COALESCE(OLD.ID_PATRIMONIO,'')) THEN TXT=TXT||',ID_PATRIMONIO = '||COALESCE(NEW.ID_PATRIMONIO,'NULL');
IF (COALESCE(NEW.ID_ACESSORIOS,'')<>COALESCE(OLD.ID_ACESSORIOS,'')) THEN TXT=TXT||',ID_ACESSORIOS = '||COALESCE(NEW.ID_ACESSORIOS,'NULL');
IF (COALESCE(NEW.QTDE,'')<>COALESCE(OLD.QTDE,'')) THEN TXT=TXT||',QTDE = '||COALESCE(NEW.QTDE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE ITENS_PATRIMONIO SET ID_ITENS_PATRIMONIO = '''||NEW.ID_ITENS_PATRIMONIO||''''||TXT||' WHERE ID_ITENS_PATRIMONIO = '''||NEW.ID_ITENS_PATRIMONIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'ITENS_PATRIMONIO', NEW.ID_ITENS_PATRIMONIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: LIVRO_AD_SINCRONISMO */
CREATE TRIGGER LIVRO_AD_SINCRONISMO FOR LIVRO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM LIVRO WHERE ID_LIVRO = '||OLD.ID_LIVRO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: LIVRO_AI_SINCRONISMO */
CREATE TRIGGER LIVRO_AI_SINCRONISMO FOR LIVRO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO LIVRO (ID_LIVRO,'
||' LIVRO,'
||' ID_FORNECEDOR) VALUES ('
||COALESCE(NEW.ID_LIVRO,'NULL')||','
||COALESCE(''''||NEW.LIVRO||'''','NULL')||','
||COALESCE(NEW.ID_FORNECEDOR,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: LIVRO_AU_SINCRONISMO */
CREATE TRIGGER LIVRO_AU_SINCRONISMO FOR LIVRO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.LIVRO,'')<>COALESCE(OLD.LIVRO,'')) THEN TXT=TXT||',LIVRO = '||COALESCE(''''||NEW.LIVRO||'''','NULL');
IF (COALESCE(NEW.ID_FORNECEDOR,'')<>COALESCE(OLD.ID_FORNECEDOR,'')) THEN TXT=TXT||',ID_FORNECEDOR = '||COALESCE(NEW.ID_FORNECEDOR,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE LIVRO SET ID_LIVRO = '''||NEW.ID_LIVRO||''''||TXT||' WHERE ID_LIVRO = '''||NEW.ID_LIVRO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: LIVRO_BD_LOG */
CREATE TRIGGER LIVRO_BD_LOG FOR LIVRO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO LIVRO (ID_LIVRO,'
||' LIVRO,'
||' ID_FORNECEDOR) VALUES ('
||COALESCE(OLD.ID_LIVRO,'NULL')||','
||COALESCE(''''||OLD.LIVRO||'''','NULL')||','
||COALESCE(OLD.ID_FORNECEDOR,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'LIVRO', OLD.ID_LIVRO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: LIVRO_BI0 */
CREATE TRIGGER LIVRO_BI0 FOR LIVRO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
 if (NEW.id_livro IS NULL or (NEW.id_livro = 0) ) then
    NEW.id_livro = GEN_ID(cod_up,0)||GEN_ID(idlivro,1);
end
^

/* Trigger: LIVRO_BI_LOG */
CREATE TRIGGER LIVRO_BI_LOG FOR LIVRO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO LIVRO (ID_LIVRO,'
||' LIVRO,'
||' ID_FORNECEDOR) VALUES ('
||COALESCE(NEW.ID_LIVRO,'NULL')||','
||COALESCE(''''||NEW.LIVRO||'''','NULL')||','
||COALESCE(NEW.ID_FORNECEDOR,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'LIVRO', NEW.ID_LIVRO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: LIVRO_BU_LOG */
CREATE TRIGGER LIVRO_BU_LOG FOR LIVRO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.LIVRO,'')<>COALESCE(OLD.LIVRO,'')) THEN TXT=TXT||',LIVRO = '||COALESCE(''''||NEW.LIVRO||'''','NULL');
IF (COALESCE(NEW.ID_FORNECEDOR,'')<>COALESCE(OLD.ID_FORNECEDOR,'')) THEN TXT=TXT||',ID_FORNECEDOR = '||COALESCE(NEW.ID_FORNECEDOR,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE LIVRO SET ID_LIVRO = '''||NEW.ID_LIVRO||''''||TXT||' WHERE ID_LIVRO = '''||NEW.ID_LIVRO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'LIVRO', NEW.ID_LIVRO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: LIVRO_INTERNO_AD_SINCRONISMO */
CREATE TRIGGER LIVRO_INTERNO_AD_SINCRONISMO FOR LIVRO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM LIVRO_INTERNO WHERE ID_LIVRO_INTERNO = '||OLD.ID_LIVRO_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: LIVRO_INTERNO_AI_SINCRONISMO */
CREATE TRIGGER LIVRO_INTERNO_AI_SINCRONISMO FOR LIVRO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO LIVRO_INTERNO (ID_LIVRO_INTERNO,'
||' ID_LIVRO,'
||' ID_INTERNO,'
||' DATA,'
||' OBS) VALUES ('
||COALESCE(NEW.ID_LIVRO_INTERNO,'NULL')||','
||COALESCE(NEW.ID_LIVRO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: LIVRO_INTERNO_AU_SINCRONISMO */
CREATE TRIGGER LIVRO_INTERNO_AU_SINCRONISMO FOR LIVRO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_LIVRO,'')<>COALESCE(OLD.ID_LIVRO,'')) THEN TXT=TXT||',ID_LIVRO = '||COALESCE(NEW.ID_LIVRO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE LIVRO_INTERNO SET ID_LIVRO_INTERNO = '''||NEW.ID_LIVRO_INTERNO||''''||TXT||' WHERE ID_LIVRO_INTERNO = '''||NEW.ID_LIVRO_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: LIVRO_INTERNO_BD_LOG */
CREATE TRIGGER LIVRO_INTERNO_BD_LOG FOR LIVRO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO LIVRO_INTERNO (ID_LIVRO_INTERNO,'
||' ID_LIVRO,'
||' ID_INTERNO,'
||' DATA,'
||' OBS) VALUES ('
||COALESCE(OLD.ID_LIVRO_INTERNO,'NULL')||','
||COALESCE(OLD.ID_LIVRO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(''''||OLD.OBS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'LIVRO_INTERNO', OLD.ID_LIVRO_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: LIVRO_INTERNO_BI0 */
CREATE TRIGGER LIVRO_INTERNO_BI0 FOR LIVRO_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.id_livro_interno,0)=0) then
  NEW.id_livro_interno = gen_id(cod_up,0)||gen_id(idremediointerno,1);
end
^

/* Trigger: LIVRO_INTERNO_BI_LOG */
CREATE TRIGGER LIVRO_INTERNO_BI_LOG FOR LIVRO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO LIVRO_INTERNO (ID_LIVRO_INTERNO,'
||' ID_LIVRO,'
||' ID_INTERNO,'
||' DATA,'
||' OBS) VALUES ('
||COALESCE(NEW.ID_LIVRO_INTERNO,'NULL')||','
||COALESCE(NEW.ID_LIVRO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'LIVRO_INTERNO', NEW.ID_LIVRO_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: LIVRO_INTERNO_BU_LOG */
CREATE TRIGGER LIVRO_INTERNO_BU_LOG FOR LIVRO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_LIVRO,'')<>COALESCE(OLD.ID_LIVRO,'')) THEN TXT=TXT||',ID_LIVRO = '||COALESCE(NEW.ID_LIVRO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE LIVRO_INTERNO SET ID_LIVRO_INTERNO = '''||NEW.ID_LIVRO_INTERNO||''''||TXT||' WHERE ID_LIVRO_INTERNO = '''||NEW.ID_LIVRO_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'LIVRO_INTERNO', NEW.ID_LIVRO_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: LOG_SISTEMA_BI0 */
CREATE TRIGGER LOG_SISTEMA_BI0 FOR LOG_SISTEMA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.IDLOG_SISTEMA = GEN_ID(IDLOG_SISTEMA,1);
end
^

/* Trigger: MENORES_AD_SINCRONISMO */
CREATE TRIGGER MENORES_AD_SINCRONISMO FOR MENORES
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MENORES WHERE ID_MENORES = '||OLD.ID_MENORES||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MENORES_AI_SINCRONISMO */
CREATE TRIGGER MENORES_AI_SINCRONISMO FOR MENORES
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MENORES (ID_MENORES,'
||' NOME_MENORES,'
||' ID_VISITANTE,'
||' NUMERO_CERTIDAO_NASCIMENTO,'
||' DATA_NASCIMENTO,'
||' ID_GRAU_PARENTESCO) VALUES ('
||COALESCE(NEW.ID_MENORES,'NULL')||','
||COALESCE(''''||NEW.NOME_MENORES||'''','NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MENORES_AU_SINCRONISMO */
CREATE TRIGGER MENORES_AU_SINCRONISMO FOR MENORES
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME_MENORES,'')<>COALESCE(OLD.NOME_MENORES,'')) THEN TXT=TXT||',NOME_MENORES = '||COALESCE(''''||NEW.NOME_MENORES||'''','NULL');
IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.NUMERO_CERTIDAO_NASCIMENTO,'')<>COALESCE(OLD.NUMERO_CERTIDAO_NASCIMENTO,'')) THEN TXT=TXT||',NUMERO_CERTIDAO_NASCIMENTO = '||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MENORES SET ID_MENORES = '''||NEW.ID_MENORES||''''||TXT||' WHERE ID_MENORES = '''||NEW.ID_MENORES||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MENORES_BD_LOG */
CREATE TRIGGER MENORES_BD_LOG FOR MENORES
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MENORES (ID_MENORES,'
||' NOME_MENORES,'
||' ID_VISITANTE,'
||' NUMERO_CERTIDAO_NASCIMENTO,'
||' DATA_NASCIMENTO,'
||' ID_GRAU_PARENTESCO) VALUES ('
||COALESCE(OLD.ID_MENORES,'NULL')||','
||COALESCE(''''||OLD.NOME_MENORES||'''','NULL')||','
||COALESCE(OLD.ID_VISITANTE,'NULL')||','
||COALESCE(''''||OLD.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(OLD.ID_GRAU_PARENTESCO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MENORES', OLD.ID_MENORES,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MENORES_BI0 */
CREATE TRIGGER MENORES_BI0 FOR MENORES
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
     if (NEW.id_menores IS null or (new.id_menores = 0)  ) then
    new.id_menores = gen_id (cod_up, 0) || gen_id (id_menores, 1);

end
^

/* Trigger: MENORES_BI_LOG */
CREATE TRIGGER MENORES_BI_LOG FOR MENORES
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MENORES (ID_MENORES,'
||' NOME_MENORES,'
||' ID_VISITANTE,'
||' NUMERO_CERTIDAO_NASCIMENTO,'
||' DATA_NASCIMENTO,'
||' ID_GRAU_PARENTESCO) VALUES ('
||COALESCE(NEW.ID_MENORES,'NULL')||','
||COALESCE(''''||NEW.NOME_MENORES||'''','NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MENORES', NEW.ID_MENORES,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MENORES_BU_LOG */
CREATE TRIGGER MENORES_BU_LOG FOR MENORES
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME_MENORES,'')<>COALESCE(OLD.NOME_MENORES,'')) THEN TXT=TXT||',NOME_MENORES = '||COALESCE(''''||NEW.NOME_MENORES||'''','NULL');
IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.NUMERO_CERTIDAO_NASCIMENTO,'')<>COALESCE(OLD.NUMERO_CERTIDAO_NASCIMENTO,'')) THEN TXT=TXT||',NUMERO_CERTIDAO_NASCIMENTO = '||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MENORES SET ID_MENORES = '''||NEW.ID_MENORES||''''||TXT||' WHERE ID_MENORES = '''||NEW.ID_MENORES||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MENORES', NEW.ID_MENORES,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_CAUTELA_AD_SINCRONISMO */
CREATE TRIGGER MOV_CAUTELA_AD_SINCRONISMO FOR MOV_CAUTELA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_CAUTELA WHERE IDMOV_CAUTELA = '||OLD.IDMOV_CAUTELA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_CAUTELA_AI_CAUTELA */
CREATE TRIGGER MOV_CAUTELA_AI_CAUTELA FOR MOV_CAUTELA
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')<>'') THEN
     EXIT;

  /* TRIGGER TEXT */

  IF (COALESCE(NEW.IDMOV_CAUTELA2,0) > 0) THEN
  BEGIN
    IF (NEW.TIPO_MOVIMENTO='E') THEN
    BEGIN

        UPDATE MOV_CAUTELA M SET M.QUANTIDADE_DEVOLVIDA = NEW.QUANTIDADE
        WHERE M.IDMOV_CAUTELA = NEW.IDMOV_CAUTELA2;

    END
  END


END
^

/* Trigger: MOV_CAUTELA_AI_SINCRONISMO */
CREATE TRIGGER MOV_CAUTELA_AI_SINCRONISMO FOR MOV_CAUTELA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_CAUTELA (IDMOV_CAUTELA,'
||' IDFUNCIONARIO_LANCAMENTO,'
||' IDPOSTO_TRABALHO,'
||' IDFUNCIONARIO_RESPONSAVEL,'
||' IDPATRIMONIO,'
||' ID_UP,'
||' NUMERO_CAUTELA,'
||' DATA_MOVIMENTO,'
||' HORA_MOVIMENTO,'
||' QUANTIDADE,'
||' TIPO_MOVIMENTO,'
||' HISTORICO,'
||' OBSERVACAO,'
||' DADOS_ADICIONAIS,'
||' QUANTIDADE_DEVOLVIDA,'
||' IDMOV_CAUTELA2,'
||' MISSAO_CAUTELA,'
||' DATA_DEV_CAUTELA) VALUES ('
||COALESCE(NEW.IDMOV_CAUTELA,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_LANCAMENTO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_RESPONSAVEL,'NULL')||','
||COALESCE(NEW.IDPATRIMONIO,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_MOVIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_MOVIMENTO||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE,'NULL')||','
||COALESCE(''''||NEW.TIPO_MOVIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.DADOS_ADICIONAIS||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE_DEVOLVIDA,'NULL')||','
||COALESCE(NEW.IDMOV_CAUTELA2,'NULL')||','
||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_CAUTELA_AU_SINCRONISMO */
CREATE TRIGGER MOV_CAUTELA_AU_SINCRONISMO FOR MOV_CAUTELA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDFUNCIONARIO_LANCAMENTO,'')<>COALESCE(OLD.IDFUNCIONARIO_LANCAMENTO,'')) THEN TXT=TXT||',IDFUNCIONARIO_LANCAMENTO = '||COALESCE(NEW.IDFUNCIONARIO_LANCAMENTO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_RESPONSAVEL,'')<>COALESCE(OLD.IDFUNCIONARIO_RESPONSAVEL,'')) THEN TXT=TXT||',IDFUNCIONARIO_RESPONSAVEL = '||COALESCE(NEW.IDFUNCIONARIO_RESPONSAVEL,'NULL');
IF (COALESCE(NEW.IDPATRIMONIO,'')<>COALESCE(OLD.IDPATRIMONIO,'')) THEN TXT=TXT||',IDPATRIMONIO = '||COALESCE(NEW.IDPATRIMONIO,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.NUMERO_CAUTELA,'')<>COALESCE(OLD.NUMERO_CAUTELA,'')) THEN TXT=TXT||',NUMERO_CAUTELA = '||COALESCE(''''||NEW.NUMERO_CAUTELA||'''','NULL');
IF (COALESCE(NEW.DATA_MOVIMENTO,'')<>COALESCE(OLD.DATA_MOVIMENTO,'')) THEN TXT=TXT||',DATA_MOVIMENTO = '||COALESCE(''''||NEW.DATA_MOVIMENTO||'''','NULL');
IF (COALESCE(NEW.HORA_MOVIMENTO,'')<>COALESCE(OLD.HORA_MOVIMENTO,'')) THEN TXT=TXT||',HORA_MOVIMENTO = '||COALESCE(''''||NEW.HORA_MOVIMENTO||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE,'')<>COALESCE(OLD.QUANTIDADE,'')) THEN TXT=TXT||',QUANTIDADE = '||COALESCE(NEW.QUANTIDADE,'NULL');
IF (COALESCE(NEW.TIPO_MOVIMENTO,'')<>COALESCE(OLD.TIPO_MOVIMENTO,'')) THEN TXT=TXT||',TIPO_MOVIMENTO = '||COALESCE(''''||NEW.TIPO_MOVIMENTO||'''','NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.DADOS_ADICIONAIS,'')<>COALESCE(OLD.DADOS_ADICIONAIS,'')) THEN TXT=TXT||',DADOS_ADICIONAIS = '||COALESCE(''''||NEW.DADOS_ADICIONAIS||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE_DEVOLVIDA,'')<>COALESCE(OLD.QUANTIDADE_DEVOLVIDA,'')) THEN TXT=TXT||',QUANTIDADE_DEVOLVIDA = '||COALESCE(NEW.QUANTIDADE_DEVOLVIDA,'NULL');
IF (COALESCE(NEW.IDMOV_CAUTELA2,'')<>COALESCE(OLD.IDMOV_CAUTELA2,'')) THEN TXT=TXT||',IDMOV_CAUTELA2 = '||COALESCE(NEW.IDMOV_CAUTELA2,'NULL');
IF (COALESCE(NEW.MISSAO_CAUTELA,'')<>COALESCE(OLD.MISSAO_CAUTELA,'')) THEN TXT=TXT||',MISSAO_CAUTELA = '||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL');
IF (COALESCE(NEW.DATA_DEV_CAUTELA,'')<>COALESCE(OLD.DATA_DEV_CAUTELA,'')) THEN TXT=TXT||',DATA_DEV_CAUTELA = '||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_CAUTELA SET IDMOV_CAUTELA = '''||NEW.IDMOV_CAUTELA||''''||TXT||' WHERE IDMOV_CAUTELA = '''||NEW.IDMOV_CAUTELA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_CAUTELA_BD_LOG */
CREATE TRIGGER MOV_CAUTELA_BD_LOG FOR MOV_CAUTELA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_CAUTELA (IDMOV_CAUTELA,'
||' IDFUNCIONARIO_LANCAMENTO,'
||' IDPOSTO_TRABALHO,'
||' IDFUNCIONARIO_RESPONSAVEL,'
||' IDPATRIMONIO,'
||' ID_UP,'
||' NUMERO_CAUTELA,'
||' DATA_MOVIMENTO,'
||' HORA_MOVIMENTO,'
||' QUANTIDADE,'
||' TIPO_MOVIMENTO,'
||' HISTORICO,'
||' OBSERVACAO,'
||' DADOS_ADICIONAIS,'
||' QUANTIDADE_DEVOLVIDA,'
||' IDMOV_CAUTELA2,'
||' MISSAO_CAUTELA,'
||' DATA_DEV_CAUTELA) VALUES ('
||COALESCE(OLD.IDMOV_CAUTELA,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO_LANCAMENTO,'NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO_RESPONSAVEL,'NULL')||','
||COALESCE(OLD.IDPATRIMONIO,'NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(''''||OLD.NUMERO_CAUTELA||'''','NULL')||','
||COALESCE(''''||OLD.DATA_MOVIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.HORA_MOVIMENTO||'''','NULL')||','
||COALESCE(OLD.QUANTIDADE,'NULL')||','
||COALESCE(''''||OLD.TIPO_MOVIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.HISTORICO||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||OLD.DADOS_ADICIONAIS||'''','NULL')||','
||COALESCE(OLD.QUANTIDADE_DEVOLVIDA,'NULL')||','
||COALESCE(OLD.IDMOV_CAUTELA2,'NULL')||','
||COALESCE(''''||OLD.MISSAO_CAUTELA||'''','NULL')||','
||COALESCE(''''||OLD.DATA_DEV_CAUTELA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_CAUTELA', OLD.IDMOV_CAUTELA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_CAUTELA_BI0 */
CREATE TRIGGER MOV_CAUTELA_BI0 FOR MOV_CAUTELA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.IDMOV_CAUTELA,0)=0) THEN
  BEGIN
    NEW.IDMOV_CAUTELA = GEN_ID(COD_UP,0)||GEN_ID(IDMOV_CAUTELA,1);
  END

END
^

/* Trigger: MOV_CAUTELA_BI_LOG */
CREATE TRIGGER MOV_CAUTELA_BI_LOG FOR MOV_CAUTELA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_CAUTELA (IDMOV_CAUTELA,'
||' IDFUNCIONARIO_LANCAMENTO,'
||' IDPOSTO_TRABALHO,'
||' IDFUNCIONARIO_RESPONSAVEL,'
||' IDPATRIMONIO,'
||' ID_UP,'
||' NUMERO_CAUTELA,'
||' DATA_MOVIMENTO,'
||' HORA_MOVIMENTO,'
||' QUANTIDADE,'
||' TIPO_MOVIMENTO,'
||' HISTORICO,'
||' OBSERVACAO,'
||' DADOS_ADICIONAIS,'
||' QUANTIDADE_DEVOLVIDA,'
||' IDMOV_CAUTELA2,'
||' MISSAO_CAUTELA,'
||' DATA_DEV_CAUTELA) VALUES ('
||COALESCE(NEW.IDMOV_CAUTELA,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_LANCAMENTO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_RESPONSAVEL,'NULL')||','
||COALESCE(NEW.IDPATRIMONIO,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_MOVIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_MOVIMENTO||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE,'NULL')||','
||COALESCE(''''||NEW.TIPO_MOVIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.HISTORICO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.DADOS_ADICIONAIS||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE_DEVOLVIDA,'NULL')||','
||COALESCE(NEW.IDMOV_CAUTELA2,'NULL')||','
||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_CAUTELA', NEW.IDMOV_CAUTELA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_CAUTELA_BU_LOG */
CREATE TRIGGER MOV_CAUTELA_BU_LOG FOR MOV_CAUTELA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDFUNCIONARIO_LANCAMENTO,'')<>COALESCE(OLD.IDFUNCIONARIO_LANCAMENTO,'')) THEN TXT=TXT||',IDFUNCIONARIO_LANCAMENTO = '||COALESCE(NEW.IDFUNCIONARIO_LANCAMENTO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_RESPONSAVEL,'')<>COALESCE(OLD.IDFUNCIONARIO_RESPONSAVEL,'')) THEN TXT=TXT||',IDFUNCIONARIO_RESPONSAVEL = '||COALESCE(NEW.IDFUNCIONARIO_RESPONSAVEL,'NULL');
IF (COALESCE(NEW.IDPATRIMONIO,'')<>COALESCE(OLD.IDPATRIMONIO,'')) THEN TXT=TXT||',IDPATRIMONIO = '||COALESCE(NEW.IDPATRIMONIO,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.NUMERO_CAUTELA,'')<>COALESCE(OLD.NUMERO_CAUTELA,'')) THEN TXT=TXT||',NUMERO_CAUTELA = '||COALESCE(''''||NEW.NUMERO_CAUTELA||'''','NULL');
IF (COALESCE(NEW.DATA_MOVIMENTO,'')<>COALESCE(OLD.DATA_MOVIMENTO,'')) THEN TXT=TXT||',DATA_MOVIMENTO = '||COALESCE(''''||NEW.DATA_MOVIMENTO||'''','NULL');
IF (COALESCE(NEW.HORA_MOVIMENTO,'')<>COALESCE(OLD.HORA_MOVIMENTO,'')) THEN TXT=TXT||',HORA_MOVIMENTO = '||COALESCE(''''||NEW.HORA_MOVIMENTO||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE,'')<>COALESCE(OLD.QUANTIDADE,'')) THEN TXT=TXT||',QUANTIDADE = '||COALESCE(NEW.QUANTIDADE,'NULL');
IF (COALESCE(NEW.TIPO_MOVIMENTO,'')<>COALESCE(OLD.TIPO_MOVIMENTO,'')) THEN TXT=TXT||',TIPO_MOVIMENTO = '||COALESCE(''''||NEW.TIPO_MOVIMENTO||'''','NULL');
IF (COALESCE(NEW.HISTORICO,'')<>COALESCE(OLD.HISTORICO,'')) THEN TXT=TXT||',HISTORICO = '||COALESCE(''''||NEW.HISTORICO||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.DADOS_ADICIONAIS,'')<>COALESCE(OLD.DADOS_ADICIONAIS,'')) THEN TXT=TXT||',DADOS_ADICIONAIS = '||COALESCE(''''||NEW.DADOS_ADICIONAIS||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE_DEVOLVIDA,'')<>COALESCE(OLD.QUANTIDADE_DEVOLVIDA,'')) THEN TXT=TXT||',QUANTIDADE_DEVOLVIDA = '||COALESCE(NEW.QUANTIDADE_DEVOLVIDA,'NULL');
IF (COALESCE(NEW.IDMOV_CAUTELA2,'')<>COALESCE(OLD.IDMOV_CAUTELA2,'')) THEN TXT=TXT||',IDMOV_CAUTELA2 = '||COALESCE(NEW.IDMOV_CAUTELA2,'NULL');
IF (COALESCE(NEW.MISSAO_CAUTELA,'')<>COALESCE(OLD.MISSAO_CAUTELA,'')) THEN TXT=TXT||',MISSAO_CAUTELA = '||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL');
IF (COALESCE(NEW.DATA_DEV_CAUTELA,'')<>COALESCE(OLD.DATA_DEV_CAUTELA,'')) THEN TXT=TXT||',DATA_DEV_CAUTELA = '||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_CAUTELA SET IDMOV_CAUTELA = '''||NEW.IDMOV_CAUTELA||''''||TXT||' WHERE IDMOV_CAUTELA = '''||NEW.IDMOV_CAUTELA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_CAUTELA', NEW.IDMOV_CAUTELA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_CAUTELA_QUANTIDADE */
CREATE TRIGGER MOV_CAUTELA_QUANTIDADE FOR MOV_CAUTELA
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
DECLARE VARIABLE DATA_ULTIMA_MANUTENCAO TYPE OF DM_DATA;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')<>'') THEN
     EXIT;


  NEW.DATA_MOVIMENTO = CURRENT_DATE;
  NEW.HORA_MOVIMENTO = CURRENT_TIME;

  --SE FOR ENTRADA
  IF (NEW.TIPO_MOVIMENTO = 'E') THEN
  BEGIN

    --SE FOR INSERINDO
    IF (INSERTING) THEN
    BEGIN

        --SOMA QUANTIDADE
        IF (NEW.HISTORICO <> 'REGISTRO INICIAL') THEN
        BEGIN
            UPDATE PATRIMONIO SET QUANTIDADE = COALESCE(QUANTIDADE,0) + NEW.QUANTIDADE
            WHERE IDPATRIMONIO = NEW.IDPATRIMONIO;
        END

    END

    --SE FOR ATUALIZANDO
    IF (UPDATING) THEN
    BEGIN

        --SE ANTES TAMBEM ERA ENTRADA
        IF (OLD.TIPO_MOVIMENTO = 'E') THEN
        BEGIN
            --DIMINUI O ANTIGO E SOMA O NOVO
            UPDATE PATRIMONIO SET QUANTIDADE = COALESCE(QUANTIDADE,0) - OLD.QUANTIDADE + NEW.QUANTIDADE
            WHERE IDPATRIMONIO = NEW.IDPATRIMONIO;
        END

        --SE ANTES ERA UMA SAIDA
        IF (OLD.TIPO_MOVIMENTO = 'S') THEN
        BEGIN
            --SOMA O ANTIGO E TAMBEM SOMA O NOVO
            UPDATE PATRIMONIO SET QUANTIDADE = COALESCE(QUANTIDADE,0) + OLD.QUANTIDADE + NEW.QUANTIDADE
            WHERE IDPATRIMONIO = NEW.IDPATRIMONIO;
        END

    END

  END


  --SE FOR UMA SAIDA
  IF (NEW.TIPO_MOVIMENTO = 'S') THEN
  BEGIN

    --SE ESTIVER INSERINDO
    IF (INSERTING) THEN
    BEGIN

        --DIMINUI A QUANTIDADE NOVA
        UPDATE PATRIMONIO SET QUANTIDADE = COALESCE(QUANTIDADE,0) - NEW.QUANTIDADE
        WHERE IDPATRIMONIO = NEW.IDPATRIMONIO;

    END

    --SE FOR ATUALIZANDO
    IF (UPDATING) THEN
    BEGIN
        --SE O ANTIGO TAMBEM FOR UMA SAIDA
        IF (OLD.TIPO_MOVIMENTO = 'S') THEN
        BEGIN
            --SOMA O ANTIGO E DIMINUI O NOVO
            UPDATE PATRIMONIO SET QUANTIDADE = COALESCE(QUANTIDADE,0) + OLD.QUANTIDADE - NEW.QUANTIDADE
            WHERE IDPATRIMONIO = NEW.IDPATRIMONIO;
        END

        -- SE O ANTIGO FOR UMA ENTRADA
        IF (OLD.TIPO_MOVIMENTO = 'E') THEN
        BEGIN
            --DIMINUI O ANTIGO E DIMINUI O NOVO
            UPDATE PATRIMONIO SET QUANTIDADE = COALESCE(QUANTIDADE,0) - OLD.QUANTIDADE - NEW.QUANTIDADE
            WHERE IDPATRIMONIO = NEW.IDPATRIMONIO;
        END

    END

  END

  IF (NEW.HISTORICO LIKE 'MANUT%') THEN
  BEGIN
    DATA_ULTIMA_MANUTENCAO = NEW.DATA_MOVIMENTO;
  END

  UPDATE PATRIMONIO P SET
        P.IDPOSTO_TRABALHO = COALESCE(NEW.IDPOSTO_TRABALHO,P.IDPOSTO_TRABALHO),
        P.OBS_CAUTELA = NEW.HISTORICO,
        P.MISSAO_CAUTELA = NEW.MISSAO_CAUTELA,
        P.DATA_DEV_CAUTELA = NEW.DATA_DEV_CAUTELA,
        P.DATA_ULTIMA_MANUTENCAO = COALESCE(:DATA_ULTIMA_MANUTENCAO,P.DATA_ULTIMA_MANUTENCAO)
  WHERE P.IDPATRIMONIO = NEW.IDPATRIMONIO;


END
^

/* Trigger: MOV_DIARIO_VISITANTES_AD_SINCRO */
CREATE TRIGGER MOV_DIARIO_VISITANTES_AD_SINCRO FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_DIARIO_VISITANTES WHERE ID_MOV_DIARIO_VISITANTES = '||OLD.ID_MOV_DIARIO_VISITANTES||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_DIARIO_VISITANTES_AI_SINCRO */
CREATE TRIGGER MOV_DIARIO_VISITANTES_AI_SINCRO FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_DIARIO_VISITANTES (ID_MOV_DIARIO_VISITANTES,'
||' ID_VISITANTE,'
||' NOME_VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_VISITA,'
||' HORA_VISITA,'
||' ORDEM_VISITA,'
||' CANCELADO,'
||' QUANTIDADE_MENOR,'
||' ID_UP,'
||' STATUS,'
||' LOCAL,'
||' CONTATO) VALUES ('
||COALESCE(NEW.ID_MOV_DIARIO_VISITANTES,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_VISITA||'''','NULL')||','
||COALESCE(NEW.ORDEM_VISITA,'NULL')||','
||COALESCE(''''||NEW.CANCELADO||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE_MENOR,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.LOCAL||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_DIARIO_VISITANTES_AU_SINCRO */
CREATE TRIGGER MOV_DIARIO_VISITANTES_AU_SINCRO FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.NOME_VISITANTE,'')<>COALESCE(OLD.NOME_VISITANTE,'')) THEN TXT=TXT||',NOME_VISITANTE = '||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.NUMERO_CARTEIRINHA,'')<>COALESCE(OLD.NUMERO_CARTEIRINHA,'')) THEN TXT=TXT||',NUMERO_CARTEIRINHA = '||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.DATA_VISITA,'')<>COALESCE(OLD.DATA_VISITA,'')) THEN TXT=TXT||',DATA_VISITA = '||COALESCE(''''||NEW.DATA_VISITA||'''','NULL');
IF (COALESCE(NEW.HORA_VISITA,'')<>COALESCE(OLD.HORA_VISITA,'')) THEN TXT=TXT||',HORA_VISITA = '||COALESCE(''''||NEW.HORA_VISITA||'''','NULL');
IF (COALESCE(NEW.ORDEM_VISITA,'')<>COALESCE(OLD.ORDEM_VISITA,'')) THEN TXT=TXT||',ORDEM_VISITA = '||COALESCE(NEW.ORDEM_VISITA,'NULL');
IF (COALESCE(NEW.CANCELADO,'')<>COALESCE(OLD.CANCELADO,'')) THEN TXT=TXT||',CANCELADO = '||COALESCE(''''||NEW.CANCELADO||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE_MENOR,'')<>COALESCE(OLD.QUANTIDADE_MENOR,'')) THEN TXT=TXT||',QUANTIDADE_MENOR = '||COALESCE(NEW.QUANTIDADE_MENOR,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.LOCAL,'')<>COALESCE(OLD.LOCAL,'')) THEN TXT=TXT||',LOCAL = '||COALESCE(''''||NEW.LOCAL||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_DIARIO_VISITANTES SET ID_MOV_DIARIO_VISITANTES = '''||NEW.ID_MOV_DIARIO_VISITANTES||''''||TXT||' WHERE ID_MOV_DIARIO_VISITANTES = '''||NEW.ID_MOV_DIARIO_VISITANTES||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_DIARIO_VISITANTES_BD_LOG */
CREATE TRIGGER MOV_DIARIO_VISITANTES_BD_LOG FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_DIARIO_VISITANTES (ID_MOV_DIARIO_VISITANTES,'
||' ID_VISITANTE,'
||' NOME_VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_VISITA,'
||' HORA_VISITA,'
||' ORDEM_VISITA,'
||' CANCELADO,'
||' QUANTIDADE_MENOR,'
||' ID_UP,'
||' STATUS,'
||' LOCAL,'
||' CONTATO) VALUES ('
||COALESCE(OLD.ID_MOV_DIARIO_VISITANTES,'NULL')||','
||COALESCE(OLD.ID_VISITANTE,'NULL')||','
||COALESCE(''''||OLD.NOME_VISITANTE||'''','NULL')||','
||COALESCE(OLD.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||OLD.CPF||'''','NULL')||','
||COALESCE(''''||OLD.RG||'''','NULL')||','
||COALESCE(''''||OLD.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||OLD.SEXO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_VISITA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_VISITA||'''','NULL')||','
||COALESCE(OLD.ORDEM_VISITA,'NULL')||','
||COALESCE(''''||OLD.CANCELADO||'''','NULL')||','
||COALESCE(OLD.QUANTIDADE_MENOR,'NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(''''||OLD.STATUS||'''','NULL')||','
||COALESCE(''''||OLD.LOCAL||'''','NULL')||','
||COALESCE(''''||OLD.CONTATO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_DIARIO_VISITANTES', OLD.ID_MOV_DIARIO_VISITANTES,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_DIARIO_VISITANTES_BI0 */
CREATE TRIGGER MOV_DIARIO_VISITANTES_BI0 FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_mov_diario_visitantes IS null or (new.id_mov_diario_visitantes = 0)  ) then
    new.id_mov_diario_visitantes = gen_id (cod_up, 0) || gen_id (id_mov_diario_visitante, 1);
end
^

/* Trigger: MOV_DIARIO_VISITANTES_BI_LOG */
CREATE TRIGGER MOV_DIARIO_VISITANTES_BI_LOG FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_DIARIO_VISITANTES (ID_MOV_DIARIO_VISITANTES,'
||' ID_VISITANTE,'
||' NOME_VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_VISITA,'
||' HORA_VISITA,'
||' ORDEM_VISITA,'
||' CANCELADO,'
||' QUANTIDADE_MENOR,'
||' ID_UP,'
||' STATUS,'
||' LOCAL,'
||' CONTATO) VALUES ('
||COALESCE(NEW.ID_MOV_DIARIO_VISITANTES,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_VISITA||'''','NULL')||','
||COALESCE(NEW.ORDEM_VISITA,'NULL')||','
||COALESCE(''''||NEW.CANCELADO||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE_MENOR,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.LOCAL||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_DIARIO_VISITANTES', NEW.ID_MOV_DIARIO_VISITANTES,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_DIARIO_VISITANTES_BU_LOG */
CREATE TRIGGER MOV_DIARIO_VISITANTES_BU_LOG FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.NOME_VISITANTE,'')<>COALESCE(OLD.NOME_VISITANTE,'')) THEN TXT=TXT||',NOME_VISITANTE = '||COALESCE(''''||NEW.NOME_VISITANTE||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.NUMERO_CARTEIRINHA,'')<>COALESCE(OLD.NUMERO_CARTEIRINHA,'')) THEN TXT=TXT||',NUMERO_CARTEIRINHA = '||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.DATA_VISITA,'')<>COALESCE(OLD.DATA_VISITA,'')) THEN TXT=TXT||',DATA_VISITA = '||COALESCE(''''||NEW.DATA_VISITA||'''','NULL');
IF (COALESCE(NEW.HORA_VISITA,'')<>COALESCE(OLD.HORA_VISITA,'')) THEN TXT=TXT||',HORA_VISITA = '||COALESCE(''''||NEW.HORA_VISITA||'''','NULL');
IF (COALESCE(NEW.ORDEM_VISITA,'')<>COALESCE(OLD.ORDEM_VISITA,'')) THEN TXT=TXT||',ORDEM_VISITA = '||COALESCE(NEW.ORDEM_VISITA,'NULL');
IF (COALESCE(NEW.CANCELADO,'')<>COALESCE(OLD.CANCELADO,'')) THEN TXT=TXT||',CANCELADO = '||COALESCE(''''||NEW.CANCELADO||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE_MENOR,'')<>COALESCE(OLD.QUANTIDADE_MENOR,'')) THEN TXT=TXT||',QUANTIDADE_MENOR = '||COALESCE(NEW.QUANTIDADE_MENOR,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.LOCAL,'')<>COALESCE(OLD.LOCAL,'')) THEN TXT=TXT||',LOCAL = '||COALESCE(''''||NEW.LOCAL||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_DIARIO_VISITANTES SET ID_MOV_DIARIO_VISITANTES = '''||NEW.ID_MOV_DIARIO_VISITANTES||''''||TXT||' WHERE ID_MOV_DIARIO_VISITANTES = '''||NEW.ID_MOV_DIARIO_VISITANTES||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_DIARIO_VISITANTES', NEW.ID_MOV_DIARIO_VISITANTES,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_DIARIO_VISITANTES_ORDENAR */
CREATE TRIGGER MOV_DIARIO_VISITANTES_ORDENAR FOR MOV_DIARIO_VISITANTES
ACTIVE BEFORE INSERT POSITION 0
AS
begin

    select count(*)+1
    from mov_diario_visitantes
    where data_visita=current_date
    and mov_diario_visitantes.cancelado is null
    and mov_diario_visitantes.id_mov_diario_visitantes like gen_id(cod_up,0)||'%'
    into new.ordem_visita;

end
^

/* Trigger: MOV_DIARIO_VISITANTES_REORDENA */
CREATE TRIGGER MOV_DIARIO_VISITANTES_REORDENA FOR MOV_DIARIO_VISITANTES
ACTIVE AFTER UPDATE POSITION 0
AS
declare variable ordem integer;
declare variable id_mov_diario_visitantes integer;
begin
    ordem = 0;
    if (new.cancelado='S') then
    begin
        for
            select mov_diario_visitantes.id_mov_diario_visitantes
            from mov_diario_visitantes
            where mov_diario_visitantes.data_visita=current_date
            and mov_diario_visitantes.cancelado is null
            and mov_diario_visitantes.id_mov_diario_visitantes like gen_id(cod_up,0)||'%'
            order by id_mov_diario_visitantes
            into :id_mov_diario_visitantes
        do
        begin
            ordem = ordem + 1 ;
            update mov_diario_visitantes set mov_diario_visitantes.ordem_visita = :ordem
            where mov_diario_visitantes.id_mov_diario_visitantes = :id_mov_diario_visitantes;
        end
    end
end
^

/* Trigger: MOV_EVENTOS_AD_SINCRONISMO */
CREATE TRIGGER MOV_EVENTOS_AD_SINCRONISMO FOR MOV_EVENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_EVENTOS WHERE IDMOV_EVENTOS = '||OLD.IDMOV_EVENTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_EVENTOS_AI_SINCRONISMO */
CREATE TRIGGER MOV_EVENTOS_AI_SINCRONISMO FOR MOV_EVENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_EVENTOS (IDMOV_EVENTOS,'
||' IDFUNCIONARIO,'
||' IDPOSTO_TRABALHO,'
||' ID_UP,'
||' ID_EVENTOS,'
||' ID_SUB_EVENTOS,'
||' OBSERVACAO,'
||' IDFUNCIONARIO_MONITOR,'
||' DATA_EVENTO,'
||' HORA_EVENTO,'
||' STATUS,'
||' ARQUIVO_RELACIONADO,'
||' IDEQUIPE) VALUES ('
||COALESCE(NEW.IDMOV_EVENTOS,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.ID_EVENTOS,'NULL')||','
||COALESCE(NEW.ID_SUB_EVENTOS,'NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_MONITOR,'NULL')||','
||COALESCE(''''||NEW.DATA_EVENTO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_EVENTO||'''','NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.ARQUIVO_RELACIONADO||'''','NULL')||','
||COALESCE(NEW.IDEQUIPE,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_EVENTOS_AU_SINCRONISMO */
CREATE TRIGGER MOV_EVENTOS_AU_SINCRONISMO FOR MOV_EVENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.ID_EVENTOS,'')<>COALESCE(OLD.ID_EVENTOS,'')) THEN TXT=TXT||',ID_EVENTOS = '||COALESCE(NEW.ID_EVENTOS,'NULL');
IF (COALESCE(NEW.ID_SUB_EVENTOS,'')<>COALESCE(OLD.ID_SUB_EVENTOS,'')) THEN TXT=TXT||',ID_SUB_EVENTOS = '||COALESCE(NEW.ID_SUB_EVENTOS,'NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_MONITOR,'')<>COALESCE(OLD.IDFUNCIONARIO_MONITOR,'')) THEN TXT=TXT||',IDFUNCIONARIO_MONITOR = '||COALESCE(NEW.IDFUNCIONARIO_MONITOR,'NULL');
IF (COALESCE(NEW.DATA_EVENTO,'')<>COALESCE(OLD.DATA_EVENTO,'')) THEN TXT=TXT||',DATA_EVENTO = '||COALESCE(''''||NEW.DATA_EVENTO||'''','NULL');
IF (COALESCE(NEW.HORA_EVENTO,'')<>COALESCE(OLD.HORA_EVENTO,'')) THEN TXT=TXT||',HORA_EVENTO = '||COALESCE(''''||NEW.HORA_EVENTO||'''','NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.ARQUIVO_RELACIONADO,'')<>COALESCE(OLD.ARQUIVO_RELACIONADO,'')) THEN TXT=TXT||',ARQUIVO_RELACIONADO = '||COALESCE(''''||NEW.ARQUIVO_RELACIONADO||'''','NULL');
IF (COALESCE(NEW.IDEQUIPE,'')<>COALESCE(OLD.IDEQUIPE,'')) THEN TXT=TXT||',IDEQUIPE = '||COALESCE(NEW.IDEQUIPE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_EVENTOS SET IDMOV_EVENTOS = '''||NEW.IDMOV_EVENTOS||''''||TXT||' WHERE IDMOV_EVENTOS = '''||NEW.IDMOV_EVENTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_EVENTOS_BD_LOG */
CREATE TRIGGER MOV_EVENTOS_BD_LOG FOR MOV_EVENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_EVENTOS (IDMOV_EVENTOS,'
||' IDFUNCIONARIO,'
||' IDPOSTO_TRABALHO,'
||' ID_UP,'
||' ID_EVENTOS,'
||' ID_SUB_EVENTOS,'
||' OBSERVACAO,'
||' IDFUNCIONARIO_MONITOR,'
||' DATA_EVENTO,'
||' HORA_EVENTO,'
||' STATUS,'
||' ARQUIVO_RELACIONADO,'
||' IDEQUIPE) VALUES ('
||COALESCE(OLD.IDMOV_EVENTOS,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO,'NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(OLD.ID_EVENTOS,'NULL')||','
||COALESCE(OLD.ID_SUB_EVENTOS,'NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(OLD.IDFUNCIONARIO_MONITOR,'NULL')||','
||COALESCE(''''||OLD.DATA_EVENTO||'''','NULL')||','
||COALESCE(''''||OLD.HORA_EVENTO||'''','NULL')||','
||COALESCE(''''||OLD.STATUS||'''','NULL')||','
||COALESCE(''''||OLD.ARQUIVO_RELACIONADO||'''','NULL')||','
||COALESCE(OLD.IDEQUIPE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_EVENTOS', OLD.IDMOV_EVENTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_EVENTOS_BI0 */
CREATE TRIGGER MOV_EVENTOS_BI0 FOR MOV_EVENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDMOV_EVENTOS,0)=0) THEN
    NEW.IDMOV_EVENTOS = GEN_ID(COD_UP,0)||GEN_ID(IDMOV_EVENTOS,1);
END
^

/* Trigger: MOV_EVENTOS_BI_LOG */
CREATE TRIGGER MOV_EVENTOS_BI_LOG FOR MOV_EVENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_EVENTOS (IDMOV_EVENTOS,'
||' IDFUNCIONARIO,'
||' IDPOSTO_TRABALHO,'
||' ID_UP,'
||' ID_EVENTOS,'
||' ID_SUB_EVENTOS,'
||' OBSERVACAO,'
||' IDFUNCIONARIO_MONITOR,'
||' DATA_EVENTO,'
||' HORA_EVENTO,'
||' STATUS,'
||' ARQUIVO_RELACIONADO,'
||' IDEQUIPE) VALUES ('
||COALESCE(NEW.IDMOV_EVENTOS,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.ID_EVENTOS,'NULL')||','
||COALESCE(NEW.ID_SUB_EVENTOS,'NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_MONITOR,'NULL')||','
||COALESCE(''''||NEW.DATA_EVENTO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_EVENTO||'''','NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.ARQUIVO_RELACIONADO||'''','NULL')||','
||COALESCE(NEW.IDEQUIPE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_EVENTOS', NEW.IDMOV_EVENTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_EVENTOS_BU_LOG */
CREATE TRIGGER MOV_EVENTOS_BU_LOG FOR MOV_EVENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.ID_EVENTOS,'')<>COALESCE(OLD.ID_EVENTOS,'')) THEN TXT=TXT||',ID_EVENTOS = '||COALESCE(NEW.ID_EVENTOS,'NULL');
IF (COALESCE(NEW.ID_SUB_EVENTOS,'')<>COALESCE(OLD.ID_SUB_EVENTOS,'')) THEN TXT=TXT||',ID_SUB_EVENTOS = '||COALESCE(NEW.ID_SUB_EVENTOS,'NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_MONITOR,'')<>COALESCE(OLD.IDFUNCIONARIO_MONITOR,'')) THEN TXT=TXT||',IDFUNCIONARIO_MONITOR = '||COALESCE(NEW.IDFUNCIONARIO_MONITOR,'NULL');
IF (COALESCE(NEW.DATA_EVENTO,'')<>COALESCE(OLD.DATA_EVENTO,'')) THEN TXT=TXT||',DATA_EVENTO = '||COALESCE(''''||NEW.DATA_EVENTO||'''','NULL');
IF (COALESCE(NEW.HORA_EVENTO,'')<>COALESCE(OLD.HORA_EVENTO,'')) THEN TXT=TXT||',HORA_EVENTO = '||COALESCE(''''||NEW.HORA_EVENTO||'''','NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.ARQUIVO_RELACIONADO,'')<>COALESCE(OLD.ARQUIVO_RELACIONADO,'')) THEN TXT=TXT||',ARQUIVO_RELACIONADO = '||COALESCE(''''||NEW.ARQUIVO_RELACIONADO||'''','NULL');
IF (COALESCE(NEW.IDEQUIPE,'')<>COALESCE(OLD.IDEQUIPE,'')) THEN TXT=TXT||',IDEQUIPE = '||COALESCE(NEW.IDEQUIPE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_EVENTOS SET IDMOV_EVENTOS = '''||NEW.IDMOV_EVENTOS||''''||TXT||' WHERE IDMOV_EVENTOS = '''||NEW.IDMOV_EVENTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_EVENTOS', NEW.IDMOV_EVENTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_INTERNO_AD_SINCRONISMO */
CREATE TRIGGER MOV_INTERNO_AD_SINCRONISMO FOR MOV_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_INTERNO WHERE ID_MOV_INTERNO = '||OLD.ID_MOV_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_INTERNO_AI_SINCRONISMO */
CREATE TRIGGER MOV_INTERNO_AI_SINCRONISMO FOR MOV_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_INTERNO (ID_MOV_INTERNO,'
||' ID_INTERNO,'
||' ID_UNIDADE_PENAL,'
||' TIPO_MOVIMENTACAO,'
||' DATA_MOVIMENTACAO,'
||' HORA_MOVIMENTACAO,'
||' ID_FUNCIONARIO,'
||' ID_PROCEDENCIA,'
||' ID_DESTINO,'
||' IDPAVILHAO,'
||' IDGALERIA,'
||' IDSOLARIO,'
||' IDCELA,'
||' ST_INTERNO) VALUES ('
||COALESCE(NEW.ID_MOV_INTERNO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL')||','
||COALESCE(''''||NEW.TIPO_MOVIMENTACAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_MOVIMENTACAO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_MOVIMENTACAO||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_PROCEDENCIA,'NULL')||','
||COALESCE(NEW.ID_DESTINO,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(NEW.IDSOLARIO,'NULL')||','
||COALESCE(NEW.IDCELA,'NULL')||','
||COALESCE(''''||NEW.ST_INTERNO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_INTERNO_AU_SINCRONISMO */
CREATE TRIGGER MOV_INTERNO_AU_SINCRONISMO FOR MOV_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_UNIDADE_PENAL,'')<>COALESCE(OLD.ID_UNIDADE_PENAL,'')) THEN TXT=TXT||',ID_UNIDADE_PENAL = '||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL');
IF (COALESCE(NEW.TIPO_MOVIMENTACAO,'')<>COALESCE(OLD.TIPO_MOVIMENTACAO,'')) THEN TXT=TXT||',TIPO_MOVIMENTACAO = '||COALESCE(''''||NEW.TIPO_MOVIMENTACAO||'''','NULL');
IF (COALESCE(NEW.DATA_MOVIMENTACAO,'')<>COALESCE(OLD.DATA_MOVIMENTACAO,'')) THEN TXT=TXT||',DATA_MOVIMENTACAO = '||COALESCE(''''||NEW.DATA_MOVIMENTACAO||'''','NULL');
IF (COALESCE(NEW.HORA_MOVIMENTACAO,'')<>COALESCE(OLD.HORA_MOVIMENTACAO,'')) THEN TXT=TXT||',HORA_MOVIMENTACAO = '||COALESCE(''''||NEW.HORA_MOVIMENTACAO||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_PROCEDENCIA,'')<>COALESCE(OLD.ID_PROCEDENCIA,'')) THEN TXT=TXT||',ID_PROCEDENCIA = '||COALESCE(NEW.ID_PROCEDENCIA,'NULL');
IF (COALESCE(NEW.ID_DESTINO,'')<>COALESCE(OLD.ID_DESTINO,'')) THEN TXT=TXT||',ID_DESTINO = '||COALESCE(NEW.ID_DESTINO,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.IDSOLARIO,'')<>COALESCE(OLD.IDSOLARIO,'')) THEN TXT=TXT||',IDSOLARIO = '||COALESCE(NEW.IDSOLARIO,'NULL');
IF (COALESCE(NEW.IDCELA,'')<>COALESCE(OLD.IDCELA,'')) THEN TXT=TXT||',IDCELA = '||COALESCE(NEW.IDCELA,'NULL');
IF (COALESCE(NEW.ST_INTERNO,'')<>COALESCE(OLD.ST_INTERNO,'')) THEN TXT=TXT||',ST_INTERNO = '||COALESCE(''''||NEW.ST_INTERNO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_INTERNO SET ID_MOV_INTERNO = '''||NEW.ID_MOV_INTERNO||''''||TXT||' WHERE ID_MOV_INTERNO = '''||NEW.ID_MOV_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_INTERNO_BD_LOG */
CREATE TRIGGER MOV_INTERNO_BD_LOG FOR MOV_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_INTERNO (ID_MOV_INTERNO,'
||' ID_INTERNO,'
||' ID_UNIDADE_PENAL,'
||' TIPO_MOVIMENTACAO,'
||' DATA_MOVIMENTACAO,'
||' HORA_MOVIMENTACAO,'
||' ID_FUNCIONARIO,'
||' ID_PROCEDENCIA,'
||' ID_DESTINO,'
||' IDPAVILHAO,'
||' IDGALERIA,'
||' IDSOLARIO,'
||' IDCELA,'
||' ST_INTERNO) VALUES ('
||COALESCE(OLD.ID_MOV_INTERNO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.ID_UNIDADE_PENAL,'NULL')||','
||COALESCE(''''||OLD.TIPO_MOVIMENTACAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_MOVIMENTACAO||'''','NULL')||','
||COALESCE(''''||OLD.HORA_MOVIMENTACAO||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.ID_PROCEDENCIA,'NULL')||','
||COALESCE(OLD.ID_DESTINO,'NULL')||','
||COALESCE(OLD.IDPAVILHAO,'NULL')||','
||COALESCE(OLD.IDGALERIA,'NULL')||','
||COALESCE(OLD.IDSOLARIO,'NULL')||','
||COALESCE(OLD.IDCELA,'NULL')||','
||COALESCE(''''||OLD.ST_INTERNO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_INTERNO', OLD.ID_MOV_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_INTERNO_BI0 */
CREATE TRIGGER MOV_INTERNO_BI0 FOR MOV_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_mov_interno IS null or (new.id_mov_interno = 0)  ) then
    new.id_mov_interno = gen_id (cod_up, 0) || gen_id (id_mov_interno, 1);
end
^

/* Trigger: MOV_INTERNO_BI_LOG */
CREATE TRIGGER MOV_INTERNO_BI_LOG FOR MOV_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_INTERNO (ID_MOV_INTERNO,'
||' ID_INTERNO,'
||' ID_UNIDADE_PENAL,'
||' TIPO_MOVIMENTACAO,'
||' DATA_MOVIMENTACAO,'
||' HORA_MOVIMENTACAO,'
||' ID_FUNCIONARIO,'
||' ID_PROCEDENCIA,'
||' ID_DESTINO,'
||' IDPAVILHAO,'
||' IDGALERIA,'
||' IDSOLARIO,'
||' IDCELA,'
||' ST_INTERNO) VALUES ('
||COALESCE(NEW.ID_MOV_INTERNO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL')||','
||COALESCE(''''||NEW.TIPO_MOVIMENTACAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_MOVIMENTACAO||'''','NULL')||','
||COALESCE(''''||NEW.HORA_MOVIMENTACAO||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.ID_PROCEDENCIA,'NULL')||','
||COALESCE(NEW.ID_DESTINO,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(NEW.IDSOLARIO,'NULL')||','
||COALESCE(NEW.IDCELA,'NULL')||','
||COALESCE(''''||NEW.ST_INTERNO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_INTERNO', NEW.ID_MOV_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_INTERNO_BU_LOG */
CREATE TRIGGER MOV_INTERNO_BU_LOG FOR MOV_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_UNIDADE_PENAL,'')<>COALESCE(OLD.ID_UNIDADE_PENAL,'')) THEN TXT=TXT||',ID_UNIDADE_PENAL = '||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL');
IF (COALESCE(NEW.TIPO_MOVIMENTACAO,'')<>COALESCE(OLD.TIPO_MOVIMENTACAO,'')) THEN TXT=TXT||',TIPO_MOVIMENTACAO = '||COALESCE(''''||NEW.TIPO_MOVIMENTACAO||'''','NULL');
IF (COALESCE(NEW.DATA_MOVIMENTACAO,'')<>COALESCE(OLD.DATA_MOVIMENTACAO,'')) THEN TXT=TXT||',DATA_MOVIMENTACAO = '||COALESCE(''''||NEW.DATA_MOVIMENTACAO||'''','NULL');
IF (COALESCE(NEW.HORA_MOVIMENTACAO,'')<>COALESCE(OLD.HORA_MOVIMENTACAO,'')) THEN TXT=TXT||',HORA_MOVIMENTACAO = '||COALESCE(''''||NEW.HORA_MOVIMENTACAO||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.ID_PROCEDENCIA,'')<>COALESCE(OLD.ID_PROCEDENCIA,'')) THEN TXT=TXT||',ID_PROCEDENCIA = '||COALESCE(NEW.ID_PROCEDENCIA,'NULL');
IF (COALESCE(NEW.ID_DESTINO,'')<>COALESCE(OLD.ID_DESTINO,'')) THEN TXT=TXT||',ID_DESTINO = '||COALESCE(NEW.ID_DESTINO,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.IDSOLARIO,'')<>COALESCE(OLD.IDSOLARIO,'')) THEN TXT=TXT||',IDSOLARIO = '||COALESCE(NEW.IDSOLARIO,'NULL');
IF (COALESCE(NEW.IDCELA,'')<>COALESCE(OLD.IDCELA,'')) THEN TXT=TXT||',IDCELA = '||COALESCE(NEW.IDCELA,'NULL');
IF (COALESCE(NEW.ST_INTERNO,'')<>COALESCE(OLD.ST_INTERNO,'')) THEN TXT=TXT||',ST_INTERNO = '||COALESCE(''''||NEW.ST_INTERNO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_INTERNO SET ID_MOV_INTERNO = '''||NEW.ID_MOV_INTERNO||''''||TXT||' WHERE ID_MOV_INTERNO = '''||NEW.ID_MOV_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_INTERNO', NEW.ID_MOV_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_INTERNO_IU_SINC_BLOB */
CREATE TRIGGER MOV_INTERNO_IU_SINC_BLOB FOR MOV_INTERNO
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.FOTO_INTERNO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'MOV_INTERNO', 'FOTO_INTERNO', 'ID_MOV_INTERNO', NEW.ID_MOV_INTERNO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.FOTO_INTERNO IS NOT NULL) THEN
        BEGIN
            IF (OLD.FOTO_INTERNO <> NEW.FOTO_INTERNO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'MOV_INTERNO', 'FOTO_INTERNO', 'ID_MOV_INTERNO', NEW.ID_MOV_INTERNO);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'MOV_INTERNO', 'FOTO_INTERNO', 'ID_MOV_INTERNO', NEW.ID_MOV_INTERNO);
        END

    END

   END

END
^

/* Trigger: MOV_OCORRENCIA_ADV_AD_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_ADV_AD_SINCRONIS FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_OCORRENCIA_ADV WHERE IDMOV_OCORRENCIA_ADV = '||OLD.IDMOV_OCORRENCIA_ADV||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_OCORRENCIA_ADV_AI_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_ADV_AI_SINCRONIS FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_OCORRENCIA_ADV (IDMOV_OCORRENCIA_ADV,'
||' IDMOV_OCORRENCIA,'
||' IDADVOGADO) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_ADV,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDADVOGADO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_OCORRENCIA_ADV_AU_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_ADV_AU_SINCRONIS FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDADVOGADO,'')<>COALESCE(OLD.IDADVOGADO,'')) THEN TXT=TXT||',IDADVOGADO = '||COALESCE(NEW.IDADVOGADO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_ADV SET IDMOV_OCORRENCIA_ADV = '''||NEW.IDMOV_OCORRENCIA_ADV||''''||TXT||' WHERE IDMOV_OCORRENCIA_ADV = '''||NEW.IDMOV_OCORRENCIA_ADV||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_OCORRENCIA_ADV_BD_LOG */
CREATE TRIGGER MOV_OCORRENCIA_ADV_BD_LOG FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_ADV (IDMOV_OCORRENCIA_ADV,'
||' IDMOV_OCORRENCIA,'
||' IDADVOGADO) VALUES ('
||COALESCE(OLD.IDMOV_OCORRENCIA_ADV,'NULL')||','
||COALESCE(OLD.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(OLD.IDADVOGADO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_ADV', OLD.IDMOV_OCORRENCIA_ADV,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_ADV_BI0 */
CREATE TRIGGER MOV_OCORRENCIA_ADV_BI0 FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idmov_ocorrencia_adv,0)=0) then
    NEW.IDMOV_OCORRENCIA_ADV = GEN_ID(COD_UP,0)||GEN_ID(IDMOV_OCORRENCIA_ADV,1);
end
^

/* Trigger: MOV_OCORRENCIA_ADV_BI_LOG */
CREATE TRIGGER MOV_OCORRENCIA_ADV_BI_LOG FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_ADV (IDMOV_OCORRENCIA_ADV,'
||' IDMOV_OCORRENCIA,'
||' IDADVOGADO) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_ADV,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDADVOGADO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_ADV', NEW.IDMOV_OCORRENCIA_ADV,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_ADV_BU_LOG */
CREATE TRIGGER MOV_OCORRENCIA_ADV_BU_LOG FOR MOV_OCORRENCIA_ADV
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDADVOGADO,'')<>COALESCE(OLD.IDADVOGADO,'')) THEN TXT=TXT||',IDADVOGADO = '||COALESCE(NEW.IDADVOGADO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_ADV SET IDMOV_OCORRENCIA_ADV = '''||NEW.IDMOV_OCORRENCIA_ADV||''''||TXT||' WHERE IDMOV_OCORRENCIA_ADV = '''||NEW.IDMOV_OCORRENCIA_ADV||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_ADV', NEW.IDMOV_OCORRENCIA_ADV,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_OCORRENCIA_AD_SINCRONISMO */
CREATE TRIGGER MOV_OCORRENCIA_AD_SINCRONISMO FOR MOV_OCORRENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_OCORRENCIA WHERE IDMOV_OCORRENCIA = '||OLD.IDMOV_OCORRENCIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_OCORRENCIA_AI_SINCRONISMO */
CREATE TRIGGER MOV_OCORRENCIA_AI_SINCRONISMO FOR MOV_OCORRENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_OCORRENCIA (IDMOV_OCORRENCIA,'
||' IDOCORRENCIA,'
||' DATA,'
||' HORA,'
||' DESCRICAO,'
||' IDMOV_PROCEDIMENTOS) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.HORA||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_OCORRENCIA_AU_SINCRONISMO */
CREATE TRIGGER MOV_OCORRENCIA_AU_SINCRONISMO FOR MOV_OCORRENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDOCORRENCIA,'')<>COALESCE(OLD.IDOCORRENCIA,'')) THEN TXT=TXT||',IDOCORRENCIA = '||COALESCE(NEW.IDOCORRENCIA,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.HORA,'')<>COALESCE(OLD.HORA,'')) THEN TXT=TXT||',HORA = '||COALESCE(''''||NEW.HORA||'''','NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA SET IDMOV_OCORRENCIA = '''||NEW.IDMOV_OCORRENCIA||''''||TXT||' WHERE IDMOV_OCORRENCIA = '''||NEW.IDMOV_OCORRENCIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_OCORRENCIA_BD_LOG */
CREATE TRIGGER MOV_OCORRENCIA_BD_LOG FOR MOV_OCORRENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA (IDMOV_OCORRENCIA,'
||' IDOCORRENCIA,'
||' DATA,'
||' HORA,'
||' DESCRICAO,'
||' IDMOV_PROCEDIMENTOS) VALUES ('
||COALESCE(OLD.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(OLD.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(''''||OLD.HORA||'''','NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(OLD.IDMOV_PROCEDIMENTOS,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA', OLD.IDMOV_OCORRENCIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_BI0 */
CREATE TRIGGER MOV_OCORRENCIA_BI0 FOR MOV_OCORRENCIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDMOV_OCORRENCIA IS NULL OR (NEW.IDMOV_OCORRENCIA = 0)  ) THEN
    NEW.IDMOV_OCORRENCIA = GEN_ID (COD_UP, 0) || GEN_ID (IDMOV_OCORRENCIA, 1);
end
^

/* Trigger: MOV_OCORRENCIA_BI_LOG */
CREATE TRIGGER MOV_OCORRENCIA_BI_LOG FOR MOV_OCORRENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA (IDMOV_OCORRENCIA,'
||' IDOCORRENCIA,'
||' DATA,'
||' HORA,'
||' DESCRICAO,'
||' IDMOV_PROCEDIMENTOS) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.HORA||'''','NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA', NEW.IDMOV_OCORRENCIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_BU_LOG */
CREATE TRIGGER MOV_OCORRENCIA_BU_LOG FOR MOV_OCORRENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDOCORRENCIA,'')<>COALESCE(OLD.IDOCORRENCIA,'')) THEN TXT=TXT||',IDOCORRENCIA = '||COALESCE(NEW.IDOCORRENCIA,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.HORA,'')<>COALESCE(OLD.HORA,'')) THEN TXT=TXT||',HORA = '||COALESCE(''''||NEW.HORA||'''','NULL');
IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA SET IDMOV_OCORRENCIA = '''||NEW.IDMOV_OCORRENCIA||''''||TXT||' WHERE IDMOV_OCORRENCIA = '''||NEW.IDMOV_OCORRENCIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA', NEW.IDMOV_OCORRENCIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_OCORRENCIA_FUNC_AD_SINCRONI */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_AD_SINCRONI FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_OCORRENCIA_FUNC WHERE IDMOV_OCORRENCIA_FUNC = '||OLD.IDMOV_OCORRENCIA_FUNC||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_OCORRENCIA_FUNC_AI_SINCRONI */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_AI_SINCRONI FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_OCORRENCIA_FUNC (IDMOV_OCORRENCIA_FUNC,'
||' IDMOV_OCORRENCIA,'
||' IDFUNCIONARIO) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_FUNC,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_OCORRENCIA_FUNC_AU_SINCRONI */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_AU_SINCRONI FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_FUNC SET IDMOV_OCORRENCIA_FUNC = '''||NEW.IDMOV_OCORRENCIA_FUNC||''''||TXT||' WHERE IDMOV_OCORRENCIA_FUNC = '''||NEW.IDMOV_OCORRENCIA_FUNC||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_OCORRENCIA_FUNC_BD_LOG */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_BD_LOG FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_FUNC (IDMOV_OCORRENCIA_FUNC,'
||' IDMOV_OCORRENCIA,'
||' IDFUNCIONARIO) VALUES ('
||COALESCE(OLD.IDMOV_OCORRENCIA_FUNC,'NULL')||','
||COALESCE(OLD.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_FUNC', OLD.IDMOV_OCORRENCIA_FUNC,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_FUNC_BI0 */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_BI0 FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idmov_ocorrencia_func,0)=0) then
    NEW.IDMOV_OCORRENCIA_FUNC = GEN_ID(COD_UP,0)||GEN_ID(IDMOV_OCORRENCIA_FUNC,1);
end
^

/* Trigger: MOV_OCORRENCIA_FUNC_BI_LOG */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_BI_LOG FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_FUNC (IDMOV_OCORRENCIA_FUNC,'
||' IDMOV_OCORRENCIA,'
||' IDFUNCIONARIO) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_FUNC,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_FUNC', NEW.IDMOV_OCORRENCIA_FUNC,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_FUNC_BU_LOG */
CREATE TRIGGER MOV_OCORRENCIA_FUNC_BU_LOG FOR MOV_OCORRENCIA_FUNC
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_FUNC SET IDMOV_OCORRENCIA_FUNC = '''||NEW.IDMOV_OCORRENCIA_FUNC||''''||TXT||' WHERE IDMOV_OCORRENCIA_FUNC = '''||NEW.IDMOV_OCORRENCIA_FUNC||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_FUNC', NEW.IDMOV_OCORRENCIA_FUNC,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_OCORRENCIA_INT_AD_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_INT_AD_SINCRONIS FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_OCORRENCIA_INT WHERE IDMOV_OCORRENCIA_INT = '||OLD.IDMOV_OCORRENCIA_INT||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_OCORRENCIA_INT_AI_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_INT_AI_SINCRONIS FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_OCORRENCIA_INT (IDMOV_OCORRENCIA_INT,'
||' IDMOV_OCORRENCIA,'
||' IDINTERNO) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_INT,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_OCORRENCIA_INT_AU_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_INT_AU_SINCRONIS FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_INT SET IDMOV_OCORRENCIA_INT = '''||NEW.IDMOV_OCORRENCIA_INT||''''||TXT||' WHERE IDMOV_OCORRENCIA_INT = '''||NEW.IDMOV_OCORRENCIA_INT||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_OCORRENCIA_INT_BD_LOG */
CREATE TRIGGER MOV_OCORRENCIA_INT_BD_LOG FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_INT (IDMOV_OCORRENCIA_INT,'
||' IDMOV_OCORRENCIA,'
||' IDINTERNO) VALUES ('
||COALESCE(OLD.IDMOV_OCORRENCIA_INT,'NULL')||','
||COALESCE(OLD.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_INT', OLD.IDMOV_OCORRENCIA_INT,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_INT_BI0 */
CREATE TRIGGER MOV_OCORRENCIA_INT_BI0 FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  if (coalesce(new.idmov_ocorrencia_int,0)=0) then
  NEW.IDMOV_OCORRENCIA_INT = GEN_ID(COD_UP,0)||GEN_ID(IDMOV_OCORRENCIA_INT,1);
END
^

/* Trigger: MOV_OCORRENCIA_INT_BI_LOG */
CREATE TRIGGER MOV_OCORRENCIA_INT_BI_LOG FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_INT (IDMOV_OCORRENCIA_INT,'
||' IDMOV_OCORRENCIA,'
||' IDINTERNO) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_INT,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_INT', NEW.IDMOV_OCORRENCIA_INT,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_INT_BU_LOG */
CREATE TRIGGER MOV_OCORRENCIA_INT_BU_LOG FOR MOV_OCORRENCIA_INT
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_INT SET IDMOV_OCORRENCIA_INT = '''||NEW.IDMOV_OCORRENCIA_INT||''''||TXT||' WHERE IDMOV_OCORRENCIA_INT = '''||NEW.IDMOV_OCORRENCIA_INT||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_INT', NEW.IDMOV_OCORRENCIA_INT,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_OCORRENCIA_QUEST_AD_SINCRON */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_AD_SINCRON FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_OCORRENCIA_QUEST WHERE IDMOV_OCORRENCIA_QUEST = '||OLD.IDMOV_OCORRENCIA_QUEST||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_OCORRENCIA_QUEST_AI_SINCRON */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_AI_SINCRON FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_OCORRENCIA_QUEST (IDMOV_OCORRENCIA_QUEST,'
||' IDMOV_OCORRENCIA,'
||' IDQUESTIONAMENTO,'
||' PERGUNTA,'
||' TIPO_RESPOSTA,'
||' RESPOSTA,'
||' RESPOSTA_DEFAULT) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_QUEST,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDQUESTIONAMENTO,'NULL')||','
||COALESCE(''''||NEW.PERGUNTA||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL')||','
||COALESCE(''''||NEW.RESPOSTA||'''','NULL')||','
||COALESCE(''''||NEW.RESPOSTA_DEFAULT||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_OCORRENCIA_QUEST_AU_SINCRON */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_AU_SINCRON FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDQUESTIONAMENTO,'')<>COALESCE(OLD.IDQUESTIONAMENTO,'')) THEN TXT=TXT||',IDQUESTIONAMENTO = '||COALESCE(NEW.IDQUESTIONAMENTO,'NULL');
IF (COALESCE(NEW.PERGUNTA,'')<>COALESCE(OLD.PERGUNTA,'')) THEN TXT=TXT||',PERGUNTA = '||COALESCE(''''||NEW.PERGUNTA||'''','NULL');
IF (COALESCE(NEW.TIPO_RESPOSTA,'')<>COALESCE(OLD.TIPO_RESPOSTA,'')) THEN TXT=TXT||',TIPO_RESPOSTA = '||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL');
IF (COALESCE(NEW.RESPOSTA,'')<>COALESCE(OLD.RESPOSTA,'')) THEN TXT=TXT||',RESPOSTA = '||COALESCE(''''||NEW.RESPOSTA||'''','NULL');
IF (COALESCE(NEW.RESPOSTA_DEFAULT,'')<>COALESCE(OLD.RESPOSTA_DEFAULT,'')) THEN TXT=TXT||',RESPOSTA_DEFAULT = '||COALESCE(''''||NEW.RESPOSTA_DEFAULT||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_QUEST SET IDMOV_OCORRENCIA_QUEST = '''||NEW.IDMOV_OCORRENCIA_QUEST||''''||TXT||' WHERE IDMOV_OCORRENCIA_QUEST = '''||NEW.IDMOV_OCORRENCIA_QUEST||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_OCORRENCIA_QUEST_BD_LOG */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_BD_LOG FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_QUEST (IDMOV_OCORRENCIA_QUEST,'
||' IDMOV_OCORRENCIA,'
||' IDQUESTIONAMENTO,'
||' PERGUNTA,'
||' TIPO_RESPOSTA,'
||' RESPOSTA,'
||' RESPOSTA_DEFAULT) VALUES ('
||COALESCE(OLD.IDMOV_OCORRENCIA_QUEST,'NULL')||','
||COALESCE(OLD.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(OLD.IDQUESTIONAMENTO,'NULL')||','
||COALESCE(''''||OLD.PERGUNTA||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_RESPOSTA||'''','NULL')||','
||COALESCE(''''||OLD.RESPOSTA||'''','NULL')||','
||COALESCE(''''||OLD.RESPOSTA_DEFAULT||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_QUEST', OLD.IDMOV_OCORRENCIA_QUEST,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_QUEST_BI0 */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_BI0 FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDMOV_OCORRENCIA_QUEST IS NULL OR (NEW.IDMOV_OCORRENCIA_QUEST = 0)  ) THEN
    NEW.IDMOV_OCORRENCIA_QUEST = GEN_ID (COD_UP, 0) || GEN_ID (IDMOV_OCORRENCIA_QUEST, 1);
end
^

/* Trigger: MOV_OCORRENCIA_QUEST_BI_LOG */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_BI_LOG FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_QUEST (IDMOV_OCORRENCIA_QUEST,'
||' IDMOV_OCORRENCIA,'
||' IDQUESTIONAMENTO,'
||' PERGUNTA,'
||' TIPO_RESPOSTA,'
||' RESPOSTA,'
||' RESPOSTA_DEFAULT) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_QUEST,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDQUESTIONAMENTO,'NULL')||','
||COALESCE(''''||NEW.PERGUNTA||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL')||','
||COALESCE(''''||NEW.RESPOSTA||'''','NULL')||','
||COALESCE(''''||NEW.RESPOSTA_DEFAULT||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_QUEST', NEW.IDMOV_OCORRENCIA_QUEST,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_QUEST_BU_LOG */
CREATE TRIGGER MOV_OCORRENCIA_QUEST_BU_LOG FOR MOV_OCORRENCIA_QUEST
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDQUESTIONAMENTO,'')<>COALESCE(OLD.IDQUESTIONAMENTO,'')) THEN TXT=TXT||',IDQUESTIONAMENTO = '||COALESCE(NEW.IDQUESTIONAMENTO,'NULL');
IF (COALESCE(NEW.PERGUNTA,'')<>COALESCE(OLD.PERGUNTA,'')) THEN TXT=TXT||',PERGUNTA = '||COALESCE(''''||NEW.PERGUNTA||'''','NULL');
IF (COALESCE(NEW.TIPO_RESPOSTA,'')<>COALESCE(OLD.TIPO_RESPOSTA,'')) THEN TXT=TXT||',TIPO_RESPOSTA = '||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL');
IF (COALESCE(NEW.RESPOSTA,'')<>COALESCE(OLD.RESPOSTA,'')) THEN TXT=TXT||',RESPOSTA = '||COALESCE(''''||NEW.RESPOSTA||'''','NULL');
IF (COALESCE(NEW.RESPOSTA_DEFAULT,'')<>COALESCE(OLD.RESPOSTA_DEFAULT,'')) THEN TXT=TXT||',RESPOSTA_DEFAULT = '||COALESCE(''''||NEW.RESPOSTA_DEFAULT||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_QUEST SET IDMOV_OCORRENCIA_QUEST = '''||NEW.IDMOV_OCORRENCIA_QUEST||''''||TXT||' WHERE IDMOV_OCORRENCIA_QUEST = '''||NEW.IDMOV_OCORRENCIA_QUEST||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_QUEST', NEW.IDMOV_OCORRENCIA_QUEST,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_OCORRENCIA_VIS_AD_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_VIS_AD_SINCRONIS FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_OCORRENCIA_VIS WHERE IDMOV_OCORRENCIA_VIS = '||OLD.IDMOV_OCORRENCIA_VIS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_OCORRENCIA_VIS_AI_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_VIS_AI_SINCRONIS FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_OCORRENCIA_VIS (IDMOV_OCORRENCIA_VIS,'
||' IDMOV_OCORRENCIA,'
||' IDVISITANTE) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_VIS,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDVISITANTE,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_OCORRENCIA_VIS_AU_SINCRONIS */
CREATE TRIGGER MOV_OCORRENCIA_VIS_AU_SINCRONIS FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDVISITANTE,'')<>COALESCE(OLD.IDVISITANTE,'')) THEN TXT=TXT||',IDVISITANTE = '||COALESCE(NEW.IDVISITANTE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_VIS SET IDMOV_OCORRENCIA_VIS = '''||NEW.IDMOV_OCORRENCIA_VIS||''''||TXT||' WHERE IDMOV_OCORRENCIA_VIS = '''||NEW.IDMOV_OCORRENCIA_VIS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_OCORRENCIA_VIS_BD_LOG */
CREATE TRIGGER MOV_OCORRENCIA_VIS_BD_LOG FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_VIS (IDMOV_OCORRENCIA_VIS,'
||' IDMOV_OCORRENCIA,'
||' IDVISITANTE) VALUES ('
||COALESCE(OLD.IDMOV_OCORRENCIA_VIS,'NULL')||','
||COALESCE(OLD.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(OLD.IDVISITANTE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_VIS', OLD.IDMOV_OCORRENCIA_VIS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_VIS_BI0 */
CREATE TRIGGER MOV_OCORRENCIA_VIS_BI0 FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idmov_ocorrencia_vis,0)=0) then
  NEW.idmov_ocorrencia_vis = GEN_ID(COD_UP,0)||GEN_ID(idmov_ocorrencia_vis,1);

end
^

/* Trigger: MOV_OCORRENCIA_VIS_BI_LOG */
CREATE TRIGGER MOV_OCORRENCIA_VIS_BI_LOG FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_OCORRENCIA_VIS (IDMOV_OCORRENCIA_VIS,'
||' IDMOV_OCORRENCIA,'
||' IDVISITANTE) VALUES ('
||COALESCE(NEW.IDMOV_OCORRENCIA_VIS,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL')||','
||COALESCE(NEW.IDVISITANTE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_VIS', NEW.IDMOV_OCORRENCIA_VIS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_OCORRENCIA_VIS_BU_LOG */
CREATE TRIGGER MOV_OCORRENCIA_VIS_BU_LOG FOR MOV_OCORRENCIA_VIS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_OCORRENCIA,'')<>COALESCE(OLD.IDMOV_OCORRENCIA,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA = '||COALESCE(NEW.IDMOV_OCORRENCIA,'NULL');
IF (COALESCE(NEW.IDVISITANTE,'')<>COALESCE(OLD.IDVISITANTE,'')) THEN TXT=TXT||',IDVISITANTE = '||COALESCE(NEW.IDVISITANTE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_OCORRENCIA_VIS SET IDMOV_OCORRENCIA_VIS = '''||NEW.IDMOV_OCORRENCIA_VIS||''''||TXT||' WHERE IDMOV_OCORRENCIA_VIS = '''||NEW.IDMOV_OCORRENCIA_VIS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_OCORRENCIA_VIS', NEW.IDMOV_OCORRENCIA_VIS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_AD_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_AD_SINCRO FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_PROCEDIMENTOS_ADV WHERE IDMOV_PROCEDIMENTOS_ADV = '||OLD.IDMOV_PROCEDIMENTOS_ADV||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_AI_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_AI_SINCRO FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_PROCEDIMENTOS_ADV (IDMOV_PROCEDIMENTOS_ADV,'
||' IDMOV_PROCEDIMENTOS,'
||' IDADVOGADO) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_ADV,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDADVOGADO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_AU_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_AU_SINCRO FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDADVOGADO,'')<>COALESCE(OLD.IDADVOGADO,'')) THEN TXT=TXT||',IDADVOGADO = '||COALESCE(NEW.IDADVOGADO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_ADV SET IDMOV_PROCEDIMENTOS_ADV = '''||NEW.IDMOV_PROCEDIMENTOS_ADV||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_ADV = '''||NEW.IDMOV_PROCEDIMENTOS_ADV||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_BD_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_BD_LOG FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_ADV (IDMOV_PROCEDIMENTOS_ADV,'
||' IDMOV_PROCEDIMENTOS,'
||' IDADVOGADO) VALUES ('
||COALESCE(OLD.IDMOV_PROCEDIMENTOS_ADV,'NULL')||','
||COALESCE(OLD.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(OLD.IDADVOGADO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_ADV', OLD.IDMOV_PROCEDIMENTOS_ADV,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_BI0 */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_BI0 FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idmov_procedimentos_adv,0)=0) then
    NEW.idmov_procedimentos_adv = GEN_ID(COD_UP,0)||GEN_ID(idmov_procedimentos_adv,1);
end
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_BI_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_BI_LOG FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_ADV (IDMOV_PROCEDIMENTOS_ADV,'
||' IDMOV_PROCEDIMENTOS,'
||' IDADVOGADO) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_ADV,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDADVOGADO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_ADV', NEW.IDMOV_PROCEDIMENTOS_ADV,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_ADV_BU_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_ADV_BU_LOG FOR MOV_PROCEDIMENTOS_ADV
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDADVOGADO,'')<>COALESCE(OLD.IDADVOGADO,'')) THEN TXT=TXT||',IDADVOGADO = '||COALESCE(NEW.IDADVOGADO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_ADV SET IDMOV_PROCEDIMENTOS_ADV = '''||NEW.IDMOV_PROCEDIMENTOS_ADV||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_ADV = '''||NEW.IDMOV_PROCEDIMENTOS_ADV||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_ADV', NEW.IDMOV_PROCEDIMENTOS_ADV,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_AD_SINCRONISM */
CREATE TRIGGER MOV_PROCEDIMENTOS_AD_SINCRONISM FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_PROCEDIMENTOS WHERE IDMOV_PROCEDIMENTOS = '||OLD.IDMOV_PROCEDIMENTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_PROCEDIMENTOS_AI_SINCRONISM */
CREATE TRIGGER MOV_PROCEDIMENTOS_AI_SINCRONISM FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS,'
||' IDPROCEDIMENTOS,'
||' DATA,'
||' HORA_INICIAL,'
||' HORA_FINAL,'
||' OBSERVACAO,'
||' ST,'
||' DATA_ENCERRAMENTO,'
||' MOTIVO_ENCERRAMENTO,'
||' ID_UP,'
||' IDMOV_OCORRENCIA_ORIGEM,'
||' IDMOV_PROCEDIMENTOS_PRINCIPAL) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDPROCEDIMENTOS,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FINAL||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ENCERRAMENTO||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_ENCERRAMENTO||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA_ORIGEM,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_PRINCIPAL,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_PROCEDIMENTOS_AU_SINCRONISM */
CREATE TRIGGER MOV_PROCEDIMENTOS_AU_SINCRONISM FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDPROCEDIMENTOS,'')<>COALESCE(OLD.IDPROCEDIMENTOS,'')) THEN TXT=TXT||',IDPROCEDIMENTOS = '||COALESCE(NEW.IDPROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.HORA_INICIAL,'')<>COALESCE(OLD.HORA_INICIAL,'')) THEN TXT=TXT||',HORA_INICIAL = '||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL');
IF (COALESCE(NEW.HORA_FINAL,'')<>COALESCE(OLD.HORA_FINAL,'')) THEN TXT=TXT||',HORA_FINAL = '||COALESCE(''''||NEW.HORA_FINAL||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.DATA_ENCERRAMENTO,'')<>COALESCE(OLD.DATA_ENCERRAMENTO,'')) THEN TXT=TXT||',DATA_ENCERRAMENTO = '||COALESCE(''''||NEW.DATA_ENCERRAMENTO||'''','NULL');
IF (COALESCE(NEW.MOTIVO_ENCERRAMENTO,'')<>COALESCE(OLD.MOTIVO_ENCERRAMENTO,'')) THEN TXT=TXT||',MOTIVO_ENCERRAMENTO = '||COALESCE(''''||NEW.MOTIVO_ENCERRAMENTO||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.IDMOV_OCORRENCIA_ORIGEM,'')<>COALESCE(OLD.IDMOV_OCORRENCIA_ORIGEM,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA_ORIGEM = '||COALESCE(NEW.IDMOV_OCORRENCIA_ORIGEM,'NULL');
IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS_PRINCIPAL,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS_PRINCIPAL,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS_PRINCIPAL = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS_PRINCIPAL,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS SET IDMOV_PROCEDIMENTOS = '''||NEW.IDMOV_PROCEDIMENTOS||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS = '''||NEW.IDMOV_PROCEDIMENTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_BD_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_BD_LOG FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS,'
||' IDPROCEDIMENTOS,'
||' DATA,'
||' HORA_INICIAL,'
||' HORA_FINAL,'
||' OBSERVACAO,'
||' ST,'
||' DATA_ENCERRAMENTO,'
||' MOTIVO_ENCERRAMENTO,'
||' ID_UP,'
||' IDMOV_OCORRENCIA_ORIGEM,'
||' IDMOV_PROCEDIMENTOS_PRINCIPAL) VALUES ('
||COALESCE(OLD.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(OLD.IDPROCEDIMENTOS,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_INICIAL||'''','NULL')||','
||COALESCE(''''||OLD.HORA_FINAL||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||OLD.ST||'''','NULL')||','
||COALESCE(''''||OLD.DATA_ENCERRAMENTO||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVO_ENCERRAMENTO||'''','NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(OLD.IDMOV_OCORRENCIA_ORIGEM,'NULL')||','
||COALESCE(OLD.IDMOV_PROCEDIMENTOS_PRINCIPAL,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS', OLD.IDMOV_PROCEDIMENTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_BI0 */
CREATE TRIGGER MOV_PROCEDIMENTOS_BI0 FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin

    if (NEW.idmov_procedimentos IS null or (new.idmov_procedimentos = 0)  ) then
      new.idmov_procedimentos = gen_id (cod_up, 0) || gen_id (idmov_procedimentos, 1);

end
^

/* Trigger: MOV_PROCEDIMENTOS_BI_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_BI_LOG FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS (IDMOV_PROCEDIMENTOS,'
||' IDPROCEDIMENTOS,'
||' DATA,'
||' HORA_INICIAL,'
||' HORA_FINAL,'
||' OBSERVACAO,'
||' ST,'
||' DATA_ENCERRAMENTO,'
||' MOTIVO_ENCERRAMENTO,'
||' ID_UP,'
||' IDMOV_OCORRENCIA_ORIGEM,'
||' IDMOV_PROCEDIMENTOS_PRINCIPAL) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDPROCEDIMENTOS,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FINAL||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ENCERRAMENTO||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_ENCERRAMENTO||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.IDMOV_OCORRENCIA_ORIGEM,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_PRINCIPAL,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS', NEW.IDMOV_PROCEDIMENTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_BU_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_BU_LOG FOR MOV_PROCEDIMENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDPROCEDIMENTOS,'')<>COALESCE(OLD.IDPROCEDIMENTOS,'')) THEN TXT=TXT||',IDPROCEDIMENTOS = '||COALESCE(NEW.IDPROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.HORA_INICIAL,'')<>COALESCE(OLD.HORA_INICIAL,'')) THEN TXT=TXT||',HORA_INICIAL = '||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL');
IF (COALESCE(NEW.HORA_FINAL,'')<>COALESCE(OLD.HORA_FINAL,'')) THEN TXT=TXT||',HORA_FINAL = '||COALESCE(''''||NEW.HORA_FINAL||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.DATA_ENCERRAMENTO,'')<>COALESCE(OLD.DATA_ENCERRAMENTO,'')) THEN TXT=TXT||',DATA_ENCERRAMENTO = '||COALESCE(''''||NEW.DATA_ENCERRAMENTO||'''','NULL');
IF (COALESCE(NEW.MOTIVO_ENCERRAMENTO,'')<>COALESCE(OLD.MOTIVO_ENCERRAMENTO,'')) THEN TXT=TXT||',MOTIVO_ENCERRAMENTO = '||COALESCE(''''||NEW.MOTIVO_ENCERRAMENTO||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.IDMOV_OCORRENCIA_ORIGEM,'')<>COALESCE(OLD.IDMOV_OCORRENCIA_ORIGEM,'')) THEN TXT=TXT||',IDMOV_OCORRENCIA_ORIGEM = '||COALESCE(NEW.IDMOV_OCORRENCIA_ORIGEM,'NULL');
IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS_PRINCIPAL,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS_PRINCIPAL,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS_PRINCIPAL = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS_PRINCIPAL,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS SET IDMOV_PROCEDIMENTOS = '''||NEW.IDMOV_PROCEDIMENTOS||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS = '''||NEW.IDMOV_PROCEDIMENTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS', NEW.IDMOV_PROCEDIMENTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_AD_SINCR */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_AD_SINCR FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_PROCEDIMENTOS_FUNC WHERE IDMOV_PROCEDIMENTOS_FUNC = '||OLD.IDMOV_PROCEDIMENTOS_FUNC||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_AI_SINCR */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_AI_SINCR FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_PROCEDIMENTOS_FUNC (IDMOV_PROCEDIMENTOS_FUNC,'
||' IDMOV_PROCEDIMENTOS,'
||' IDFUNCIONARIO) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_FUNC,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_AU_SINCR */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_AU_SINCR FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_FUNC SET IDMOV_PROCEDIMENTOS_FUNC = '''||NEW.IDMOV_PROCEDIMENTOS_FUNC||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_FUNC = '''||NEW.IDMOV_PROCEDIMENTOS_FUNC||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_BD_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_BD_LOG FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_FUNC (IDMOV_PROCEDIMENTOS_FUNC,'
||' IDMOV_PROCEDIMENTOS,'
||' IDFUNCIONARIO) VALUES ('
||COALESCE(OLD.IDMOV_PROCEDIMENTOS_FUNC,'NULL')||','
||COALESCE(OLD.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_FUNC', OLD.IDMOV_PROCEDIMENTOS_FUNC,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_BI0 */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_BI0 FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE INSERT POSITION 0
AS
begin
    if (NEW.idmov_procedimentos_func IS null or (new.idmov_procedimentos_func = 0)  ) then
    new.idmov_procedimentos_func = gen_id (cod_up, 0) || gen_id (idmov_procedimentos_func, 1);
end
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_BI_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_BI_LOG FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_FUNC (IDMOV_PROCEDIMENTOS_FUNC,'
||' IDMOV_PROCEDIMENTOS,'
||' IDFUNCIONARIO) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_FUNC,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_FUNC', NEW.IDMOV_PROCEDIMENTOS_FUNC,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_FUNC_BU_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_FUNC_BU_LOG FOR MOV_PROCEDIMENTOS_FUNC
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO,'')<>COALESCE(OLD.IDFUNCIONARIO,'')) THEN TXT=TXT||',IDFUNCIONARIO = '||COALESCE(NEW.IDFUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_FUNC SET IDMOV_PROCEDIMENTOS_FUNC = '''||NEW.IDMOV_PROCEDIMENTOS_FUNC||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_FUNC = '''||NEW.IDMOV_PROCEDIMENTOS_FUNC||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_FUNC', NEW.IDMOV_PROCEDIMENTOS_FUNC,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_INT_AD_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_AD_SINCRO FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_PROCEDIMENTOS_INT WHERE IDMOV_PROCEDIMENTOS_INT = '||OLD.IDMOV_PROCEDIMENTOS_INT||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_PROCEDIMENTOS_INT_AI_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_AI_SINCRO FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_PROCEDIMENTOS_INT (IDMOV_PROCEDIMENTOS_INT,'
||' IDMOV_PROCEDIMENTOS,'
||' IDINTERNO) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_INT,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_PROCEDIMENTOS_INT_AU_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_AU_SINCRO FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_INT SET IDMOV_PROCEDIMENTOS_INT = '''||NEW.IDMOV_PROCEDIMENTOS_INT||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_INT = '''||NEW.IDMOV_PROCEDIMENTOS_INT||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_INT_BD_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_BD_LOG FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_INT (IDMOV_PROCEDIMENTOS_INT,'
||' IDMOV_PROCEDIMENTOS,'
||' IDINTERNO) VALUES ('
||COALESCE(OLD.IDMOV_PROCEDIMENTOS_INT,'NULL')||','
||COALESCE(OLD.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_INT', OLD.IDMOV_PROCEDIMENTOS_INT,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_INT_BI0 */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_BI0 FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
    if (NEW.idmov_procedimentos_int IS null or (new.idmov_procedimentos_int = 0)  ) then
    new.idmov_procedimentos_int = gen_id (cod_up, 0) || gen_id (idmov_procedimentos_int, 1);
end
^

/* Trigger: MOV_PROCEDIMENTOS_INT_BI_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_BI_LOG FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_INT (IDMOV_PROCEDIMENTOS_INT,'
||' IDMOV_PROCEDIMENTOS,'
||' IDINTERNO) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_INT,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_INT', NEW.IDMOV_PROCEDIMENTOS_INT,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_INT_BU_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_INT_BU_LOG FOR MOV_PROCEDIMENTOS_INT
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_INT SET IDMOV_PROCEDIMENTOS_INT = '''||NEW.IDMOV_PROCEDIMENTOS_INT||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_INT = '''||NEW.IDMOV_PROCEDIMENTOS_INT||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_INT', NEW.IDMOV_PROCEDIMENTOS_INT,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_AD_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_AD_SINCRO FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_PROCEDIMENTOS_VIS WHERE IDMOV_PROCEDIMENTOS_VIS = '||OLD.IDMOV_PROCEDIMENTOS_VIS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_AI_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_AI_SINCRO FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_PROCEDIMENTOS_VIS (IDMOV_PROCEDIMENTOS_VIS,'
||' IDMOV_PROCEDIMENTOS,'
||' IDVISITANTE) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_VIS,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDVISITANTE,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_AU_SINCRO */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_AU_SINCRO FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDVISITANTE,'')<>COALESCE(OLD.IDVISITANTE,'')) THEN TXT=TXT||',IDVISITANTE = '||COALESCE(NEW.IDVISITANTE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_VIS SET IDMOV_PROCEDIMENTOS_VIS = '''||NEW.IDMOV_PROCEDIMENTOS_VIS||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_VIS = '''||NEW.IDMOV_PROCEDIMENTOS_VIS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_BD_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_BD_LOG FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_VIS (IDMOV_PROCEDIMENTOS_VIS,'
||' IDMOV_PROCEDIMENTOS,'
||' IDVISITANTE) VALUES ('
||COALESCE(OLD.IDMOV_PROCEDIMENTOS_VIS,'NULL')||','
||COALESCE(OLD.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(OLD.IDVISITANTE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_VIS', OLD.IDMOV_PROCEDIMENTOS_VIS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_BI0 */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_BI0 FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (coalesce(new.idmov_procedimentos_vis,0)=0) then
    NEW.idmov_procedimentos_vis = GEN_ID(COD_UP,0)||GEN_ID(idmov_procedimentos_vis,1);
end
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_BI_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_BI_LOG FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_PROCEDIMENTOS_VIS (IDMOV_PROCEDIMENTOS_VIS,'
||' IDMOV_PROCEDIMENTOS,'
||' IDVISITANTE) VALUES ('
||COALESCE(NEW.IDMOV_PROCEDIMENTOS_VIS,'NULL')||','
||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDVISITANTE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_VIS', NEW.IDMOV_PROCEDIMENTOS_VIS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_PROCEDIMENTOS_VIS_BU_LOG */
CREATE TRIGGER MOV_PROCEDIMENTOS_VIS_BU_LOG FOR MOV_PROCEDIMENTOS_VIS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDMOV_PROCEDIMENTOS,'')<>COALESCE(OLD.IDMOV_PROCEDIMENTOS,'')) THEN TXT=TXT||',IDMOV_PROCEDIMENTOS = '||COALESCE(NEW.IDMOV_PROCEDIMENTOS,'NULL');
IF (COALESCE(NEW.IDVISITANTE,'')<>COALESCE(OLD.IDVISITANTE,'')) THEN TXT=TXT||',IDVISITANTE = '||COALESCE(NEW.IDVISITANTE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_PROCEDIMENTOS_VIS SET IDMOV_PROCEDIMENTOS_VIS = '''||NEW.IDMOV_PROCEDIMENTOS_VIS||''''||TXT||' WHERE IDMOV_PROCEDIMENTOS_VIS = '''||NEW.IDMOV_PROCEDIMENTOS_VIS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_PROCEDIMENTOS_VIS', NEW.IDMOV_PROCEDIMENTOS_VIS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: MOV_TRABALHO_AD_SINCRONISMO */
CREATE TRIGGER MOV_TRABALHO_AD_SINCRONISMO FOR MOV_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM MOV_TRABALHO WHERE ID_MOV_TRABALHO = '||OLD.ID_MOV_TRABALHO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: MOV_TRABALHO_AI_SINCRONISMO */
CREATE TRIGGER MOV_TRABALHO_AI_SINCRONISMO FOR MOV_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO MOV_TRABALHO (ID_MOV_TRABALHO,'
||' ID_TRABALHO,'
||' ID_INTERNO,'
||' ID_SETOR_TRABALHO,'
||' ID_FUNCAO_INTERNO,'
||' DATA_MOV_TRABALHO,'
||' OBS_MOV_TRABALHO,'
||' TIPO_MOV_TRABALHO,'
||' ID_UNIDADE_PENAL) VALUES ('
||COALESCE(NEW.ID_MOV_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_MOV_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.OBS_MOV_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_MOV_TRABALHO||'''','NULL')||','
||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: MOV_TRABALHO_AU_SINCRONISMO */
CREATE TRIGGER MOV_TRABALHO_AU_SINCRONISMO FOR MOV_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_TRABALHO,'')<>COALESCE(OLD.ID_TRABALHO,'')) THEN TXT=TXT||',ID_TRABALHO = '||COALESCE(NEW.ID_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_FUNCAO_INTERNO,'')<>COALESCE(OLD.ID_FUNCAO_INTERNO,'')) THEN TXT=TXT||',ID_FUNCAO_INTERNO = '||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_MOV_TRABALHO,'')<>COALESCE(OLD.DATA_MOV_TRABALHO,'')) THEN TXT=TXT||',DATA_MOV_TRABALHO = '||COALESCE(''''||NEW.DATA_MOV_TRABALHO||'''','NULL');
IF (COALESCE(NEW.OBS_MOV_TRABALHO,'')<>COALESCE(OLD.OBS_MOV_TRABALHO,'')) THEN TXT=TXT||',OBS_MOV_TRABALHO = '||COALESCE(''''||NEW.OBS_MOV_TRABALHO||'''','NULL');
IF (COALESCE(NEW.TIPO_MOV_TRABALHO,'')<>COALESCE(OLD.TIPO_MOV_TRABALHO,'')) THEN TXT=TXT||',TIPO_MOV_TRABALHO = '||COALESCE(''''||NEW.TIPO_MOV_TRABALHO||'''','NULL');
IF (COALESCE(NEW.ID_UNIDADE_PENAL,'')<>COALESCE(OLD.ID_UNIDADE_PENAL,'')) THEN TXT=TXT||',ID_UNIDADE_PENAL = '||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_TRABALHO SET ID_MOV_TRABALHO = '''||NEW.ID_MOV_TRABALHO||''''||TXT||' WHERE ID_MOV_TRABALHO = '''||NEW.ID_MOV_TRABALHO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: MOV_TRABALHO_BD_LOG */
CREATE TRIGGER MOV_TRABALHO_BD_LOG FOR MOV_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_TRABALHO (ID_MOV_TRABALHO,'
||' ID_TRABALHO,'
||' ID_INTERNO,'
||' ID_SETOR_TRABALHO,'
||' ID_FUNCAO_INTERNO,'
||' DATA_MOV_TRABALHO,'
||' OBS_MOV_TRABALHO,'
||' TIPO_MOV_TRABALHO,'
||' ID_UNIDADE_PENAL) VALUES ('
||COALESCE(OLD.ID_MOV_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA_MOV_TRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.OBS_MOV_TRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_MOV_TRABALHO||'''','NULL')||','
||COALESCE(OLD.ID_UNIDADE_PENAL,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_TRABALHO', OLD.ID_MOV_TRABALHO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_TRABALHO_BI0 */
CREATE TRIGGER MOV_TRABALHO_BI0 FOR MOV_TRABALHO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_mov_trabalho IS null or (new.id_mov_trabalho = 0)  ) then
    new.id_mov_trabalho = gen_id (cod_up, 0) || gen_id (id_mov_trabalho, 1);
end
^

/* Trigger: MOV_TRABALHO_BI_LOG */
CREATE TRIGGER MOV_TRABALHO_BI_LOG FOR MOV_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO MOV_TRABALHO (ID_MOV_TRABALHO,'
||' ID_TRABALHO,'
||' ID_INTERNO,'
||' ID_SETOR_TRABALHO,'
||' ID_FUNCAO_INTERNO,'
||' DATA_MOV_TRABALHO,'
||' OBS_MOV_TRABALHO,'
||' TIPO_MOV_TRABALHO,'
||' ID_UNIDADE_PENAL) VALUES ('
||COALESCE(NEW.ID_MOV_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_MOV_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.OBS_MOV_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_MOV_TRABALHO||'''','NULL')||','
||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_TRABALHO', NEW.ID_MOV_TRABALHO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: MOV_TRABALHO_BU_LOG */
CREATE TRIGGER MOV_TRABALHO_BU_LOG FOR MOV_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_TRABALHO,'')<>COALESCE(OLD.ID_TRABALHO,'')) THEN TXT=TXT||',ID_TRABALHO = '||COALESCE(NEW.ID_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_FUNCAO_INTERNO,'')<>COALESCE(OLD.ID_FUNCAO_INTERNO,'')) THEN TXT=TXT||',ID_FUNCAO_INTERNO = '||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_MOV_TRABALHO,'')<>COALESCE(OLD.DATA_MOV_TRABALHO,'')) THEN TXT=TXT||',DATA_MOV_TRABALHO = '||COALESCE(''''||NEW.DATA_MOV_TRABALHO||'''','NULL');
IF (COALESCE(NEW.OBS_MOV_TRABALHO,'')<>COALESCE(OLD.OBS_MOV_TRABALHO,'')) THEN TXT=TXT||',OBS_MOV_TRABALHO = '||COALESCE(''''||NEW.OBS_MOV_TRABALHO||'''','NULL');
IF (COALESCE(NEW.TIPO_MOV_TRABALHO,'')<>COALESCE(OLD.TIPO_MOV_TRABALHO,'')) THEN TXT=TXT||',TIPO_MOV_TRABALHO = '||COALESCE(''''||NEW.TIPO_MOV_TRABALHO||'''','NULL');
IF (COALESCE(NEW.ID_UNIDADE_PENAL,'')<>COALESCE(OLD.ID_UNIDADE_PENAL,'')) THEN TXT=TXT||',ID_UNIDADE_PENAL = '||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE MOV_TRABALHO SET ID_MOV_TRABALHO = '''||NEW.ID_MOV_TRABALHO||''''||TXT||' WHERE ID_MOV_TRABALHO = '''||NEW.ID_MOV_TRABALHO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'MOV_TRABALHO', NEW.ID_MOV_TRABALHO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: NACIONALIDADE_AD_SINCRONISMO */
CREATE TRIGGER NACIONALIDADE_AD_SINCRONISMO FOR NACIONALIDADE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM NACIONALIDADE WHERE ID_NACIONALIDADE = '||OLD.ID_NACIONALIDADE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: NACIONALIDADE_AI_SINCRONISMO */
CREATE TRIGGER NACIONALIDADE_AI_SINCRONISMO FOR NACIONALIDADE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO NACIONALIDADE (ID_NACIONALIDADE,'
||' NACIONALIDADE) VALUES ('
||COALESCE(NEW.ID_NACIONALIDADE,'NULL')||','
||COALESCE(''''||NEW.NACIONALIDADE||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: NACIONALIDADE_AU_SINCRONISMO */
CREATE TRIGGER NACIONALIDADE_AU_SINCRONISMO FOR NACIONALIDADE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NACIONALIDADE,'')<>COALESCE(OLD.NACIONALIDADE,'')) THEN TXT=TXT||',NACIONALIDADE = '||COALESCE(''''||NEW.NACIONALIDADE||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE NACIONALIDADE SET ID_NACIONALIDADE = '''||NEW.ID_NACIONALIDADE||''''||TXT||' WHERE ID_NACIONALIDADE = '''||NEW.ID_NACIONALIDADE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: NACIONALIDADE_BD_LOG */
CREATE TRIGGER NACIONALIDADE_BD_LOG FOR NACIONALIDADE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO NACIONALIDADE (ID_NACIONALIDADE,'
||' NACIONALIDADE) VALUES ('
||COALESCE(OLD.ID_NACIONALIDADE,'NULL')||','
||COALESCE(''''||OLD.NACIONALIDADE||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'NACIONALIDADE', OLD.ID_NACIONALIDADE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: NACIONALIDADE_BI0 */
CREATE TRIGGER NACIONALIDADE_BI0 FOR NACIONALIDADE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_nacionalidade IS null or (new.id_nacionalidade = 0)  ) then
    new.id_nacionalidade = gen_id (cod_up, 0) || gen_id (id_nacionalidade, 1);
end
^

/* Trigger: NACIONALIDADE_BI_LOG */
CREATE TRIGGER NACIONALIDADE_BI_LOG FOR NACIONALIDADE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO NACIONALIDADE (ID_NACIONALIDADE,'
||' NACIONALIDADE) VALUES ('
||COALESCE(NEW.ID_NACIONALIDADE,'NULL')||','
||COALESCE(''''||NEW.NACIONALIDADE||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'NACIONALIDADE', NEW.ID_NACIONALIDADE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: NACIONALIDADE_BU_LOG */
CREATE TRIGGER NACIONALIDADE_BU_LOG FOR NACIONALIDADE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NACIONALIDADE,'')<>COALESCE(OLD.NACIONALIDADE,'')) THEN TXT=TXT||',NACIONALIDADE = '||COALESCE(''''||NEW.NACIONALIDADE||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE NACIONALIDADE SET ID_NACIONALIDADE = '''||NEW.ID_NACIONALIDADE||''''||TXT||' WHERE ID_NACIONALIDADE = '''||NEW.ID_NACIONALIDADE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'NACIONALIDADE', NEW.ID_NACIONALIDADE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: OCORRENCIA_AD_SINCRONISMO */
CREATE TRIGGER OCORRENCIA_AD_SINCRONISMO FOR OCORRENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM OCORRENCIA WHERE IDOCORRENCIA = '||OLD.IDOCORRENCIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: OCORRENCIA_AI_SINCRONISMO */
CREATE TRIGGER OCORRENCIA_AI_SINCRONISMO FOR OCORRENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO OCORRENCIA (IDOCORRENCIA,'
||' DESCRICAO,'
||' ST,'
||' IDPROCEDIMENTO_NOVO,'
||' PROCEDIMENTO_TEM_DATA,'
||' MULTIPLOS_REGISTROS) VALUES ('
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(NEW.IDPROCEDIMENTO_NOVO,'NULL')||','
||COALESCE(''''||NEW.PROCEDIMENTO_TEM_DATA||'''','NULL')||','
||COALESCE(''''||NEW.MULTIPLOS_REGISTROS||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: OCORRENCIA_AU_SINCRONISMO */
CREATE TRIGGER OCORRENCIA_AU_SINCRONISMO FOR OCORRENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.IDPROCEDIMENTO_NOVO,'')<>COALESCE(OLD.IDPROCEDIMENTO_NOVO,'')) THEN TXT=TXT||',IDPROCEDIMENTO_NOVO = '||COALESCE(NEW.IDPROCEDIMENTO_NOVO,'NULL');
IF (COALESCE(NEW.PROCEDIMENTO_TEM_DATA,'')<>COALESCE(OLD.PROCEDIMENTO_TEM_DATA,'')) THEN TXT=TXT||',PROCEDIMENTO_TEM_DATA = '||COALESCE(''''||NEW.PROCEDIMENTO_TEM_DATA||'''','NULL');
IF (COALESCE(NEW.MULTIPLOS_REGISTROS,'')<>COALESCE(OLD.MULTIPLOS_REGISTROS,'')) THEN TXT=TXT||',MULTIPLOS_REGISTROS = '||COALESCE(''''||NEW.MULTIPLOS_REGISTROS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE OCORRENCIA SET IDOCORRENCIA = '''||NEW.IDOCORRENCIA||''''||TXT||' WHERE IDOCORRENCIA = '''||NEW.IDOCORRENCIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: OCORRENCIA_BD_LOG */
CREATE TRIGGER OCORRENCIA_BD_LOG FOR OCORRENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO OCORRENCIA (IDOCORRENCIA,'
||' DESCRICAO,'
||' ST,'
||' IDPROCEDIMENTO_NOVO,'
||' PROCEDIMENTO_TEM_DATA,'
||' MULTIPLOS_REGISTROS) VALUES ('
||COALESCE(OLD.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.ST||'''','NULL')||','
||COALESCE(OLD.IDPROCEDIMENTO_NOVO,'NULL')||','
||COALESCE(''''||OLD.PROCEDIMENTO_TEM_DATA||'''','NULL')||','
||COALESCE(''''||OLD.MULTIPLOS_REGISTROS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'OCORRENCIA', OLD.IDOCORRENCIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: OCORRENCIA_BI0 */
CREATE TRIGGER OCORRENCIA_BI0 FOR OCORRENCIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
    if (NEW.idocorrencia IS null or (new.idocorrencia = 0)  ) then
    new.idocorrencia = gen_id (cod_up, 0) || gen_id (idocorrencia, 1);
end
^

/* Trigger: OCORRENCIA_BI_LOG */
CREATE TRIGGER OCORRENCIA_BI_LOG FOR OCORRENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO OCORRENCIA (IDOCORRENCIA,'
||' DESCRICAO,'
||' ST,'
||' IDPROCEDIMENTO_NOVO,'
||' PROCEDIMENTO_TEM_DATA,'
||' MULTIPLOS_REGISTROS) VALUES ('
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(NEW.IDPROCEDIMENTO_NOVO,'NULL')||','
||COALESCE(''''||NEW.PROCEDIMENTO_TEM_DATA||'''','NULL')||','
||COALESCE(''''||NEW.MULTIPLOS_REGISTROS||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'OCORRENCIA', NEW.IDOCORRENCIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: OCORRENCIA_BU_LOG */
CREATE TRIGGER OCORRENCIA_BU_LOG FOR OCORRENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.IDPROCEDIMENTO_NOVO,'')<>COALESCE(OLD.IDPROCEDIMENTO_NOVO,'')) THEN TXT=TXT||',IDPROCEDIMENTO_NOVO = '||COALESCE(NEW.IDPROCEDIMENTO_NOVO,'NULL');
IF (COALESCE(NEW.PROCEDIMENTO_TEM_DATA,'')<>COALESCE(OLD.PROCEDIMENTO_TEM_DATA,'')) THEN TXT=TXT||',PROCEDIMENTO_TEM_DATA = '||COALESCE(''''||NEW.PROCEDIMENTO_TEM_DATA||'''','NULL');
IF (COALESCE(NEW.MULTIPLOS_REGISTROS,'')<>COALESCE(OLD.MULTIPLOS_REGISTROS,'')) THEN TXT=TXT||',MULTIPLOS_REGISTROS = '||COALESCE(''''||NEW.MULTIPLOS_REGISTROS||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE OCORRENCIA SET IDOCORRENCIA = '''||NEW.IDOCORRENCIA||''''||TXT||' WHERE IDOCORRENCIA = '''||NEW.IDOCORRENCIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'OCORRENCIA', NEW.IDOCORRENCIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_AD_SIN */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_AD_SIN FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM OCORRENCIA_PROCEDIMENTOS WHERE IDOCORRENCIA_PROCEDIMENTOS = '||OLD.IDOCORRENCIA_PROCEDIMENTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_AI_SIN */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_AI_SIN FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO OCORRENCIA_PROCEDIMENTOS (IDOCORRENCIA_PROCEDIMENTOS,'
||' IDOCORRENCIA,'
||' IDPROCEDIMENTOS) VALUES ('
||COALESCE(NEW.IDOCORRENCIA_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(NEW.IDPROCEDIMENTOS,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_AU_SIN */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_AU_SIN FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDOCORRENCIA,'')<>COALESCE(OLD.IDOCORRENCIA,'')) THEN TXT=TXT||',IDOCORRENCIA = '||COALESCE(NEW.IDOCORRENCIA,'NULL');
IF (COALESCE(NEW.IDPROCEDIMENTOS,'')<>COALESCE(OLD.IDPROCEDIMENTOS,'')) THEN TXT=TXT||',IDPROCEDIMENTOS = '||COALESCE(NEW.IDPROCEDIMENTOS,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE OCORRENCIA_PROCEDIMENTOS SET IDOCORRENCIA_PROCEDIMENTOS = '''||NEW.IDOCORRENCIA_PROCEDIMENTOS||''''||TXT||' WHERE IDOCORRENCIA_PROCEDIMENTOS = '''||NEW.IDOCORRENCIA_PROCEDIMENTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_BD_LOG */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_BD_LOG FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO OCORRENCIA_PROCEDIMENTOS (IDOCORRENCIA_PROCEDIMENTOS,'
||' IDOCORRENCIA,'
||' IDPROCEDIMENTOS) VALUES ('
||COALESCE(OLD.IDOCORRENCIA_PROCEDIMENTOS,'NULL')||','
||COALESCE(OLD.IDOCORRENCIA,'NULL')||','
||COALESCE(OLD.IDPROCEDIMENTOS,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'OCORRENCIA_PROCEDIMENTOS', OLD.IDOCORRENCIA_PROCEDIMENTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_BI0 */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_BI0 FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDOCORRENCIA_PROCEDIMENTOS IS NULL OR (NEW.IDOCORRENCIA_PROCEDIMENTOS = 0)  ) THEN
    NEW.IDOCORRENCIA_PROCEDIMENTOS = GEN_ID (COD_UP, 0) || GEN_ID (IDOCORRENCIA_PROCEDIMENTOS, 1);
end
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_BI_LOG */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_BI_LOG FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO OCORRENCIA_PROCEDIMENTOS (IDOCORRENCIA_PROCEDIMENTOS,'
||' IDOCORRENCIA,'
||' IDPROCEDIMENTOS) VALUES ('
||COALESCE(NEW.IDOCORRENCIA_PROCEDIMENTOS,'NULL')||','
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(NEW.IDPROCEDIMENTOS,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'OCORRENCIA_PROCEDIMENTOS', NEW.IDOCORRENCIA_PROCEDIMENTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: OCORRENCIA_PROCEDIMENTOS_BU_LOG */
CREATE TRIGGER OCORRENCIA_PROCEDIMENTOS_BU_LOG FOR OCORRENCIA_PROCEDIMENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDOCORRENCIA,'')<>COALESCE(OLD.IDOCORRENCIA,'')) THEN TXT=TXT||',IDOCORRENCIA = '||COALESCE(NEW.IDOCORRENCIA,'NULL');
IF (COALESCE(NEW.IDPROCEDIMENTOS,'')<>COALESCE(OLD.IDPROCEDIMENTOS,'')) THEN TXT=TXT||',IDPROCEDIMENTOS = '||COALESCE(NEW.IDPROCEDIMENTOS,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE OCORRENCIA_PROCEDIMENTOS SET IDOCORRENCIA_PROCEDIMENTOS = '''||NEW.IDOCORRENCIA_PROCEDIMENTOS||''''||TXT||' WHERE IDOCORRENCIA_PROCEDIMENTOS = '''||NEW.IDOCORRENCIA_PROCEDIMENTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'OCORRENCIA_PROCEDIMENTOS', NEW.IDOCORRENCIA_PROCEDIMENTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PADRAO_AD_SINCRONISMO */
CREATE TRIGGER PADRAO_AD_SINCRONISMO FOR PADRAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PADRAO WHERE IDPADRAO = '||OLD.IDPADRAO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PADRAO_AI_SINCRONISMO */
CREATE TRIGGER PADRAO_AI_SINCRONISMO FOR PADRAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PADRAO (IDPADRAO,'
||' COD_UP,'
||' SISTEMA,'
||' NOME_PAVILHAO,'
||' NOME_GALERIA,'
||' NOME_SOLARIO,'
||' NOME_CELA,'
||' NUMERO_VISITANTES) VALUES ('
||COALESCE(NEW.IDPADRAO,'NULL')||','
||COALESCE(NEW.COD_UP,'NULL')||','
||COALESCE(''''||NEW.SISTEMA||'''','NULL')||','
||COALESCE(''''||NEW.NOME_PAVILHAO||'''','NULL')||','
||COALESCE(''''||NEW.NOME_GALERIA||'''','NULL')||','
||COALESCE(''''||NEW.NOME_SOLARIO||'''','NULL')||','
||COALESCE(''''||NEW.NOME_CELA||'''','NULL')||','
||COALESCE(NEW.NUMERO_VISITANTES,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PADRAO_AU_SINCRONISMO */
CREATE TRIGGER PADRAO_AU_SINCRONISMO FOR PADRAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.COD_UP,'')<>COALESCE(OLD.COD_UP,'')) THEN TXT=TXT||',COD_UP = '||COALESCE(NEW.COD_UP,'NULL');
IF (COALESCE(NEW.SISTEMA,'')<>COALESCE(OLD.SISTEMA,'')) THEN TXT=TXT||',SISTEMA = '||COALESCE(''''||NEW.SISTEMA||'''','NULL');
IF (COALESCE(NEW.NOME_PAVILHAO,'')<>COALESCE(OLD.NOME_PAVILHAO,'')) THEN TXT=TXT||',NOME_PAVILHAO = '||COALESCE(''''||NEW.NOME_PAVILHAO||'''','NULL');
IF (COALESCE(NEW.NOME_GALERIA,'')<>COALESCE(OLD.NOME_GALERIA,'')) THEN TXT=TXT||',NOME_GALERIA = '||COALESCE(''''||NEW.NOME_GALERIA||'''','NULL');
IF (COALESCE(NEW.NOME_SOLARIO,'')<>COALESCE(OLD.NOME_SOLARIO,'')) THEN TXT=TXT||',NOME_SOLARIO = '||COALESCE(''''||NEW.NOME_SOLARIO||'''','NULL');
IF (COALESCE(NEW.NOME_CELA,'')<>COALESCE(OLD.NOME_CELA,'')) THEN TXT=TXT||',NOME_CELA = '||COALESCE(''''||NEW.NOME_CELA||'''','NULL');
IF (COALESCE(NEW.NUMERO_VISITANTES,'')<>COALESCE(OLD.NUMERO_VISITANTES,'')) THEN TXT=TXT||',NUMERO_VISITANTES = '||COALESCE(NEW.NUMERO_VISITANTES,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PADRAO SET IDPADRAO = '''||NEW.IDPADRAO||''''||TXT||' WHERE IDPADRAO = '''||NEW.IDPADRAO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PADRAO_BD_LOG */
CREATE TRIGGER PADRAO_BD_LOG FOR PADRAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PADRAO (IDPADRAO,'
||' COD_UP,'
||' SISTEMA,'
||' NOME_PAVILHAO,'
||' NOME_GALERIA,'
||' NOME_SOLARIO,'
||' NOME_CELA,'
||' NUMERO_VISITANTES) VALUES ('
||COALESCE(OLD.IDPADRAO,'NULL')||','
||COALESCE(OLD.COD_UP,'NULL')||','
||COALESCE(''''||OLD.SISTEMA||'''','NULL')||','
||COALESCE(''''||OLD.NOME_PAVILHAO||'''','NULL')||','
||COALESCE(''''||OLD.NOME_GALERIA||'''','NULL')||','
||COALESCE(''''||OLD.NOME_SOLARIO||'''','NULL')||','
||COALESCE(''''||OLD.NOME_CELA||'''','NULL')||','
||COALESCE(OLD.NUMERO_VISITANTES,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PADRAO', OLD.IDPADRAO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PADRAO_BI0 */
CREATE TRIGGER PADRAO_BI0 FOR PADRAO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
  if (NEW.idpadrao IS null or (new.idpadrao = 0)  ) then
    new.idpadrao = gen_id (cod_up, 0) || gen_id (idpadrao, 1);
end
^

/* Trigger: PADRAO_BI_LOG */
CREATE TRIGGER PADRAO_BI_LOG FOR PADRAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PADRAO (IDPADRAO,'
||' COD_UP,'
||' SISTEMA,'
||' NOME_PAVILHAO,'
||' NOME_GALERIA,'
||' NOME_SOLARIO,'
||' NOME_CELA,'
||' NUMERO_VISITANTES) VALUES ('
||COALESCE(NEW.IDPADRAO,'NULL')||','
||COALESCE(NEW.COD_UP,'NULL')||','
||COALESCE(''''||NEW.SISTEMA||'''','NULL')||','
||COALESCE(''''||NEW.NOME_PAVILHAO||'''','NULL')||','
||COALESCE(''''||NEW.NOME_GALERIA||'''','NULL')||','
||COALESCE(''''||NEW.NOME_SOLARIO||'''','NULL')||','
||COALESCE(''''||NEW.NOME_CELA||'''','NULL')||','
||COALESCE(NEW.NUMERO_VISITANTES,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PADRAO', NEW.IDPADRAO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PADRAO_BU_LOG */
CREATE TRIGGER PADRAO_BU_LOG FOR PADRAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.COD_UP,'')<>COALESCE(OLD.COD_UP,'')) THEN TXT=TXT||',COD_UP = '||COALESCE(NEW.COD_UP,'NULL');
IF (COALESCE(NEW.SISTEMA,'')<>COALESCE(OLD.SISTEMA,'')) THEN TXT=TXT||',SISTEMA = '||COALESCE(''''||NEW.SISTEMA||'''','NULL');
IF (COALESCE(NEW.NOME_PAVILHAO,'')<>COALESCE(OLD.NOME_PAVILHAO,'')) THEN TXT=TXT||',NOME_PAVILHAO = '||COALESCE(''''||NEW.NOME_PAVILHAO||'''','NULL');
IF (COALESCE(NEW.NOME_GALERIA,'')<>COALESCE(OLD.NOME_GALERIA,'')) THEN TXT=TXT||',NOME_GALERIA = '||COALESCE(''''||NEW.NOME_GALERIA||'''','NULL');
IF (COALESCE(NEW.NOME_SOLARIO,'')<>COALESCE(OLD.NOME_SOLARIO,'')) THEN TXT=TXT||',NOME_SOLARIO = '||COALESCE(''''||NEW.NOME_SOLARIO||'''','NULL');
IF (COALESCE(NEW.NOME_CELA,'')<>COALESCE(OLD.NOME_CELA,'')) THEN TXT=TXT||',NOME_CELA = '||COALESCE(''''||NEW.NOME_CELA||'''','NULL');
IF (COALESCE(NEW.NUMERO_VISITANTES,'')<>COALESCE(OLD.NUMERO_VISITANTES,'')) THEN TXT=TXT||',NUMERO_VISITANTES = '||COALESCE(NEW.NUMERO_VISITANTES,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PADRAO SET IDPADRAO = '''||NEW.IDPADRAO||''''||TXT||' WHERE IDPADRAO = '''||NEW.IDPADRAO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PADRAO', NEW.IDPADRAO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PATRIMONIO_AD_SINCRONISMO */
CREATE TRIGGER PATRIMONIO_AD_SINCRONISMO FOR PATRIMONIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PATRIMONIO WHERE IDPATRIMONIO = '||OLD.IDPATRIMONIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PATRIMONIO_AI_MOV_CAUTELA */
CREATE TRIGGER PATRIMONIO_AI_MOV_CAUTELA FOR PATRIMONIO
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')<>'') THEN
     EXIT;

    IF (COALESCE(NEW.QUANTIDADE,0)>0) THEN
    BEGIN
        ID_FUNCIONARIO_LOGIN = RDB$GET_CONTEXT('USER_TRANSACTION', 'ID_FUNCIONARIO');
        INSERT INTO MOV_CAUTELA (IDMOV_CAUTELA, 
                                 IDFUNCIONARIO_LANCAMENTO, 
                                 IDPOSTO_TRABALHO, 
                                 IDFUNCIONARIO_RESPONSAVEL, 
                                 IDPATRIMONIO, 
                                 ID_UP, 
                                 NUMERO_CAUTELA, 
                                 DATA_MOVIMENTO, 
                                 HORA_MOVIMENTO, 
                                 QUANTIDADE, 
                                 TIPO_MOVIMENTO, 
                                 HISTORICO, 
                                 OBSERVACAO, 
                                 DADOS_ADICIONAIS)
        VALUES (0,
                :ID_FUNCIONARIO_LOGIN,
                NULL,
                :ID_FUNCIONARIO_LOGIN,
                NEW.IDPATRIMONIO,
                NEW.ID_UP,
                GEN_ID(NUMERO_CAUTELA,1),
                CURRENT_DATE,
                CURRENT_TIME,
                NEW.QUANTIDADE,
                'E',
                'REGISTRO INICIAL',
                NULL,
                NULL);
    END

END
^

/* Trigger: PATRIMONIO_AI_SINCRONISMO */
CREATE TRIGGER PATRIMONIO_AI_SINCRONISMO FOR PATRIMONIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PATRIMONIO (IDPATRIMONIO,'
||' TOMBO,'
||' NUM_SERIAL,'
||' NOME,'
||' COMPLEMENTO,'
||' MARCA,'
||' MODELO,'
||' ESTADO,'
||' IDTIPO_PATRIMONIO,'
||' VALOR,'
||' UTILIZACAO,'
||' DISPONIBILIDADE,'
||' ID_UP,'
||' IDPOSTO_TRABALHO,'
||' OBSERVACAO,'
||' IDFUNCIONARIO_CADASTROU,'
||' DATA_CADASTRO,'
||' DATA_CAUTELA,'
||' CAUTELA,'
||' IDPOSTO_TRABALHO_CAUTELA,'
||' IDFUNCIONARIO_CAUTELA,'
||' MISSAO_CAUTELA,'
||' OBS_CAUTELA,'
||' NOTA_FISCAL,'
||' TIPO_PESSOA,'
||' NUMERO_ARMA,'
||' CAPACIDADE,'
||' NUMEROS_CANOS,'
||' NUMERO_RAIAS,'
||' REGISTRO_DATA_EMISSAO,'
||' REGISTRO_ESTADUAL,'
||' REGISTRO_ORGAO_EXPEDIDOR,'
||' REGISTRO_UF,'
||' CADASTRO_SINARM,'
||' ESPECIE,'
||' CALIBRE,'
||' PAIS_FABRICACAO,'
||' COMPRIMENTO_CANO,'
||' ARMA_ALMA,'
||' SENTIDO_RAIA,'
||' FUNCAO_ARMA,'
||' ACABAMENTO,'
||' SITUACAO_GERAL,'
||' OBS_SITUACAO_GERAL,'
||' ORIGEM,'
||' ACESSORIOS,'
||' DATA_ULTIMA_MANUTENCAO,'
||' TIPO_BASE,'
||' TIPO_EXPLOSIVO,'
||' COMPOSTO_QUIMICO,'
||' DATA_FABRICACAO,'
||' DATA_VALIDADE,'
||' ESTADO_GERAL,'
||' FABRICACAO,'
||' TIPO_ESPARGIDORES,'
||' PROJETIL,'
||' DATA_NOTA_FISCAL,'
||' QUANTIDADE,'
||' CNPJ_NOTA_FISCAL,'
||' PESO,'
||' DATA_EXPEDICAO,'
||' REGISTRO_SINARM,'
||' EXPLOSIVO_TIPO_EMPREGO,'
||' EXPLOSIVO_COD_REFERENCIA,'
||' MUNICAO_EMPREGO,'
||' DATA_DEV_CAUTELA) VALUES ('
||COALESCE(NEW.IDPATRIMONIO,'NULL')||','
||COALESCE(''''||NEW.TOMBO||'''','NULL')||','
||COALESCE(''''||NEW.NUM_SERIAL||'''','NULL')||','
||COALESCE(''''||NEW.NOME||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||NEW.MARCA||'''','NULL')||','
||COALESCE(''''||NEW.MODELO||'''','NULL')||','
||COALESCE(''''||NEW.ESTADO||'''','NULL')||','
||COALESCE(NEW.IDTIPO_PATRIMONIO,'NULL')||','
||COALESCE(NEW.VALOR,'NULL')||','
||COALESCE(''''||NEW.UTILIZACAO||'''','NULL')||','
||COALESCE(''''||NEW.DISPONIBILIDADE||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_CADASTROU,'NULL')||','
||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.CAUTELA||'''','NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO_CAUTELA,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_CAUTELA,'NULL')||','
||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.OBS_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.NOTA_FISCAL||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_PESSOA||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_ARMA||'''','NULL')||','
||COALESCE(NEW.CAPACIDADE,'NULL')||','
||COALESCE(NEW.NUMEROS_CANOS,'NULL')||','
||COALESCE(NEW.NUMERO_RAIAS,'NULL')||','
||COALESCE(''''||NEW.REGISTRO_DATA_EMISSAO||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_ESTADUAL||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_UF||'''','NULL')||','
||COALESCE(''''||NEW.CADASTRO_SINARM||'''','NULL')||','
||COALESCE(''''||NEW.ESPECIE||'''','NULL')||','
||COALESCE(''''||NEW.CALIBRE||'''','NULL')||','
||COALESCE(''''||NEW.PAIS_FABRICACAO||'''','NULL')||','
||COALESCE(''''||NEW.COMPRIMENTO_CANO||'''','NULL')||','
||COALESCE(''''||NEW.ARMA_ALMA||'''','NULL')||','
||COALESCE(''''||NEW.SENTIDO_RAIA||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO_ARMA||'''','NULL')||','
||COALESCE(''''||NEW.ACABAMENTO||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAO_GERAL||'''','NULL')||','
||COALESCE(''''||NEW.OBS_SITUACAO_GERAL||'''','NULL')||','
||COALESCE(''''||NEW.ORIGEM||'''','NULL')||','
||COALESCE(''''||NEW.ACESSORIOS||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ULTIMA_MANUTENCAO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_BASE||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_EXPLOSIVO||'''','NULL')||','
||COALESCE(''''||NEW.COMPOSTO_QUIMICO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FABRICACAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_VALIDADE||'''','NULL')||','
||COALESCE(''''||NEW.ESTADO_GERAL||'''','NULL')||','
||COALESCE(''''||NEW.FABRICACAO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_ESPARGIDORES||'''','NULL')||','
||COALESCE(''''||NEW.PROJETIL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NOTA_FISCAL||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE,'NULL')||','
||COALESCE(''''||NEW.CNPJ_NOTA_FISCAL||'''','NULL')||','
||COALESCE(NEW.PESO,'NULL')||','
||COALESCE(''''||NEW.DATA_EXPEDICAO||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_SINARM||'''','NULL')||','
||COALESCE(''''||NEW.EXPLOSIVO_TIPO_EMPREGO||'''','NULL')||','
||COALESCE(''''||NEW.EXPLOSIVO_COD_REFERENCIA||'''','NULL')||','
||COALESCE(''''||NEW.MUNICAO_EMPREGO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PATRIMONIO_AU_SINCRONISMO */
CREATE TRIGGER PATRIMONIO_AU_SINCRONISMO FOR PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.TOMBO,'')<>COALESCE(OLD.TOMBO,'')) THEN TXT=TXT||',TOMBO = '||COALESCE(''''||NEW.TOMBO||'''','NULL');
IF (COALESCE(NEW.NUM_SERIAL,'')<>COALESCE(OLD.NUM_SERIAL,'')) THEN TXT=TXT||',NUM_SERIAL = '||COALESCE(''''||NEW.NUM_SERIAL||'''','NULL');
IF (COALESCE(NEW.NOME,'')<>COALESCE(OLD.NOME,'')) THEN TXT=TXT||',NOME = '||COALESCE(''''||NEW.NOME||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.MARCA,'')<>COALESCE(OLD.MARCA,'')) THEN TXT=TXT||',MARCA = '||COALESCE(''''||NEW.MARCA||'''','NULL');
IF (COALESCE(NEW.MODELO,'')<>COALESCE(OLD.MODELO,'')) THEN TXT=TXT||',MODELO = '||COALESCE(''''||NEW.MODELO||'''','NULL');
IF (COALESCE(NEW.ESTADO,'')<>COALESCE(OLD.ESTADO,'')) THEN TXT=TXT||',ESTADO = '||COALESCE(''''||NEW.ESTADO||'''','NULL');
IF (COALESCE(NEW.IDTIPO_PATRIMONIO,'')<>COALESCE(OLD.IDTIPO_PATRIMONIO,'')) THEN TXT=TXT||',IDTIPO_PATRIMONIO = '||COALESCE(NEW.IDTIPO_PATRIMONIO,'NULL');
IF (COALESCE(NEW.VALOR,'')<>COALESCE(OLD.VALOR,'')) THEN TXT=TXT||',VALOR = '||COALESCE(NEW.VALOR,'NULL');
IF (COALESCE(NEW.UTILIZACAO,'')<>COALESCE(OLD.UTILIZACAO,'')) THEN TXT=TXT||',UTILIZACAO = '||COALESCE(''''||NEW.UTILIZACAO||'''','NULL');
IF (COALESCE(NEW.DISPONIBILIDADE,'')<>COALESCE(OLD.DISPONIBILIDADE,'')) THEN TXT=TXT||',DISPONIBILIDADE = '||COALESCE(''''||NEW.DISPONIBILIDADE||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_CADASTROU,'')<>COALESCE(OLD.IDFUNCIONARIO_CADASTROU,'')) THEN TXT=TXT||',IDFUNCIONARIO_CADASTROU = '||COALESCE(NEW.IDFUNCIONARIO_CADASTROU,'NULL');
IF (COALESCE(NEW.DATA_CADASTRO,'')<>COALESCE(OLD.DATA_CADASTRO,'')) THEN TXT=TXT||',DATA_CADASTRO = '||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL');
IF (COALESCE(NEW.DATA_CAUTELA,'')<>COALESCE(OLD.DATA_CAUTELA,'')) THEN TXT=TXT||',DATA_CAUTELA = '||COALESCE(''''||NEW.DATA_CAUTELA||'''','NULL');
IF (COALESCE(NEW.CAUTELA,'')<>COALESCE(OLD.CAUTELA,'')) THEN TXT=TXT||',CAUTELA = '||COALESCE(''''||NEW.CAUTELA||'''','NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO_CAUTELA,'')<>COALESCE(OLD.IDPOSTO_TRABALHO_CAUTELA,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO_CAUTELA = '||COALESCE(NEW.IDPOSTO_TRABALHO_CAUTELA,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_CAUTELA,'')<>COALESCE(OLD.IDFUNCIONARIO_CAUTELA,'')) THEN TXT=TXT||',IDFUNCIONARIO_CAUTELA = '||COALESCE(NEW.IDFUNCIONARIO_CAUTELA,'NULL');
IF (COALESCE(NEW.MISSAO_CAUTELA,'')<>COALESCE(OLD.MISSAO_CAUTELA,'')) THEN TXT=TXT||',MISSAO_CAUTELA = '||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL');
IF (COALESCE(NEW.OBS_CAUTELA,'')<>COALESCE(OLD.OBS_CAUTELA,'')) THEN TXT=TXT||',OBS_CAUTELA = '||COALESCE(''''||NEW.OBS_CAUTELA||'''','NULL');
IF (COALESCE(NEW.NOTA_FISCAL,'')<>COALESCE(OLD.NOTA_FISCAL,'')) THEN TXT=TXT||',NOTA_FISCAL = '||COALESCE(''''||NEW.NOTA_FISCAL||'''','NULL');
IF (COALESCE(NEW.TIPO_PESSOA,'')<>COALESCE(OLD.TIPO_PESSOA,'')) THEN TXT=TXT||',TIPO_PESSOA = '||COALESCE(''''||NEW.TIPO_PESSOA||'''','NULL');
IF (COALESCE(NEW.NUMERO_ARMA,'')<>COALESCE(OLD.NUMERO_ARMA,'')) THEN TXT=TXT||',NUMERO_ARMA = '||COALESCE(''''||NEW.NUMERO_ARMA||'''','NULL');
IF (COALESCE(NEW.CAPACIDADE,'')<>COALESCE(OLD.CAPACIDADE,'')) THEN TXT=TXT||',CAPACIDADE = '||COALESCE(NEW.CAPACIDADE,'NULL');
IF (COALESCE(NEW.NUMEROS_CANOS,'')<>COALESCE(OLD.NUMEROS_CANOS,'')) THEN TXT=TXT||',NUMEROS_CANOS = '||COALESCE(NEW.NUMEROS_CANOS,'NULL');
IF (COALESCE(NEW.NUMERO_RAIAS,'')<>COALESCE(OLD.NUMERO_RAIAS,'')) THEN TXT=TXT||',NUMERO_RAIAS = '||COALESCE(NEW.NUMERO_RAIAS,'NULL');
IF (COALESCE(NEW.REGISTRO_DATA_EMISSAO,'')<>COALESCE(OLD.REGISTRO_DATA_EMISSAO,'')) THEN TXT=TXT||',REGISTRO_DATA_EMISSAO = '||COALESCE(''''||NEW.REGISTRO_DATA_EMISSAO||'''','NULL');
IF (COALESCE(NEW.REGISTRO_ESTADUAL,'')<>COALESCE(OLD.REGISTRO_ESTADUAL,'')) THEN TXT=TXT||',REGISTRO_ESTADUAL = '||COALESCE(''''||NEW.REGISTRO_ESTADUAL||'''','NULL');
IF (COALESCE(NEW.REGISTRO_ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.REGISTRO_ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',REGISTRO_ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.REGISTRO_ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.REGISTRO_UF,'')<>COALESCE(OLD.REGISTRO_UF,'')) THEN TXT=TXT||',REGISTRO_UF = '||COALESCE(''''||NEW.REGISTRO_UF||'''','NULL');
IF (COALESCE(NEW.CADASTRO_SINARM,'')<>COALESCE(OLD.CADASTRO_SINARM,'')) THEN TXT=TXT||',CADASTRO_SINARM = '||COALESCE(''''||NEW.CADASTRO_SINARM||'''','NULL');
IF (COALESCE(NEW.ESPECIE,'')<>COALESCE(OLD.ESPECIE,'')) THEN TXT=TXT||',ESPECIE = '||COALESCE(''''||NEW.ESPECIE||'''','NULL');
IF (COALESCE(NEW.CALIBRE,'')<>COALESCE(OLD.CALIBRE,'')) THEN TXT=TXT||',CALIBRE = '||COALESCE(''''||NEW.CALIBRE||'''','NULL');
IF (COALESCE(NEW.PAIS_FABRICACAO,'')<>COALESCE(OLD.PAIS_FABRICACAO,'')) THEN TXT=TXT||',PAIS_FABRICACAO = '||COALESCE(''''||NEW.PAIS_FABRICACAO||'''','NULL');
IF (COALESCE(NEW.COMPRIMENTO_CANO,'')<>COALESCE(OLD.COMPRIMENTO_CANO,'')) THEN TXT=TXT||',COMPRIMENTO_CANO = '||COALESCE(''''||NEW.COMPRIMENTO_CANO||'''','NULL');
IF (COALESCE(NEW.ARMA_ALMA,'')<>COALESCE(OLD.ARMA_ALMA,'')) THEN TXT=TXT||',ARMA_ALMA = '||COALESCE(''''||NEW.ARMA_ALMA||'''','NULL');
IF (COALESCE(NEW.SENTIDO_RAIA,'')<>COALESCE(OLD.SENTIDO_RAIA,'')) THEN TXT=TXT||',SENTIDO_RAIA = '||COALESCE(''''||NEW.SENTIDO_RAIA||'''','NULL');
IF (COALESCE(NEW.FUNCAO_ARMA,'')<>COALESCE(OLD.FUNCAO_ARMA,'')) THEN TXT=TXT||',FUNCAO_ARMA = '||COALESCE(''''||NEW.FUNCAO_ARMA||'''','NULL');
IF (COALESCE(NEW.ACABAMENTO,'')<>COALESCE(OLD.ACABAMENTO,'')) THEN TXT=TXT||',ACABAMENTO = '||COALESCE(''''||NEW.ACABAMENTO||'''','NULL');
IF (COALESCE(NEW.SITUACAO_GERAL,'')<>COALESCE(OLD.SITUACAO_GERAL,'')) THEN TXT=TXT||',SITUACAO_GERAL = '||COALESCE(''''||NEW.SITUACAO_GERAL||'''','NULL');
IF (COALESCE(NEW.OBS_SITUACAO_GERAL,'')<>COALESCE(OLD.OBS_SITUACAO_GERAL,'')) THEN TXT=TXT||',OBS_SITUACAO_GERAL = '||COALESCE(''''||NEW.OBS_SITUACAO_GERAL||'''','NULL');
IF (COALESCE(NEW.ORIGEM,'')<>COALESCE(OLD.ORIGEM,'')) THEN TXT=TXT||',ORIGEM = '||COALESCE(''''||NEW.ORIGEM||'''','NULL');
IF (COALESCE(NEW.ACESSORIOS,'')<>COALESCE(OLD.ACESSORIOS,'')) THEN TXT=TXT||',ACESSORIOS = '||COALESCE(''''||NEW.ACESSORIOS||'''','NULL');
IF (COALESCE(NEW.DATA_ULTIMA_MANUTENCAO,'')<>COALESCE(OLD.DATA_ULTIMA_MANUTENCAO,'')) THEN TXT=TXT||',DATA_ULTIMA_MANUTENCAO = '||COALESCE(''''||NEW.DATA_ULTIMA_MANUTENCAO||'''','NULL');
IF (COALESCE(NEW.TIPO_BASE,'')<>COALESCE(OLD.TIPO_BASE,'')) THEN TXT=TXT||',TIPO_BASE = '||COALESCE(''''||NEW.TIPO_BASE||'''','NULL');
IF (COALESCE(NEW.TIPO_EXPLOSIVO,'')<>COALESCE(OLD.TIPO_EXPLOSIVO,'')) THEN TXT=TXT||',TIPO_EXPLOSIVO = '||COALESCE(''''||NEW.TIPO_EXPLOSIVO||'''','NULL');
IF (COALESCE(NEW.COMPOSTO_QUIMICO,'')<>COALESCE(OLD.COMPOSTO_QUIMICO,'')) THEN TXT=TXT||',COMPOSTO_QUIMICO = '||COALESCE(''''||NEW.COMPOSTO_QUIMICO||'''','NULL');
IF (COALESCE(NEW.DATA_FABRICACAO,'')<>COALESCE(OLD.DATA_FABRICACAO,'')) THEN TXT=TXT||',DATA_FABRICACAO = '||COALESCE(''''||NEW.DATA_FABRICACAO||'''','NULL');
IF (COALESCE(NEW.DATA_VALIDADE,'')<>COALESCE(OLD.DATA_VALIDADE,'')) THEN TXT=TXT||',DATA_VALIDADE = '||COALESCE(''''||NEW.DATA_VALIDADE||'''','NULL');
IF (COALESCE(NEW.ESTADO_GERAL,'')<>COALESCE(OLD.ESTADO_GERAL,'')) THEN TXT=TXT||',ESTADO_GERAL = '||COALESCE(''''||NEW.ESTADO_GERAL||'''','NULL');
IF (COALESCE(NEW.FABRICACAO,'')<>COALESCE(OLD.FABRICACAO,'')) THEN TXT=TXT||',FABRICACAO = '||COALESCE(''''||NEW.FABRICACAO||'''','NULL');
IF (COALESCE(NEW.TIPO_ESPARGIDORES,'')<>COALESCE(OLD.TIPO_ESPARGIDORES,'')) THEN TXT=TXT||',TIPO_ESPARGIDORES = '||COALESCE(''''||NEW.TIPO_ESPARGIDORES||'''','NULL');
IF (COALESCE(NEW.PROJETIL,'')<>COALESCE(OLD.PROJETIL,'')) THEN TXT=TXT||',PROJETIL = '||COALESCE(''''||NEW.PROJETIL||'''','NULL');
IF (COALESCE(NEW.DATA_NOTA_FISCAL,'')<>COALESCE(OLD.DATA_NOTA_FISCAL,'')) THEN TXT=TXT||',DATA_NOTA_FISCAL = '||COALESCE(''''||NEW.DATA_NOTA_FISCAL||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE,'')<>COALESCE(OLD.QUANTIDADE,'')) THEN TXT=TXT||',QUANTIDADE = '||COALESCE(NEW.QUANTIDADE,'NULL');
IF (COALESCE(NEW.CNPJ_NOTA_FISCAL,'')<>COALESCE(OLD.CNPJ_NOTA_FISCAL,'')) THEN TXT=TXT||',CNPJ_NOTA_FISCAL = '||COALESCE(''''||NEW.CNPJ_NOTA_FISCAL||'''','NULL');
IF (COALESCE(NEW.PESO,'')<>COALESCE(OLD.PESO,'')) THEN TXT=TXT||',PESO = '||COALESCE(NEW.PESO,'NULL');
IF (COALESCE(NEW.DATA_EXPEDICAO,'')<>COALESCE(OLD.DATA_EXPEDICAO,'')) THEN TXT=TXT||',DATA_EXPEDICAO = '||COALESCE(''''||NEW.DATA_EXPEDICAO||'''','NULL');
IF (COALESCE(NEW.REGISTRO_SINARM,'')<>COALESCE(OLD.REGISTRO_SINARM,'')) THEN TXT=TXT||',REGISTRO_SINARM = '||COALESCE(''''||NEW.REGISTRO_SINARM||'''','NULL');
IF (COALESCE(NEW.EXPLOSIVO_TIPO_EMPREGO,'')<>COALESCE(OLD.EXPLOSIVO_TIPO_EMPREGO,'')) THEN TXT=TXT||',EXPLOSIVO_TIPO_EMPREGO = '||COALESCE(''''||NEW.EXPLOSIVO_TIPO_EMPREGO||'''','NULL');
IF (COALESCE(NEW.EXPLOSIVO_COD_REFERENCIA,'')<>COALESCE(OLD.EXPLOSIVO_COD_REFERENCIA,'')) THEN TXT=TXT||',EXPLOSIVO_COD_REFERENCIA = '||COALESCE(''''||NEW.EXPLOSIVO_COD_REFERENCIA||'''','NULL');
IF (COALESCE(NEW.MUNICAO_EMPREGO,'')<>COALESCE(OLD.MUNICAO_EMPREGO,'')) THEN TXT=TXT||',MUNICAO_EMPREGO = '||COALESCE(''''||NEW.MUNICAO_EMPREGO||'''','NULL');
IF (COALESCE(NEW.DATA_DEV_CAUTELA,'')<>COALESCE(OLD.DATA_DEV_CAUTELA,'')) THEN TXT=TXT||',DATA_DEV_CAUTELA = '||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PATRIMONIO SET IDPATRIMONIO = '''||NEW.IDPATRIMONIO||''''||TXT||' WHERE IDPATRIMONIO = '''||NEW.IDPATRIMONIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PATRIMONIO_BD_LOG */
CREATE TRIGGER PATRIMONIO_BD_LOG FOR PATRIMONIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PATRIMONIO (IDPATRIMONIO,'
||' TOMBO,'
||' NUM_SERIAL,'
||' NOME,'
||' COMPLEMENTO,'
||' MARCA,'
||' MODELO,'
||' ESTADO,'
||' IDTIPO_PATRIMONIO,'
||' VALOR,'
||' UTILIZACAO,'
||' DISPONIBILIDADE,'
||' ID_UP,'
||' IDPOSTO_TRABALHO,'
||' OBSERVACAO,'
||' IDFUNCIONARIO_CADASTROU,'
||' DATA_CADASTRO,'
||' DATA_CAUTELA,'
||' CAUTELA,'
||' IDPOSTO_TRABALHO_CAUTELA,'
||' IDFUNCIONARIO_CAUTELA,'
||' MISSAO_CAUTELA,'
||' OBS_CAUTELA,'
||' NOTA_FISCAL,'
||' TIPO_PESSOA,'
||' NUMERO_ARMA,'
||' CAPACIDADE,'
||' NUMEROS_CANOS,'
||' NUMERO_RAIAS,'
||' REGISTRO_DATA_EMISSAO,'
||' REGISTRO_ESTADUAL,'
||' REGISTRO_ORGAO_EXPEDIDOR,'
||' REGISTRO_UF,'
||' CADASTRO_SINARM,'
||' ESPECIE,'
||' CALIBRE,'
||' PAIS_FABRICACAO,'
||' COMPRIMENTO_CANO,'
||' ARMA_ALMA,'
||' SENTIDO_RAIA,'
||' FUNCAO_ARMA,'
||' ACABAMENTO,'
||' SITUACAO_GERAL,'
||' OBS_SITUACAO_GERAL,'
||' ORIGEM,'
||' ACESSORIOS,'
||' DATA_ULTIMA_MANUTENCAO,'
||' TIPO_BASE,'
||' TIPO_EXPLOSIVO,'
||' COMPOSTO_QUIMICO,'
||' DATA_FABRICACAO,'
||' DATA_VALIDADE,'
||' ESTADO_GERAL,'
||' FABRICACAO,'
||' TIPO_ESPARGIDORES,'
||' PROJETIL,'
||' DATA_NOTA_FISCAL,'
||' QUANTIDADE,'
||' CNPJ_NOTA_FISCAL,'
||' PESO,'
||' DATA_EXPEDICAO,'
||' REGISTRO_SINARM,'
||' EXPLOSIVO_TIPO_EMPREGO,'
||' EXPLOSIVO_COD_REFERENCIA,'
||' MUNICAO_EMPREGO,'
||' DATA_DEV_CAUTELA) VALUES ('
||COALESCE(OLD.IDPATRIMONIO,'NULL')||','
||COALESCE(''''||OLD.TOMBO||'''','NULL')||','
||COALESCE(''''||OLD.NUM_SERIAL||'''','NULL')||','
||COALESCE(''''||OLD.NOME||'''','NULL')||','
||COALESCE(''''||OLD.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||OLD.MARCA||'''','NULL')||','
||COALESCE(''''||OLD.MODELO||'''','NULL')||','
||COALESCE(''''||OLD.ESTADO||'''','NULL')||','
||COALESCE(OLD.IDTIPO_PATRIMONIO,'NULL')||','
||COALESCE(OLD.VALOR,'NULL')||','
||COALESCE(''''||OLD.UTILIZACAO||'''','NULL')||','
||COALESCE(''''||OLD.DISPONIBILIDADE||'''','NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(OLD.IDFUNCIONARIO_CADASTROU,'NULL')||','
||COALESCE(''''||OLD.DATA_CADASTRO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_CAUTELA||'''','NULL')||','
||COALESCE(''''||OLD.CAUTELA||'''','NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO_CAUTELA,'NULL')||','
||COALESCE(OLD.IDFUNCIONARIO_CAUTELA,'NULL')||','
||COALESCE(''''||OLD.MISSAO_CAUTELA||'''','NULL')||','
||COALESCE(''''||OLD.OBS_CAUTELA||'''','NULL')||','
||COALESCE(''''||OLD.NOTA_FISCAL||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_PESSOA||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO_ARMA||'''','NULL')||','
||COALESCE(OLD.CAPACIDADE,'NULL')||','
||COALESCE(OLD.NUMEROS_CANOS,'NULL')||','
||COALESCE(OLD.NUMERO_RAIAS,'NULL')||','
||COALESCE(''''||OLD.REGISTRO_DATA_EMISSAO||'''','NULL')||','
||COALESCE(''''||OLD.REGISTRO_ESTADUAL||'''','NULL')||','
||COALESCE(''''||OLD.REGISTRO_ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||OLD.REGISTRO_UF||'''','NULL')||','
||COALESCE(''''||OLD.CADASTRO_SINARM||'''','NULL')||','
||COALESCE(''''||OLD.ESPECIE||'''','NULL')||','
||COALESCE(''''||OLD.CALIBRE||'''','NULL')||','
||COALESCE(''''||OLD.PAIS_FABRICACAO||'''','NULL')||','
||COALESCE(''''||OLD.COMPRIMENTO_CANO||'''','NULL')||','
||COALESCE(''''||OLD.ARMA_ALMA||'''','NULL')||','
||COALESCE(''''||OLD.SENTIDO_RAIA||'''','NULL')||','
||COALESCE(''''||OLD.FUNCAO_ARMA||'''','NULL')||','
||COALESCE(''''||OLD.ACABAMENTO||'''','NULL')||','
||COALESCE(''''||OLD.SITUACAO_GERAL||'''','NULL')||','
||COALESCE(''''||OLD.OBS_SITUACAO_GERAL||'''','NULL')||','
||COALESCE(''''||OLD.ORIGEM||'''','NULL')||','
||COALESCE(''''||OLD.ACESSORIOS||'''','NULL')||','
||COALESCE(''''||OLD.DATA_ULTIMA_MANUTENCAO||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_BASE||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_EXPLOSIVO||'''','NULL')||','
||COALESCE(''''||OLD.COMPOSTO_QUIMICO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_FABRICACAO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_VALIDADE||'''','NULL')||','
||COALESCE(''''||OLD.ESTADO_GERAL||'''','NULL')||','
||COALESCE(''''||OLD.FABRICACAO||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_ESPARGIDORES||'''','NULL')||','
||COALESCE(''''||OLD.PROJETIL||'''','NULL')||','
||COALESCE(''''||OLD.DATA_NOTA_FISCAL||'''','NULL')||','
||COALESCE(OLD.QUANTIDADE,'NULL')||','
||COALESCE(''''||OLD.CNPJ_NOTA_FISCAL||'''','NULL')||','
||COALESCE(OLD.PESO,'NULL')||','
||COALESCE(''''||OLD.DATA_EXPEDICAO||'''','NULL')||','
||COALESCE(''''||OLD.REGISTRO_SINARM||'''','NULL')||','
||COALESCE(''''||OLD.EXPLOSIVO_TIPO_EMPREGO||'''','NULL')||','
||COALESCE(''''||OLD.EXPLOSIVO_COD_REFERENCIA||'''','NULL')||','
||COALESCE(''''||OLD.MUNICAO_EMPREGO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_DEV_CAUTELA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PATRIMONIO', OLD.IDPATRIMONIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PATRIMONIO_BI0 */
CREATE TRIGGER PATRIMONIO_BI0 FOR PATRIMONIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.IDPATRIMONIO,0)=0) THEN
  BEGIN
    NEW.IDPATRIMONIO = GEN_ID(COD_UP,0)||GEN_ID(IDPATRIMONIO,1);
  END

END
^

/* Trigger: PATRIMONIO_BI_LOG */
CREATE TRIGGER PATRIMONIO_BI_LOG FOR PATRIMONIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PATRIMONIO (IDPATRIMONIO,'
||' TOMBO,'
||' NUM_SERIAL,'
||' NOME,'
||' COMPLEMENTO,'
||' MARCA,'
||' MODELO,'
||' ESTADO,'
||' IDTIPO_PATRIMONIO,'
||' VALOR,'
||' UTILIZACAO,'
||' DISPONIBILIDADE,'
||' ID_UP,'
||' IDPOSTO_TRABALHO,'
||' OBSERVACAO,'
||' IDFUNCIONARIO_CADASTROU,'
||' DATA_CADASTRO,'
||' DATA_CAUTELA,'
||' CAUTELA,'
||' IDPOSTO_TRABALHO_CAUTELA,'
||' IDFUNCIONARIO_CAUTELA,'
||' MISSAO_CAUTELA,'
||' OBS_CAUTELA,'
||' NOTA_FISCAL,'
||' TIPO_PESSOA,'
||' NUMERO_ARMA,'
||' CAPACIDADE,'
||' NUMEROS_CANOS,'
||' NUMERO_RAIAS,'
||' REGISTRO_DATA_EMISSAO,'
||' REGISTRO_ESTADUAL,'
||' REGISTRO_ORGAO_EXPEDIDOR,'
||' REGISTRO_UF,'
||' CADASTRO_SINARM,'
||' ESPECIE,'
||' CALIBRE,'
||' PAIS_FABRICACAO,'
||' COMPRIMENTO_CANO,'
||' ARMA_ALMA,'
||' SENTIDO_RAIA,'
||' FUNCAO_ARMA,'
||' ACABAMENTO,'
||' SITUACAO_GERAL,'
||' OBS_SITUACAO_GERAL,'
||' ORIGEM,'
||' ACESSORIOS,'
||' DATA_ULTIMA_MANUTENCAO,'
||' TIPO_BASE,'
||' TIPO_EXPLOSIVO,'
||' COMPOSTO_QUIMICO,'
||' DATA_FABRICACAO,'
||' DATA_VALIDADE,'
||' ESTADO_GERAL,'
||' FABRICACAO,'
||' TIPO_ESPARGIDORES,'
||' PROJETIL,'
||' DATA_NOTA_FISCAL,'
||' QUANTIDADE,'
||' CNPJ_NOTA_FISCAL,'
||' PESO,'
||' DATA_EXPEDICAO,'
||' REGISTRO_SINARM,'
||' EXPLOSIVO_TIPO_EMPREGO,'
||' EXPLOSIVO_COD_REFERENCIA,'
||' MUNICAO_EMPREGO,'
||' DATA_DEV_CAUTELA) VALUES ('
||COALESCE(NEW.IDPATRIMONIO,'NULL')||','
||COALESCE(''''||NEW.TOMBO||'''','NULL')||','
||COALESCE(''''||NEW.NUM_SERIAL||'''','NULL')||','
||COALESCE(''''||NEW.NOME||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||NEW.MARCA||'''','NULL')||','
||COALESCE(''''||NEW.MODELO||'''','NULL')||','
||COALESCE(''''||NEW.ESTADO||'''','NULL')||','
||COALESCE(NEW.IDTIPO_PATRIMONIO,'NULL')||','
||COALESCE(NEW.VALOR,'NULL')||','
||COALESCE(''''||NEW.UTILIZACAO||'''','NULL')||','
||COALESCE(''''||NEW.DISPONIBILIDADE||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_CADASTROU,'NULL')||','
||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.CAUTELA||'''','NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO_CAUTELA,'NULL')||','
||COALESCE(NEW.IDFUNCIONARIO_CAUTELA,'NULL')||','
||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.OBS_CAUTELA||'''','NULL')||','
||COALESCE(''''||NEW.NOTA_FISCAL||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_PESSOA||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_ARMA||'''','NULL')||','
||COALESCE(NEW.CAPACIDADE,'NULL')||','
||COALESCE(NEW.NUMEROS_CANOS,'NULL')||','
||COALESCE(NEW.NUMERO_RAIAS,'NULL')||','
||COALESCE(''''||NEW.REGISTRO_DATA_EMISSAO||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_ESTADUAL||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_UF||'''','NULL')||','
||COALESCE(''''||NEW.CADASTRO_SINARM||'''','NULL')||','
||COALESCE(''''||NEW.ESPECIE||'''','NULL')||','
||COALESCE(''''||NEW.CALIBRE||'''','NULL')||','
||COALESCE(''''||NEW.PAIS_FABRICACAO||'''','NULL')||','
||COALESCE(''''||NEW.COMPRIMENTO_CANO||'''','NULL')||','
||COALESCE(''''||NEW.ARMA_ALMA||'''','NULL')||','
||COALESCE(''''||NEW.SENTIDO_RAIA||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO_ARMA||'''','NULL')||','
||COALESCE(''''||NEW.ACABAMENTO||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAO_GERAL||'''','NULL')||','
||COALESCE(''''||NEW.OBS_SITUACAO_GERAL||'''','NULL')||','
||COALESCE(''''||NEW.ORIGEM||'''','NULL')||','
||COALESCE(''''||NEW.ACESSORIOS||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ULTIMA_MANUTENCAO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_BASE||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_EXPLOSIVO||'''','NULL')||','
||COALESCE(''''||NEW.COMPOSTO_QUIMICO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_FABRICACAO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_VALIDADE||'''','NULL')||','
||COALESCE(''''||NEW.ESTADO_GERAL||'''','NULL')||','
||COALESCE(''''||NEW.FABRICACAO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_ESPARGIDORES||'''','NULL')||','
||COALESCE(''''||NEW.PROJETIL||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NOTA_FISCAL||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE,'NULL')||','
||COALESCE(''''||NEW.CNPJ_NOTA_FISCAL||'''','NULL')||','
||COALESCE(NEW.PESO,'NULL')||','
||COALESCE(''''||NEW.DATA_EXPEDICAO||'''','NULL')||','
||COALESCE(''''||NEW.REGISTRO_SINARM||'''','NULL')||','
||COALESCE(''''||NEW.EXPLOSIVO_TIPO_EMPREGO||'''','NULL')||','
||COALESCE(''''||NEW.EXPLOSIVO_COD_REFERENCIA||'''','NULL')||','
||COALESCE(''''||NEW.MUNICAO_EMPREGO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PATRIMONIO', NEW.IDPATRIMONIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PATRIMONIO_BU0 */
CREATE TRIGGER PATRIMONIO_BU0 FOR PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (OLD.QUANTIDADE > 0) THEN
  BEGIN
      IF (NEW.QUANTIDADE < 0) THEN
      BEGIN
        EXCEPTION messagem_diversas 'QUANTIDADE NEGATIVA.';
      END
    
      IF (NEW.QUANTIDADE = 0) THEN
      BEGIN
        NEW.CAUTELA = 'S';
        NEW.DATA_CAUTELA = CURRENT_DATE;
      END
  END
end
^

/* Trigger: PATRIMONIO_BU_LOG */
CREATE TRIGGER PATRIMONIO_BU_LOG FOR PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.TOMBO,'')<>COALESCE(OLD.TOMBO,'')) THEN TXT=TXT||',TOMBO = '||COALESCE(''''||NEW.TOMBO||'''','NULL');
IF (COALESCE(NEW.NUM_SERIAL,'')<>COALESCE(OLD.NUM_SERIAL,'')) THEN TXT=TXT||',NUM_SERIAL = '||COALESCE(''''||NEW.NUM_SERIAL||'''','NULL');
IF (COALESCE(NEW.NOME,'')<>COALESCE(OLD.NOME,'')) THEN TXT=TXT||',NOME = '||COALESCE(''''||NEW.NOME||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.MARCA,'')<>COALESCE(OLD.MARCA,'')) THEN TXT=TXT||',MARCA = '||COALESCE(''''||NEW.MARCA||'''','NULL');
IF (COALESCE(NEW.MODELO,'')<>COALESCE(OLD.MODELO,'')) THEN TXT=TXT||',MODELO = '||COALESCE(''''||NEW.MODELO||'''','NULL');
IF (COALESCE(NEW.ESTADO,'')<>COALESCE(OLD.ESTADO,'')) THEN TXT=TXT||',ESTADO = '||COALESCE(''''||NEW.ESTADO||'''','NULL');
IF (COALESCE(NEW.IDTIPO_PATRIMONIO,'')<>COALESCE(OLD.IDTIPO_PATRIMONIO,'')) THEN TXT=TXT||',IDTIPO_PATRIMONIO = '||COALESCE(NEW.IDTIPO_PATRIMONIO,'NULL');
IF (COALESCE(NEW.VALOR,'')<>COALESCE(OLD.VALOR,'')) THEN TXT=TXT||',VALOR = '||COALESCE(NEW.VALOR,'NULL');
IF (COALESCE(NEW.UTILIZACAO,'')<>COALESCE(OLD.UTILIZACAO,'')) THEN TXT=TXT||',UTILIZACAO = '||COALESCE(''''||NEW.UTILIZACAO||'''','NULL');
IF (COALESCE(NEW.DISPONIBILIDADE,'')<>COALESCE(OLD.DISPONIBILIDADE,'')) THEN TXT=TXT||',DISPONIBILIDADE = '||COALESCE(''''||NEW.DISPONIBILIDADE||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_CADASTROU,'')<>COALESCE(OLD.IDFUNCIONARIO_CADASTROU,'')) THEN TXT=TXT||',IDFUNCIONARIO_CADASTROU = '||COALESCE(NEW.IDFUNCIONARIO_CADASTROU,'NULL');
IF (COALESCE(NEW.DATA_CADASTRO,'')<>COALESCE(OLD.DATA_CADASTRO,'')) THEN TXT=TXT||',DATA_CADASTRO = '||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL');
IF (COALESCE(NEW.DATA_CAUTELA,'')<>COALESCE(OLD.DATA_CAUTELA,'')) THEN TXT=TXT||',DATA_CAUTELA = '||COALESCE(''''||NEW.DATA_CAUTELA||'''','NULL');
IF (COALESCE(NEW.CAUTELA,'')<>COALESCE(OLD.CAUTELA,'')) THEN TXT=TXT||',CAUTELA = '||COALESCE(''''||NEW.CAUTELA||'''','NULL');
IF (COALESCE(NEW.IDPOSTO_TRABALHO_CAUTELA,'')<>COALESCE(OLD.IDPOSTO_TRABALHO_CAUTELA,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO_CAUTELA = '||COALESCE(NEW.IDPOSTO_TRABALHO_CAUTELA,'NULL');
IF (COALESCE(NEW.IDFUNCIONARIO_CAUTELA,'')<>COALESCE(OLD.IDFUNCIONARIO_CAUTELA,'')) THEN TXT=TXT||',IDFUNCIONARIO_CAUTELA = '||COALESCE(NEW.IDFUNCIONARIO_CAUTELA,'NULL');
IF (COALESCE(NEW.MISSAO_CAUTELA,'')<>COALESCE(OLD.MISSAO_CAUTELA,'')) THEN TXT=TXT||',MISSAO_CAUTELA = '||COALESCE(''''||NEW.MISSAO_CAUTELA||'''','NULL');
IF (COALESCE(NEW.OBS_CAUTELA,'')<>COALESCE(OLD.OBS_CAUTELA,'')) THEN TXT=TXT||',OBS_CAUTELA = '||COALESCE(''''||NEW.OBS_CAUTELA||'''','NULL');
IF (COALESCE(NEW.NOTA_FISCAL,'')<>COALESCE(OLD.NOTA_FISCAL,'')) THEN TXT=TXT||',NOTA_FISCAL = '||COALESCE(''''||NEW.NOTA_FISCAL||'''','NULL');
IF (COALESCE(NEW.TIPO_PESSOA,'')<>COALESCE(OLD.TIPO_PESSOA,'')) THEN TXT=TXT||',TIPO_PESSOA = '||COALESCE(''''||NEW.TIPO_PESSOA||'''','NULL');
IF (COALESCE(NEW.NUMERO_ARMA,'')<>COALESCE(OLD.NUMERO_ARMA,'')) THEN TXT=TXT||',NUMERO_ARMA = '||COALESCE(''''||NEW.NUMERO_ARMA||'''','NULL');
IF (COALESCE(NEW.CAPACIDADE,'')<>COALESCE(OLD.CAPACIDADE,'')) THEN TXT=TXT||',CAPACIDADE = '||COALESCE(NEW.CAPACIDADE,'NULL');
IF (COALESCE(NEW.NUMEROS_CANOS,'')<>COALESCE(OLD.NUMEROS_CANOS,'')) THEN TXT=TXT||',NUMEROS_CANOS = '||COALESCE(NEW.NUMEROS_CANOS,'NULL');
IF (COALESCE(NEW.NUMERO_RAIAS,'')<>COALESCE(OLD.NUMERO_RAIAS,'')) THEN TXT=TXT||',NUMERO_RAIAS = '||COALESCE(NEW.NUMERO_RAIAS,'NULL');
IF (COALESCE(NEW.REGISTRO_DATA_EMISSAO,'')<>COALESCE(OLD.REGISTRO_DATA_EMISSAO,'')) THEN TXT=TXT||',REGISTRO_DATA_EMISSAO = '||COALESCE(''''||NEW.REGISTRO_DATA_EMISSAO||'''','NULL');
IF (COALESCE(NEW.REGISTRO_ESTADUAL,'')<>COALESCE(OLD.REGISTRO_ESTADUAL,'')) THEN TXT=TXT||',REGISTRO_ESTADUAL = '||COALESCE(''''||NEW.REGISTRO_ESTADUAL||'''','NULL');
IF (COALESCE(NEW.REGISTRO_ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.REGISTRO_ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',REGISTRO_ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.REGISTRO_ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.REGISTRO_UF,'')<>COALESCE(OLD.REGISTRO_UF,'')) THEN TXT=TXT||',REGISTRO_UF = '||COALESCE(''''||NEW.REGISTRO_UF||'''','NULL');
IF (COALESCE(NEW.CADASTRO_SINARM,'')<>COALESCE(OLD.CADASTRO_SINARM,'')) THEN TXT=TXT||',CADASTRO_SINARM = '||COALESCE(''''||NEW.CADASTRO_SINARM||'''','NULL');
IF (COALESCE(NEW.ESPECIE,'')<>COALESCE(OLD.ESPECIE,'')) THEN TXT=TXT||',ESPECIE = '||COALESCE(''''||NEW.ESPECIE||'''','NULL');
IF (COALESCE(NEW.CALIBRE,'')<>COALESCE(OLD.CALIBRE,'')) THEN TXT=TXT||',CALIBRE = '||COALESCE(''''||NEW.CALIBRE||'''','NULL');
IF (COALESCE(NEW.PAIS_FABRICACAO,'')<>COALESCE(OLD.PAIS_FABRICACAO,'')) THEN TXT=TXT||',PAIS_FABRICACAO = '||COALESCE(''''||NEW.PAIS_FABRICACAO||'''','NULL');
IF (COALESCE(NEW.COMPRIMENTO_CANO,'')<>COALESCE(OLD.COMPRIMENTO_CANO,'')) THEN TXT=TXT||',COMPRIMENTO_CANO = '||COALESCE(''''||NEW.COMPRIMENTO_CANO||'''','NULL');
IF (COALESCE(NEW.ARMA_ALMA,'')<>COALESCE(OLD.ARMA_ALMA,'')) THEN TXT=TXT||',ARMA_ALMA = '||COALESCE(''''||NEW.ARMA_ALMA||'''','NULL');
IF (COALESCE(NEW.SENTIDO_RAIA,'')<>COALESCE(OLD.SENTIDO_RAIA,'')) THEN TXT=TXT||',SENTIDO_RAIA = '||COALESCE(''''||NEW.SENTIDO_RAIA||'''','NULL');
IF (COALESCE(NEW.FUNCAO_ARMA,'')<>COALESCE(OLD.FUNCAO_ARMA,'')) THEN TXT=TXT||',FUNCAO_ARMA = '||COALESCE(''''||NEW.FUNCAO_ARMA||'''','NULL');
IF (COALESCE(NEW.ACABAMENTO,'')<>COALESCE(OLD.ACABAMENTO,'')) THEN TXT=TXT||',ACABAMENTO = '||COALESCE(''''||NEW.ACABAMENTO||'''','NULL');
IF (COALESCE(NEW.SITUACAO_GERAL,'')<>COALESCE(OLD.SITUACAO_GERAL,'')) THEN TXT=TXT||',SITUACAO_GERAL = '||COALESCE(''''||NEW.SITUACAO_GERAL||'''','NULL');
IF (COALESCE(NEW.OBS_SITUACAO_GERAL,'')<>COALESCE(OLD.OBS_SITUACAO_GERAL,'')) THEN TXT=TXT||',OBS_SITUACAO_GERAL = '||COALESCE(''''||NEW.OBS_SITUACAO_GERAL||'''','NULL');
IF (COALESCE(NEW.ORIGEM,'')<>COALESCE(OLD.ORIGEM,'')) THEN TXT=TXT||',ORIGEM = '||COALESCE(''''||NEW.ORIGEM||'''','NULL');
IF (COALESCE(NEW.ACESSORIOS,'')<>COALESCE(OLD.ACESSORIOS,'')) THEN TXT=TXT||',ACESSORIOS = '||COALESCE(''''||NEW.ACESSORIOS||'''','NULL');
IF (COALESCE(NEW.DATA_ULTIMA_MANUTENCAO,'')<>COALESCE(OLD.DATA_ULTIMA_MANUTENCAO,'')) THEN TXT=TXT||',DATA_ULTIMA_MANUTENCAO = '||COALESCE(''''||NEW.DATA_ULTIMA_MANUTENCAO||'''','NULL');
IF (COALESCE(NEW.TIPO_BASE,'')<>COALESCE(OLD.TIPO_BASE,'')) THEN TXT=TXT||',TIPO_BASE = '||COALESCE(''''||NEW.TIPO_BASE||'''','NULL');
IF (COALESCE(NEW.TIPO_EXPLOSIVO,'')<>COALESCE(OLD.TIPO_EXPLOSIVO,'')) THEN TXT=TXT||',TIPO_EXPLOSIVO = '||COALESCE(''''||NEW.TIPO_EXPLOSIVO||'''','NULL');
IF (COALESCE(NEW.COMPOSTO_QUIMICO,'')<>COALESCE(OLD.COMPOSTO_QUIMICO,'')) THEN TXT=TXT||',COMPOSTO_QUIMICO = '||COALESCE(''''||NEW.COMPOSTO_QUIMICO||'''','NULL');
IF (COALESCE(NEW.DATA_FABRICACAO,'')<>COALESCE(OLD.DATA_FABRICACAO,'')) THEN TXT=TXT||',DATA_FABRICACAO = '||COALESCE(''''||NEW.DATA_FABRICACAO||'''','NULL');
IF (COALESCE(NEW.DATA_VALIDADE,'')<>COALESCE(OLD.DATA_VALIDADE,'')) THEN TXT=TXT||',DATA_VALIDADE = '||COALESCE(''''||NEW.DATA_VALIDADE||'''','NULL');
IF (COALESCE(NEW.ESTADO_GERAL,'')<>COALESCE(OLD.ESTADO_GERAL,'')) THEN TXT=TXT||',ESTADO_GERAL = '||COALESCE(''''||NEW.ESTADO_GERAL||'''','NULL');
IF (COALESCE(NEW.FABRICACAO,'')<>COALESCE(OLD.FABRICACAO,'')) THEN TXT=TXT||',FABRICACAO = '||COALESCE(''''||NEW.FABRICACAO||'''','NULL');
IF (COALESCE(NEW.TIPO_ESPARGIDORES,'')<>COALESCE(OLD.TIPO_ESPARGIDORES,'')) THEN TXT=TXT||',TIPO_ESPARGIDORES = '||COALESCE(''''||NEW.TIPO_ESPARGIDORES||'''','NULL');
IF (COALESCE(NEW.PROJETIL,'')<>COALESCE(OLD.PROJETIL,'')) THEN TXT=TXT||',PROJETIL = '||COALESCE(''''||NEW.PROJETIL||'''','NULL');
IF (COALESCE(NEW.DATA_NOTA_FISCAL,'')<>COALESCE(OLD.DATA_NOTA_FISCAL,'')) THEN TXT=TXT||',DATA_NOTA_FISCAL = '||COALESCE(''''||NEW.DATA_NOTA_FISCAL||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE,'')<>COALESCE(OLD.QUANTIDADE,'')) THEN TXT=TXT||',QUANTIDADE = '||COALESCE(NEW.QUANTIDADE,'NULL');
IF (COALESCE(NEW.CNPJ_NOTA_FISCAL,'')<>COALESCE(OLD.CNPJ_NOTA_FISCAL,'')) THEN TXT=TXT||',CNPJ_NOTA_FISCAL = '||COALESCE(''''||NEW.CNPJ_NOTA_FISCAL||'''','NULL');
IF (COALESCE(NEW.PESO,'')<>COALESCE(OLD.PESO,'')) THEN TXT=TXT||',PESO = '||COALESCE(NEW.PESO,'NULL');
IF (COALESCE(NEW.DATA_EXPEDICAO,'')<>COALESCE(OLD.DATA_EXPEDICAO,'')) THEN TXT=TXT||',DATA_EXPEDICAO = '||COALESCE(''''||NEW.DATA_EXPEDICAO||'''','NULL');
IF (COALESCE(NEW.REGISTRO_SINARM,'')<>COALESCE(OLD.REGISTRO_SINARM,'')) THEN TXT=TXT||',REGISTRO_SINARM = '||COALESCE(''''||NEW.REGISTRO_SINARM||'''','NULL');
IF (COALESCE(NEW.EXPLOSIVO_TIPO_EMPREGO,'')<>COALESCE(OLD.EXPLOSIVO_TIPO_EMPREGO,'')) THEN TXT=TXT||',EXPLOSIVO_TIPO_EMPREGO = '||COALESCE(''''||NEW.EXPLOSIVO_TIPO_EMPREGO||'''','NULL');
IF (COALESCE(NEW.EXPLOSIVO_COD_REFERENCIA,'')<>COALESCE(OLD.EXPLOSIVO_COD_REFERENCIA,'')) THEN TXT=TXT||',EXPLOSIVO_COD_REFERENCIA = '||COALESCE(''''||NEW.EXPLOSIVO_COD_REFERENCIA||'''','NULL');
IF (COALESCE(NEW.MUNICAO_EMPREGO,'')<>COALESCE(OLD.MUNICAO_EMPREGO,'')) THEN TXT=TXT||',MUNICAO_EMPREGO = '||COALESCE(''''||NEW.MUNICAO_EMPREGO||'''','NULL');
IF (COALESCE(NEW.DATA_DEV_CAUTELA,'')<>COALESCE(OLD.DATA_DEV_CAUTELA,'')) THEN TXT=TXT||',DATA_DEV_CAUTELA = '||COALESCE(''''||NEW.DATA_DEV_CAUTELA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PATRIMONIO SET IDPATRIMONIO = '''||NEW.IDPATRIMONIO||''''||TXT||' WHERE IDPATRIMONIO = '''||NEW.IDPATRIMONIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PATRIMONIO', NEW.IDPATRIMONIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PATRIMONIO_IU_SINC_BLOB */
CREATE TRIGGER PATRIMONIO_IU_SINC_BLOB FOR PATRIMONIO
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.FOTO_PATRIMONIO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'PATRIMONIO', 'FOTO_PATRIMONIO', 'IDPATRIMONIO', NEW.IDPATRIMONIO);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.FOTO_PATRIMONIO IS NOT NULL) THEN
        BEGIN
            IF (OLD.FOTO_PATRIMONIO <> NEW.FOTO_PATRIMONIO) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'PATRIMONIO', 'FOTO_PATRIMONIO', 'IDPATRIMONIO', NEW.IDPATRIMONIO);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'PATRIMONIO', 'FOTO_PATRIMONIO', 'IDPATRIMONIO', NEW.IDPATRIMONIO);
        END

    END

   END

END
^

/* Trigger: PAVILHAO_AD_SINCRONISMO */
CREATE TRIGGER PAVILHAO_AD_SINCRONISMO FOR PAVILHAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PAVILHAO WHERE ID_PAVILHAO = '||OLD.ID_PAVILHAO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PAVILHAO_AI_SINCRONISMO */
CREATE TRIGGER PAVILHAO_AI_SINCRONISMO FOR PAVILHAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PAVILHAO (ID_PAVILHAO,'
||' PAVILHAO,'
||' ID_UP) VALUES ('
||COALESCE(NEW.ID_PAVILHAO,'NULL')||','
||COALESCE(''''||NEW.PAVILHAO||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PAVILHAO_AU_SINCRONISMO */
CREATE TRIGGER PAVILHAO_AU_SINCRONISMO FOR PAVILHAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.PAVILHAO,'')<>COALESCE(OLD.PAVILHAO,'')) THEN TXT=TXT||',PAVILHAO = '||COALESCE(''''||NEW.PAVILHAO||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PAVILHAO SET ID_PAVILHAO = '''||NEW.ID_PAVILHAO||''''||TXT||' WHERE ID_PAVILHAO = '''||NEW.ID_PAVILHAO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PAVILHAO_BD_LOG */
CREATE TRIGGER PAVILHAO_BD_LOG FOR PAVILHAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PAVILHAO (ID_PAVILHAO,'
||' PAVILHAO,'
||' ID_UP) VALUES ('
||COALESCE(OLD.ID_PAVILHAO,'NULL')||','
||COALESCE(''''||OLD.PAVILHAO||'''','NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PAVILHAO', OLD.ID_PAVILHAO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PAVILHAO_BI0 */
CREATE TRIGGER PAVILHAO_BI0 FOR PAVILHAO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_pavilhao IS null or (new.id_pavilhao = 0)  ) then
    new.id_pavilhao = gen_id (cod_up, 0) || gen_id (id_pavilhao, 1);
end
^

/* Trigger: PAVILHAO_BI_LOG */
CREATE TRIGGER PAVILHAO_BI_LOG FOR PAVILHAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PAVILHAO (ID_PAVILHAO,'
||' PAVILHAO,'
||' ID_UP) VALUES ('
||COALESCE(NEW.ID_PAVILHAO,'NULL')||','
||COALESCE(''''||NEW.PAVILHAO||'''','NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PAVILHAO', NEW.ID_PAVILHAO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PAVILHAO_BU_LOG */
CREATE TRIGGER PAVILHAO_BU_LOG FOR PAVILHAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.PAVILHAO,'')<>COALESCE(OLD.PAVILHAO,'')) THEN TXT=TXT||',PAVILHAO = '||COALESCE(''''||NEW.PAVILHAO||'''','NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PAVILHAO SET ID_PAVILHAO = '''||NEW.ID_PAVILHAO||''''||TXT||' WHERE ID_PAVILHAO = '''||NEW.ID_PAVILHAO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PAVILHAO', NEW.ID_PAVILHAO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PERMANENCIA_SCANER_AD_SINCRONIS */
CREATE TRIGGER PERMANENCIA_SCANER_AD_SINCRONIS FOR PERMANENCIA_SCANER
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PERMANENCIA_SCANER WHERE ID_PERMANENCIA_SCANER = '||OLD.ID_PERMANENCIA_SCANER||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PERMANENCIA_SCANER_AI_SINCRONIS */
CREATE TRIGGER PERMANENCIA_SCANER_AI_SINCRONIS FOR PERMANENCIA_SCANER
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PERMANENCIA_SCANER (ID_PERMANENCIA_SCANER,'
||' DESCRICAO_PERMANENCIA,'
||' ID_CONTROLE_PERMANENCIA) VALUES ('
||COALESCE(NEW.ID_PERMANENCIA_SCANER,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_PERMANENCIA||'''','NULL')||','
||COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PERMANENCIA_SCANER_AU_SINCRONIS */
CREATE TRIGGER PERMANENCIA_SCANER_AU_SINCRONIS FOR PERMANENCIA_SCANER
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_PERMANENCIA,'')<>COALESCE(OLD.DESCRICAO_PERMANENCIA,'')) THEN TXT=TXT||',DESCRICAO_PERMANENCIA = '||COALESCE(''''||NEW.DESCRICAO_PERMANENCIA||'''','NULL');
IF (COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'')<>COALESCE(OLD.ID_CONTROLE_PERMANENCIA,'')) THEN TXT=TXT||',ID_CONTROLE_PERMANENCIA = '||COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PERMANENCIA_SCANER SET ID_PERMANENCIA_SCANER = '''||NEW.ID_PERMANENCIA_SCANER||''''||TXT||' WHERE ID_PERMANENCIA_SCANER = '''||NEW.ID_PERMANENCIA_SCANER||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PERMANENCIA_SCANER_BD_LOG */
CREATE TRIGGER PERMANENCIA_SCANER_BD_LOG FOR PERMANENCIA_SCANER
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PERMANENCIA_SCANER (ID_PERMANENCIA_SCANER,'
||' DESCRICAO_PERMANENCIA,'
||' ID_CONTROLE_PERMANENCIA) VALUES ('
||COALESCE(OLD.ID_PERMANENCIA_SCANER,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO_PERMANENCIA||'''','NULL')||','
||COALESCE(OLD.ID_CONTROLE_PERMANENCIA,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PERMANENCIA_SCANER', OLD.ID_PERMANENCIA_SCANER,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PERMANENCIA_SCANER_BI0 */
CREATE TRIGGER PERMANENCIA_SCANER_BI0 FOR PERMANENCIA_SCANER
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
  if (coalesce(new.id_permanencia_scaner,0)=0) then
    new.id_permanencia_scaner = gen_id (cod_up, 0) || gen_id (idpermanencia_scaner, 1);
end
^

/* Trigger: PERMANENCIA_SCANER_BI_LOG */
CREATE TRIGGER PERMANENCIA_SCANER_BI_LOG FOR PERMANENCIA_SCANER
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PERMANENCIA_SCANER (ID_PERMANENCIA_SCANER,'
||' DESCRICAO_PERMANENCIA,'
||' ID_CONTROLE_PERMANENCIA) VALUES ('
||COALESCE(NEW.ID_PERMANENCIA_SCANER,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_PERMANENCIA||'''','NULL')||','
||COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PERMANENCIA_SCANER', NEW.ID_PERMANENCIA_SCANER,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PERMANENCIA_SCANER_BU_LOG */
CREATE TRIGGER PERMANENCIA_SCANER_BU_LOG FOR PERMANENCIA_SCANER
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_PERMANENCIA,'')<>COALESCE(OLD.DESCRICAO_PERMANENCIA,'')) THEN TXT=TXT||',DESCRICAO_PERMANENCIA = '||COALESCE(''''||NEW.DESCRICAO_PERMANENCIA||'''','NULL');
IF (COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'')<>COALESCE(OLD.ID_CONTROLE_PERMANENCIA,'')) THEN TXT=TXT||',ID_CONTROLE_PERMANENCIA = '||COALESCE(NEW.ID_CONTROLE_PERMANENCIA,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PERMANENCIA_SCANER SET ID_PERMANENCIA_SCANER = '''||NEW.ID_PERMANENCIA_SCANER||''''||TXT||' WHERE ID_PERMANENCIA_SCANER = '''||NEW.ID_PERMANENCIA_SCANER||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PERMANENCIA_SCANER', NEW.ID_PERMANENCIA_SCANER,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PERMANENCIA_SCANER_IU_SINC_BLOB */
CREATE TRIGGER PERMANENCIA_SCANER_IU_SINC_BLOB FOR PERMANENCIA_SCANER
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.DOC_SCANER IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'PERMANENCIA_SCANER', 'DOC_SCANER', 'ID_PERMANENCIA_SCANER', NEW.ID_PERMANENCIA_SCANER);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.DOC_SCANER IS NOT NULL) THEN
        BEGIN
            IF (OLD.DOC_SCANER <> NEW.DOC_SCANER) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'PERMANENCIA_SCANER', 'DOC_SCANER', 'ID_PERMANENCIA_SCANER', NEW.ID_PERMANENCIA_SCANER);
            END
        END
        ELSE
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'PERMANENCIA_SCANER', 'DOC_SCANER', 'ID_PERMANENCIA_SCANER', NEW.ID_PERMANENCIA_SCANER);
        END

    END

   END

END
^

/* Trigger: PLANILHA_DINAMICA_AD_SINCRONISM */
CREATE TRIGGER PLANILHA_DINAMICA_AD_SINCRONISM FOR PLANILHA_DINAMICA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-01 17:58:54.2080
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PLANILHA_DINAMICA WHERE IDPLANILHA_DINAMICA = '||OLD.IDPLANILHA_DINAMICA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PLANILHA_DINAMICA_AI_SINCRONISM */
CREATE TRIGGER PLANILHA_DINAMICA_AI_SINCRONISM FOR PLANILHA_DINAMICA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-01 17:58:54.2080

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PLANILHA_DINAMICA (IDPLANILHA_DINAMICA,'
||' NOME_RELATORIO,'
||' COLUNAS_VISIVEIS,'
||' CONDICAO_APLICADA,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' INDEX_TABELA,'
||' CONDICAO_VISUAL,'
||' INDEXFIELDNAMES) VALUES ('
||COALESCE(NEW.IDPLANILHA_DINAMICA,'NULL')||','
||COALESCE(''''||NEW.NOME_RELATORIO||'''','NULL')||','
||COALESCE(''''||NEW.COLUNAS_VISIVEIS||'''','NULL')||','
||COALESCE(''''||NEW.CONDICAO_APLICADA||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.INDEX_TABELA,'NULL')||','
||COALESCE(''''||NEW.CONDICAO_VISUAL||'''','NULL')||','
||COALESCE(''''||NEW.INDEXFIELDNAMES||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PLANILHA_DINAMICA_AU_SINCRONISM */
CREATE TRIGGER PLANILHA_DINAMICA_AU_SINCRONISM FOR PLANILHA_DINAMICA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-01 17:58:54.2080
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME_RELATORIO,'')<>COALESCE(OLD.NOME_RELATORIO,'')) THEN TXT=TXT||',NOME_RELATORIO = '||COALESCE(''''||NEW.NOME_RELATORIO||'''','NULL');
IF (COALESCE(NEW.COLUNAS_VISIVEIS,'')<>COALESCE(OLD.COLUNAS_VISIVEIS,'')) THEN TXT=TXT||',COLUNAS_VISIVEIS = '||COALESCE(''''||NEW.COLUNAS_VISIVEIS||'''','NULL');
IF (COALESCE(NEW.CONDICAO_APLICADA,'')<>COALESCE(OLD.CONDICAO_APLICADA,'')) THEN TXT=TXT||',CONDICAO_APLICADA = '||COALESCE(''''||NEW.CONDICAO_APLICADA||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.INDEX_TABELA,'')<>COALESCE(OLD.INDEX_TABELA,'')) THEN TXT=TXT||',INDEX_TABELA = '||COALESCE(NEW.INDEX_TABELA,'NULL');
IF (COALESCE(NEW.CONDICAO_VISUAL,'')<>COALESCE(OLD.CONDICAO_VISUAL,'')) THEN TXT=TXT||',CONDICAO_VISUAL = '||COALESCE(''''||NEW.CONDICAO_VISUAL||'''','NULL');
IF (COALESCE(NEW.INDEXFIELDNAMES,'')<>COALESCE(OLD.INDEXFIELDNAMES,'')) THEN TXT=TXT||',INDEXFIELDNAMES = '||COALESCE(''''||NEW.INDEXFIELDNAMES||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PLANILHA_DINAMICA SET IDPLANILHA_DINAMICA = '''||NEW.IDPLANILHA_DINAMICA||''''||TXT||' WHERE IDPLANILHA_DINAMICA = '''||NEW.IDPLANILHA_DINAMICA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PLANILHA_DINAMICA_BD_LOG */
CREATE TRIGGER PLANILHA_DINAMICA_BD_LOG FOR PLANILHA_DINAMICA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-01 17:58:13.8370

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PLANILHA_DINAMICA (IDPLANILHA_DINAMICA,'
||' NOME_RELATORIO,'
||' COLUNAS_VISIVEIS,'
||' CONDICAO_APLICADA,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' INDEX_TABELA,'
||' CONDICAO_VISUAL,'
||' INDEXFIELDNAMES) VALUES ('
||COALESCE(OLD.IDPLANILHA_DINAMICA,'NULL')||','
||COALESCE(''''||OLD.NOME_RELATORIO||'''','NULL')||','
||COALESCE(''''||OLD.COLUNAS_VISIVEIS||'''','NULL')||','
||COALESCE(''''||OLD.CONDICAO_APLICADA||'''','NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||','
||COALESCE(OLD.INDEX_TABELA,'NULL')||','
||COALESCE(''''||OLD.CONDICAO_VISUAL||'''','NULL')||','
||COALESCE(''''||OLD.INDEXFIELDNAMES||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PLANILHA_DINAMICA', OLD.IDPLANILHA_DINAMICA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PLANILHA_DINAMICA_BI */
CREATE TRIGGER PLANILHA_DINAMICA_BI FOR PLANILHA_DINAMICA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDPLANILHA_DINAMICA,0)=0) THEN
    NEW.IDPLANILHA_DINAMICA = GEN_ID(COD_UP,0)||GEN_ID(IDPLANILHA_DINAMICA,1);
END
^

/* Trigger: PLANILHA_DINAMICA_BI_LOG */
CREATE TRIGGER PLANILHA_DINAMICA_BI_LOG FOR PLANILHA_DINAMICA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-01 17:58:13.8370

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PLANILHA_DINAMICA (IDPLANILHA_DINAMICA,'
||' NOME_RELATORIO,'
||' COLUNAS_VISIVEIS,'
||' CONDICAO_APLICADA,'
||' DATA,'
||' ID_FUNCIONARIO,'
||' INDEX_TABELA,'
||' CONDICAO_VISUAL,'
||' INDEXFIELDNAMES) VALUES ('
||COALESCE(NEW.IDPLANILHA_DINAMICA,'NULL')||','
||COALESCE(''''||NEW.NOME_RELATORIO||'''','NULL')||','
||COALESCE(''''||NEW.COLUNAS_VISIVEIS||'''','NULL')||','
||COALESCE(''''||NEW.CONDICAO_APLICADA||'''','NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||','
||COALESCE(NEW.INDEX_TABELA,'NULL')||','
||COALESCE(''''||NEW.CONDICAO_VISUAL||'''','NULL')||','
||COALESCE(''''||NEW.INDEXFIELDNAMES||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PLANILHA_DINAMICA', NEW.IDPLANILHA_DINAMICA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PLANILHA_DINAMICA_BU_LOG */
CREATE TRIGGER PLANILHA_DINAMICA_BU_LOG FOR PLANILHA_DINAMICA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-01 17:58:13.8370
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME_RELATORIO,'')<>COALESCE(OLD.NOME_RELATORIO,'')) THEN TXT=TXT||',NOME_RELATORIO = '||COALESCE(''''||NEW.NOME_RELATORIO||'''','NULL');
IF (COALESCE(NEW.COLUNAS_VISIVEIS,'')<>COALESCE(OLD.COLUNAS_VISIVEIS,'')) THEN TXT=TXT||',COLUNAS_VISIVEIS = '||COALESCE(''''||NEW.COLUNAS_VISIVEIS||'''','NULL');
IF (COALESCE(NEW.CONDICAO_APLICADA,'')<>COALESCE(OLD.CONDICAO_APLICADA,'')) THEN TXT=TXT||',CONDICAO_APLICADA = '||COALESCE(''''||NEW.CONDICAO_APLICADA||'''','NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (COALESCE(NEW.INDEX_TABELA,'')<>COALESCE(OLD.INDEX_TABELA,'')) THEN TXT=TXT||',INDEX_TABELA = '||COALESCE(NEW.INDEX_TABELA,'NULL');
IF (COALESCE(NEW.CONDICAO_VISUAL,'')<>COALESCE(OLD.CONDICAO_VISUAL,'')) THEN TXT=TXT||',CONDICAO_VISUAL = '||COALESCE(''''||NEW.CONDICAO_VISUAL||'''','NULL');
IF (COALESCE(NEW.INDEXFIELDNAMES,'')<>COALESCE(OLD.INDEXFIELDNAMES,'')) THEN TXT=TXT||',INDEXFIELDNAMES = '||COALESCE(''''||NEW.INDEXFIELDNAMES||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PLANILHA_DINAMICA SET IDPLANILHA_DINAMICA = '''||NEW.IDPLANILHA_DINAMICA||''''||TXT||' WHERE IDPLANILHA_DINAMICA = '''||NEW.IDPLANILHA_DINAMICA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PLANILHA_DINAMICA', NEW.IDPLANILHA_DINAMICA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: POSTO_TRABALHO_AD_SINCRONISMO */
CREATE TRIGGER POSTO_TRABALHO_AD_SINCRONISMO FOR POSTO_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM POSTO_TRABALHO WHERE IDPOSTO_TRABALHO = '||OLD.IDPOSTO_TRABALHO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: POSTO_TRABALHO_AI_SINCRONISMO */
CREATE TRIGGER POSTO_TRABALHO_AI_SINCRONISMO FOR POSTO_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO POSTO_TRABALHO (IDPOSTO_TRABALHO,'
||' POSTO_TRABALHO,'
||' POSTO_ROTATIVO,'
||' HORAS_TRABALHO) VALUES ('
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.POSTO_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL')||','
||COALESCE(NEW.HORAS_TRABALHO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: POSTO_TRABALHO_AU_SINCRONISMO */
CREATE TRIGGER POSTO_TRABALHO_AU_SINCRONISMO FOR POSTO_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.POSTO_TRABALHO,'')<>COALESCE(OLD.POSTO_TRABALHO,'')) THEN TXT=TXT||',POSTO_TRABALHO = '||COALESCE(''''||NEW.POSTO_TRABALHO||'''','NULL');
IF (COALESCE(NEW.POSTO_ROTATIVO,'')<>COALESCE(OLD.POSTO_ROTATIVO,'')) THEN TXT=TXT||',POSTO_ROTATIVO = '||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL');
IF (COALESCE(NEW.HORAS_TRABALHO,'')<>COALESCE(OLD.HORAS_TRABALHO,'')) THEN TXT=TXT||',HORAS_TRABALHO = '||COALESCE(NEW.HORAS_TRABALHO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE POSTO_TRABALHO SET IDPOSTO_TRABALHO = '''||NEW.IDPOSTO_TRABALHO||''''||TXT||' WHERE IDPOSTO_TRABALHO = '''||NEW.IDPOSTO_TRABALHO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: POSTO_TRABALHO_BD_LOG */
CREATE TRIGGER POSTO_TRABALHO_BD_LOG FOR POSTO_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO POSTO_TRABALHO (IDPOSTO_TRABALHO,'
||' POSTO_TRABALHO,'
||' POSTO_ROTATIVO,'
||' HORAS_TRABALHO) VALUES ('
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.POSTO_TRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.POSTO_ROTATIVO||'''','NULL')||','
||COALESCE(OLD.HORAS_TRABALHO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'POSTO_TRABALHO', OLD.IDPOSTO_TRABALHO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: POSTO_TRABALHO_BI0 */
CREATE TRIGGER POSTO_TRABALHO_BI0 FOR POSTO_TRABALHO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDPOSTO_TRABALHO IS NULL OR (NEW.IDPOSTO_TRABALHO = 0)  ) THEN
    NEW.IDPOSTO_TRABALHO = GEN_ID (COD_UP, 0) || GEN_ID (IDPOSTO_TRABALHO, 1);
end
^

/* Trigger: POSTO_TRABALHO_BI_LOG */
CREATE TRIGGER POSTO_TRABALHO_BI_LOG FOR POSTO_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO POSTO_TRABALHO (IDPOSTO_TRABALHO,'
||' POSTO_TRABALHO,'
||' POSTO_ROTATIVO,'
||' HORAS_TRABALHO) VALUES ('
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.POSTO_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL')||','
||COALESCE(NEW.HORAS_TRABALHO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'POSTO_TRABALHO', NEW.IDPOSTO_TRABALHO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: POSTO_TRABALHO_BU_LOG */
CREATE TRIGGER POSTO_TRABALHO_BU_LOG FOR POSTO_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.POSTO_TRABALHO,'')<>COALESCE(OLD.POSTO_TRABALHO,'')) THEN TXT=TXT||',POSTO_TRABALHO = '||COALESCE(''''||NEW.POSTO_TRABALHO||'''','NULL');
IF (COALESCE(NEW.POSTO_ROTATIVO,'')<>COALESCE(OLD.POSTO_ROTATIVO,'')) THEN TXT=TXT||',POSTO_ROTATIVO = '||COALESCE(''''||NEW.POSTO_ROTATIVO||'''','NULL');
IF (COALESCE(NEW.HORAS_TRABALHO,'')<>COALESCE(OLD.HORAS_TRABALHO,'')) THEN TXT=TXT||',HORAS_TRABALHO = '||COALESCE(NEW.HORAS_TRABALHO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE POSTO_TRABALHO SET IDPOSTO_TRABALHO = '''||NEW.IDPOSTO_TRABALHO||''''||TXT||' WHERE IDPOSTO_TRABALHO = '''||NEW.IDPOSTO_TRABALHO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'POSTO_TRABALHO', NEW.IDPOSTO_TRABALHO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PROCEDENCIA_AD_SINCRONISMO */
CREATE TRIGGER PROCEDENCIA_AD_SINCRONISMO FOR PROCEDENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-21 15:13:20.2010
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PROCEDENCIA WHERE ID_PROCEDENCIA = '||OLD.ID_PROCEDENCIA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PROCEDENCIA_AI_SINCRONISMO */
CREATE TRIGGER PROCEDENCIA_AI_SINCRONISMO FOR PROCEDENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-21 15:13:20.2010

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PROCEDENCIA (ID_PROCEDENCIA,'
||' PROEDENCIA,'
||' CAPITAL,'
||' UF) VALUES ('
||COALESCE(NEW.ID_PROCEDENCIA,'NULL')||','
||COALESCE(''''||NEW.PROEDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.CAPITAL||'''','NULL')||','
||COALESCE(''''||NEW.UF||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PROCEDENCIA_AU_SINCRONISMO */
CREATE TRIGGER PROCEDENCIA_AU_SINCRONISMO FOR PROCEDENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-21 15:13:20.2010
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.PROEDENCIA,'')<>COALESCE(OLD.PROEDENCIA,'')) THEN TXT=TXT||',PROEDENCIA = '||COALESCE(''''||NEW.PROEDENCIA||'''','NULL');
IF (COALESCE(NEW.CAPITAL,'')<>COALESCE(OLD.CAPITAL,'')) THEN TXT=TXT||',CAPITAL = '||COALESCE(''''||NEW.CAPITAL||'''','NULL');
IF (COALESCE(NEW.UF,'')<>COALESCE(OLD.UF,'')) THEN TXT=TXT||',UF = '||COALESCE(''''||NEW.UF||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCEDENCIA SET ID_PROCEDENCIA = '''||NEW.ID_PROCEDENCIA||''''||TXT||' WHERE ID_PROCEDENCIA = '''||NEW.ID_PROCEDENCIA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PROCEDENCIA_BD_LOG */
CREATE TRIGGER PROCEDENCIA_BD_LOG FOR PROCEDENCIA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-21 15:16:05.3250

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCEDENCIA (ID_PROCEDENCIA,'
||' PROEDENCIA,'
||' CAPITAL,'
||' UF) VALUES ('
||COALESCE(OLD.ID_PROCEDENCIA,'NULL')||','
||COALESCE(''''||OLD.PROEDENCIA||'''','NULL')||','
||COALESCE(''''||OLD.CAPITAL||'''','NULL')||','
||COALESCE(''''||OLD.UF||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDENCIA', OLD.ID_PROCEDENCIA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCEDENCIA_BI0 */
CREATE TRIGGER PROCEDENCIA_BI0 FOR PROCEDENCIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_procedencia IS null or (new.id_procedencia = 0)  ) then
    new.id_procedencia = gen_id (cod_up, 0) || gen_id (id_procedencia, 1);
end
^

/* Trigger: PROCEDENCIA_BI_LOG */
CREATE TRIGGER PROCEDENCIA_BI_LOG FOR PROCEDENCIA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-21 15:16:05.3250

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCEDENCIA (ID_PROCEDENCIA,'
||' PROEDENCIA,'
||' CAPITAL,'
||' UF) VALUES ('
||COALESCE(NEW.ID_PROCEDENCIA,'NULL')||','
||COALESCE(''''||NEW.PROEDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.CAPITAL||'''','NULL')||','
||COALESCE(''''||NEW.UF||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDENCIA', NEW.ID_PROCEDENCIA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCEDENCIA_BU_LOG */
CREATE TRIGGER PROCEDENCIA_BU_LOG FOR PROCEDENCIA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-21 15:16:05.3250
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.PROEDENCIA,'')<>COALESCE(OLD.PROEDENCIA,'')) THEN TXT=TXT||',PROEDENCIA = '||COALESCE(''''||NEW.PROEDENCIA||'''','NULL');
IF (COALESCE(NEW.CAPITAL,'')<>COALESCE(OLD.CAPITAL,'')) THEN TXT=TXT||',CAPITAL = '||COALESCE(''''||NEW.CAPITAL||'''','NULL');
IF (COALESCE(NEW.UF,'')<>COALESCE(OLD.UF,'')) THEN TXT=TXT||',UF = '||COALESCE(''''||NEW.UF||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCEDENCIA SET ID_PROCEDENCIA = '''||NEW.ID_PROCEDENCIA||''''||TXT||' WHERE ID_PROCEDENCIA = '''||NEW.ID_PROCEDENCIA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDENCIA', NEW.ID_PROCEDENCIA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PROCEDIMENTOS_AD_SINCRONISMO */
CREATE TRIGGER PROCEDIMENTOS_AD_SINCRONISMO FOR PROCEDIMENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PROCEDIMENTOS WHERE IDPROCEDIMENTOS = '||OLD.IDPROCEDIMENTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PROCEDIMENTOS_AI_SINCRONISMO */
CREATE TRIGGER PROCEDIMENTOS_AI_SINCRONISMO FOR PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PROCEDIMENTOS (IDPROCEDIMENTOS,'
||' DESCRICAO,'
||' ENVOLVE_ADVOGADO,'
||' ENVOLVE_FUNCIONARIO,'
||' ENVOLVE_INTERNO,'
||' ENVOLVE_VISITANTE,'
||' APROVACAO_DIRETA,'
||' HORA_INICIAL,'
||' HORA_FINAL,'
||' OBSERVACAO,'
||' FUNCAO_FUNCIONARIO,'
||' ST,'
||' IDPROCEDIMENTOS_MESTRE) VALUES ('
||COALESCE(NEW.IDPROCEDIMENTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_ADVOGADO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_INTERNO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_VISITANTE||'''','NULL')||','
||COALESCE(''''||NEW.APROVACAO_DIRETA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FINAL||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(NEW.IDPROCEDIMENTOS_MESTRE,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PROCEDIMENTOS_AU_SINCRONISMO */
CREATE TRIGGER PROCEDIMENTOS_AU_SINCRONISMO FOR PROCEDIMENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_ADVOGADO,'')<>COALESCE(OLD.ENVOLVE_ADVOGADO,'')) THEN TXT=TXT||',ENVOLVE_ADVOGADO = '||COALESCE(''''||NEW.ENVOLVE_ADVOGADO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_FUNCIONARIO,'')<>COALESCE(OLD.ENVOLVE_FUNCIONARIO,'')) THEN TXT=TXT||',ENVOLVE_FUNCIONARIO = '||COALESCE(''''||NEW.ENVOLVE_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_INTERNO,'')<>COALESCE(OLD.ENVOLVE_INTERNO,'')) THEN TXT=TXT||',ENVOLVE_INTERNO = '||COALESCE(''''||NEW.ENVOLVE_INTERNO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_VISITANTE,'')<>COALESCE(OLD.ENVOLVE_VISITANTE,'')) THEN TXT=TXT||',ENVOLVE_VISITANTE = '||COALESCE(''''||NEW.ENVOLVE_VISITANTE||'''','NULL');
IF (COALESCE(NEW.APROVACAO_DIRETA,'')<>COALESCE(OLD.APROVACAO_DIRETA,'')) THEN TXT=TXT||',APROVACAO_DIRETA = '||COALESCE(''''||NEW.APROVACAO_DIRETA||'''','NULL');
IF (COALESCE(NEW.HORA_INICIAL,'')<>COALESCE(OLD.HORA_INICIAL,'')) THEN TXT=TXT||',HORA_INICIAL = '||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL');
IF (COALESCE(NEW.HORA_FINAL,'')<>COALESCE(OLD.HORA_FINAL,'')) THEN TXT=TXT||',HORA_FINAL = '||COALESCE(''''||NEW.HORA_FINAL||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.FUNCAO_FUNCIONARIO,'')<>COALESCE(OLD.FUNCAO_FUNCIONARIO,'')) THEN TXT=TXT||',FUNCAO_FUNCIONARIO = '||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.IDPROCEDIMENTOS_MESTRE,'')<>COALESCE(OLD.IDPROCEDIMENTOS_MESTRE,'')) THEN TXT=TXT||',IDPROCEDIMENTOS_MESTRE = '||COALESCE(NEW.IDPROCEDIMENTOS_MESTRE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCEDIMENTOS SET IDPROCEDIMENTOS = '''||NEW.IDPROCEDIMENTOS||''''||TXT||' WHERE IDPROCEDIMENTOS = '''||NEW.IDPROCEDIMENTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PROCEDIMENTOS_BD_LOG */
CREATE TRIGGER PROCEDIMENTOS_BD_LOG FOR PROCEDIMENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCEDIMENTOS (IDPROCEDIMENTOS,'
||' DESCRICAO,'
||' ENVOLVE_ADVOGADO,'
||' ENVOLVE_FUNCIONARIO,'
||' ENVOLVE_INTERNO,'
||' ENVOLVE_VISITANTE,'
||' APROVACAO_DIRETA,'
||' HORA_INICIAL,'
||' HORA_FINAL,'
||' OBSERVACAO,'
||' FUNCAO_FUNCIONARIO,'
||' ST,'
||' IDPROCEDIMENTOS_MESTRE) VALUES ('
||COALESCE(OLD.IDPROCEDIMENTOS,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||','
||COALESCE(''''||OLD.ENVOLVE_ADVOGADO||'''','NULL')||','
||COALESCE(''''||OLD.ENVOLVE_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||OLD.ENVOLVE_INTERNO||'''','NULL')||','
||COALESCE(''''||OLD.ENVOLVE_VISITANTE||'''','NULL')||','
||COALESCE(''''||OLD.APROVACAO_DIRETA||'''','NULL')||','
||COALESCE(''''||OLD.HORA_INICIAL||'''','NULL')||','
||COALESCE(''''||OLD.HORA_FINAL||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||OLD.FUNCAO_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||OLD.ST||'''','NULL')||','
||COALESCE(OLD.IDPROCEDIMENTOS_MESTRE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDIMENTOS', OLD.IDPROCEDIMENTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCEDIMENTOS_BI0 */
CREATE TRIGGER PROCEDIMENTOS_BI0 FOR PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
    if (NEW.idprocedimentos IS null or (new.idprocedimentos = 0)  ) then
    new.idprocedimentos = gen_id (cod_up, 0) || gen_id (idprocedimentos, 1);
end
^

/* Trigger: PROCEDIMENTOS_BI_LOG */
CREATE TRIGGER PROCEDIMENTOS_BI_LOG FOR PROCEDIMENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCEDIMENTOS (IDPROCEDIMENTOS,'
||' DESCRICAO,'
||' ENVOLVE_ADVOGADO,'
||' ENVOLVE_FUNCIONARIO,'
||' ENVOLVE_INTERNO,'
||' ENVOLVE_VISITANTE,'
||' APROVACAO_DIRETA,'
||' HORA_INICIAL,'
||' HORA_FINAL,'
||' OBSERVACAO,'
||' FUNCAO_FUNCIONARIO,'
||' ST,'
||' IDPROCEDIMENTOS_MESTRE) VALUES ('
||COALESCE(NEW.IDPROCEDIMENTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_ADVOGADO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_INTERNO||'''','NULL')||','
||COALESCE(''''||NEW.ENVOLVE_VISITANTE||'''','NULL')||','
||COALESCE(''''||NEW.APROVACAO_DIRETA||'''','NULL')||','
||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL')||','
||COALESCE(''''||NEW.HORA_FINAL||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL')||','
||COALESCE(''''||NEW.ST||'''','NULL')||','
||COALESCE(NEW.IDPROCEDIMENTOS_MESTRE,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDIMENTOS', NEW.IDPROCEDIMENTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCEDIMENTOS_BU_LOG */
CREATE TRIGGER PROCEDIMENTOS_BU_LOG FOR PROCEDIMENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_ADVOGADO,'')<>COALESCE(OLD.ENVOLVE_ADVOGADO,'')) THEN TXT=TXT||',ENVOLVE_ADVOGADO = '||COALESCE(''''||NEW.ENVOLVE_ADVOGADO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_FUNCIONARIO,'')<>COALESCE(OLD.ENVOLVE_FUNCIONARIO,'')) THEN TXT=TXT||',ENVOLVE_FUNCIONARIO = '||COALESCE(''''||NEW.ENVOLVE_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_INTERNO,'')<>COALESCE(OLD.ENVOLVE_INTERNO,'')) THEN TXT=TXT||',ENVOLVE_INTERNO = '||COALESCE(''''||NEW.ENVOLVE_INTERNO||'''','NULL');
IF (COALESCE(NEW.ENVOLVE_VISITANTE,'')<>COALESCE(OLD.ENVOLVE_VISITANTE,'')) THEN TXT=TXT||',ENVOLVE_VISITANTE = '||COALESCE(''''||NEW.ENVOLVE_VISITANTE||'''','NULL');
IF (COALESCE(NEW.APROVACAO_DIRETA,'')<>COALESCE(OLD.APROVACAO_DIRETA,'')) THEN TXT=TXT||',APROVACAO_DIRETA = '||COALESCE(''''||NEW.APROVACAO_DIRETA||'''','NULL');
IF (COALESCE(NEW.HORA_INICIAL,'')<>COALESCE(OLD.HORA_INICIAL,'')) THEN TXT=TXT||',HORA_INICIAL = '||COALESCE(''''||NEW.HORA_INICIAL||'''','NULL');
IF (COALESCE(NEW.HORA_FINAL,'')<>COALESCE(OLD.HORA_FINAL,'')) THEN TXT=TXT||',HORA_FINAL = '||COALESCE(''''||NEW.HORA_FINAL||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.FUNCAO_FUNCIONARIO,'')<>COALESCE(OLD.FUNCAO_FUNCIONARIO,'')) THEN TXT=TXT||',FUNCAO_FUNCIONARIO = '||COALESCE(''''||NEW.FUNCAO_FUNCIONARIO||'''','NULL');
IF (COALESCE(NEW.ST,'')<>COALESCE(OLD.ST,'')) THEN TXT=TXT||',ST = '||COALESCE(''''||NEW.ST||'''','NULL');
IF (COALESCE(NEW.IDPROCEDIMENTOS_MESTRE,'')<>COALESCE(OLD.IDPROCEDIMENTOS_MESTRE,'')) THEN TXT=TXT||',IDPROCEDIMENTOS_MESTRE = '||COALESCE(NEW.IDPROCEDIMENTOS_MESTRE,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCEDIMENTOS SET IDPROCEDIMENTOS = '''||NEW.IDPROCEDIMENTOS||''''||TXT||' WHERE IDPROCEDIMENTOS = '''||NEW.IDPROCEDIMENTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDIMENTOS', NEW.IDPROCEDIMENTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PROCEDIMENTO_POSTO_AD_SINCRONIS */
CREATE TRIGGER PROCEDIMENTO_POSTO_AD_SINCRONIS FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PROCEDIMENTO_POSTO WHERE IDPROCEDIMENTO_POSTO = '||OLD.IDPROCEDIMENTO_POSTO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PROCEDIMENTO_POSTO_AI_SINCRONIS */
CREATE TRIGGER PROCEDIMENTO_POSTO_AI_SINCRONIS FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PROCEDIMENTO_POSTO (IDPROCEDIMENTO_POSTO,'
||' IDPOSTO_TRABALHO,'
||' IDPROCEDIMENTO) VALUES ('
||COALESCE(NEW.IDPROCEDIMENTO_POSTO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.IDPROCEDIMENTO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PROCEDIMENTO_POSTO_AU_SINCRONIS */
CREATE TRIGGER PROCEDIMENTO_POSTO_AU_SINCRONIS FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.IDPROCEDIMENTO,'')<>COALESCE(OLD.IDPROCEDIMENTO,'')) THEN TXT=TXT||',IDPROCEDIMENTO = '||COALESCE(NEW.IDPROCEDIMENTO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCEDIMENTO_POSTO SET IDPROCEDIMENTO_POSTO = '''||NEW.IDPROCEDIMENTO_POSTO||''''||TXT||' WHERE IDPROCEDIMENTO_POSTO = '''||NEW.IDPROCEDIMENTO_POSTO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PROCEDIMENTO_POSTO_BD_LOG */
CREATE TRIGGER PROCEDIMENTO_POSTO_BD_LOG FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCEDIMENTO_POSTO (IDPROCEDIMENTO_POSTO,'
||' IDPOSTO_TRABALHO,'
||' IDPROCEDIMENTO) VALUES ('
||COALESCE(OLD.IDPROCEDIMENTO_POSTO,'NULL')||','
||COALESCE(OLD.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(OLD.IDPROCEDIMENTO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDIMENTO_POSTO', OLD.IDPROCEDIMENTO_POSTO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCEDIMENTO_POSTO_BI0 */
CREATE TRIGGER PROCEDIMENTO_POSTO_BI0 FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDPROCEDIMENTO_POSTO IS NULL OR (NEW.IDPROCEDIMENTO_POSTO = 0)  ) THEN
    NEW.IDPROCEDIMENTO_POSTO = GEN_ID (COD_UP, 0) || GEN_ID (IDPROCEDIMENTO_POSTO, 1);
end
^

/* Trigger: PROCEDIMENTO_POSTO_BI_LOG */
CREATE TRIGGER PROCEDIMENTO_POSTO_BI_LOG FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCEDIMENTO_POSTO (IDPROCEDIMENTO_POSTO,'
||' IDPOSTO_TRABALHO,'
||' IDPROCEDIMENTO) VALUES ('
||COALESCE(NEW.IDPROCEDIMENTO_POSTO,'NULL')||','
||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL')||','
||COALESCE(NEW.IDPROCEDIMENTO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDIMENTO_POSTO', NEW.IDPROCEDIMENTO_POSTO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCEDIMENTO_POSTO_BU_LOG */
CREATE TRIGGER PROCEDIMENTO_POSTO_BU_LOG FOR PROCEDIMENTO_POSTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDPOSTO_TRABALHO,'')<>COALESCE(OLD.IDPOSTO_TRABALHO,'')) THEN TXT=TXT||',IDPOSTO_TRABALHO = '||COALESCE(NEW.IDPOSTO_TRABALHO,'NULL');
IF (COALESCE(NEW.IDPROCEDIMENTO,'')<>COALESCE(OLD.IDPROCEDIMENTO,'')) THEN TXT=TXT||',IDPROCEDIMENTO = '||COALESCE(NEW.IDPROCEDIMENTO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCEDIMENTO_POSTO SET IDPROCEDIMENTO_POSTO = '''||NEW.IDPROCEDIMENTO_POSTO||''''||TXT||' WHERE IDPROCEDIMENTO_POSTO = '''||NEW.IDPROCEDIMENTO_POSTO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCEDIMENTO_POSTO', NEW.IDPROCEDIMENTO_POSTO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PROCESSO_AD_SINCRONISMO */
CREATE TRIGGER PROCESSO_AD_SINCRONISMO FOR PROCESSO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PROCESSO WHERE IDPROCESSO = '||OLD.IDPROCESSO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PROCESSO_AI_SINCRONISMO */
CREATE TRIGGER PROCESSO_AI_SINCRONISMO FOR PROCESSO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PROCESSO (IDPROCESSO,'
||' IDINTERNO,'
||' OBSERVACAO,'
||' TOTAL_PENA_ANO,'
||' TOTAL_PENA_MES,'
||' TOTAL_PENA_DIA,'
||' IDCOMARCA,'
||' VARA,'
||' PRISAO,'
||' REU,'
||' NPROCESSO,'
||' GR,'
||' SITUACAOJURIDICA,'
||' TIPOJUSTICA,'
||' DATA_PROCESSO,'
||' PARTICIPACAO_CRIME) VALUES ('
||COALESCE(NEW.IDPROCESSO,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.TOTAL_PENA_ANO,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_MES,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_DIA,'NULL')||','
||COALESCE(NEW.IDCOMARCA,'NULL')||','
||COALESCE(''''||NEW.VARA||'''','NULL')||','
||COALESCE(''''||NEW.PRISAO||'''','NULL')||','
||COALESCE(''''||NEW.REU||'''','NULL')||','
||COALESCE(''''||NEW.NPROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.GR||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL')||','
||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_PROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.PARTICIPACAO_CRIME||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PROCESSO_AU_SINCRONISMO */
CREATE TRIGGER PROCESSO_AU_SINCRONISMO FOR PROCESSO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.TOTAL_PENA_ANO,'')<>COALESCE(OLD.TOTAL_PENA_ANO,'')) THEN TXT=TXT||',TOTAL_PENA_ANO = '||COALESCE(NEW.TOTAL_PENA_ANO,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_MES,'')<>COALESCE(OLD.TOTAL_PENA_MES,'')) THEN TXT=TXT||',TOTAL_PENA_MES = '||COALESCE(NEW.TOTAL_PENA_MES,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_DIA,'')<>COALESCE(OLD.TOTAL_PENA_DIA,'')) THEN TXT=TXT||',TOTAL_PENA_DIA = '||COALESCE(NEW.TOTAL_PENA_DIA,'NULL');
IF (COALESCE(NEW.IDCOMARCA,'')<>COALESCE(OLD.IDCOMARCA,'')) THEN TXT=TXT||',IDCOMARCA = '||COALESCE(NEW.IDCOMARCA,'NULL');
IF (COALESCE(NEW.VARA,'')<>COALESCE(OLD.VARA,'')) THEN TXT=TXT||',VARA = '||COALESCE(''''||NEW.VARA||'''','NULL');
IF (COALESCE(NEW.PRISAO,'')<>COALESCE(OLD.PRISAO,'')) THEN TXT=TXT||',PRISAO = '||COALESCE(''''||NEW.PRISAO||'''','NULL');
IF (COALESCE(NEW.REU,'')<>COALESCE(OLD.REU,'')) THEN TXT=TXT||',REU = '||COALESCE(''''||NEW.REU||'''','NULL');
IF (COALESCE(NEW.NPROCESSO,'')<>COALESCE(OLD.NPROCESSO,'')) THEN TXT=TXT||',NPROCESSO = '||COALESCE(''''||NEW.NPROCESSO||'''','NULL');
IF (COALESCE(NEW.GR,'')<>COALESCE(OLD.GR,'')) THEN TXT=TXT||',GR = '||COALESCE(''''||NEW.GR||'''','NULL');
IF (COALESCE(NEW.SITUACAOJURIDICA,'')<>COALESCE(OLD.SITUACAOJURIDICA,'')) THEN TXT=TXT||',SITUACAOJURIDICA = '||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL');
IF (COALESCE(NEW.TIPOJUSTICA,'')<>COALESCE(OLD.TIPOJUSTICA,'')) THEN TXT=TXT||',TIPOJUSTICA = '||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL');
IF (COALESCE(NEW.DATA_PROCESSO,'')<>COALESCE(OLD.DATA_PROCESSO,'')) THEN TXT=TXT||',DATA_PROCESSO = '||COALESCE(''''||NEW.DATA_PROCESSO||'''','NULL');
IF (COALESCE(NEW.PARTICIPACAO_CRIME,'')<>COALESCE(OLD.PARTICIPACAO_CRIME,'')) THEN TXT=TXT||',PARTICIPACAO_CRIME = '||COALESCE(''''||NEW.PARTICIPACAO_CRIME||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCESSO SET IDPROCESSO = '''||NEW.IDPROCESSO||''''||TXT||' WHERE IDPROCESSO = '''||NEW.IDPROCESSO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PROCESSO_BD_LOG */
CREATE TRIGGER PROCESSO_BD_LOG FOR PROCESSO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCESSO (IDPROCESSO,'
||' IDINTERNO,'
||' OBSERVACAO,'
||' TOTAL_PENA_ANO,'
||' TOTAL_PENA_MES,'
||' TOTAL_PENA_DIA,'
||' IDCOMARCA,'
||' VARA,'
||' PRISAO,'
||' REU,'
||' NPROCESSO,'
||' GR,'
||' SITUACAOJURIDICA,'
||' TIPOJUSTICA,'
||' DATA_PROCESSO,'
||' PARTICIPACAO_CRIME) VALUES ('
||COALESCE(OLD.IDPROCESSO,'NULL')||','
||COALESCE(OLD.IDINTERNO,'NULL')||','
||COALESCE(''''||OLD.OBSERVACAO||'''','NULL')||','
||COALESCE(OLD.TOTAL_PENA_ANO,'NULL')||','
||COALESCE(OLD.TOTAL_PENA_MES,'NULL')||','
||COALESCE(OLD.TOTAL_PENA_DIA,'NULL')||','
||COALESCE(OLD.IDCOMARCA,'NULL')||','
||COALESCE(''''||OLD.VARA||'''','NULL')||','
||COALESCE(''''||OLD.PRISAO||'''','NULL')||','
||COALESCE(''''||OLD.REU||'''','NULL')||','
||COALESCE(''''||OLD.NPROCESSO||'''','NULL')||','
||COALESCE(''''||OLD.GR||'''','NULL')||','
||COALESCE(''''||OLD.SITUACAOJURIDICA||'''','NULL')||','
||COALESCE(''''||OLD.TIPOJUSTICA||'''','NULL')||','
||COALESCE(''''||OLD.DATA_PROCESSO||'''','NULL')||','
||COALESCE(''''||OLD.PARTICIPACAO_CRIME||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCESSO', OLD.IDPROCESSO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCESSO_BI0 */
CREATE TRIGGER PROCESSO_BI0 FOR PROCESSO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
    if (NEW.idprocesso IS null or (new.idprocesso = 0)  ) then
    new.idprocesso = gen_id (cod_up, 0) || gen_id (id_processo, 1);
end
^

/* Trigger: PROCESSO_BI_LOG */
CREATE TRIGGER PROCESSO_BI_LOG FOR PROCESSO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROCESSO (IDPROCESSO,'
||' IDINTERNO,'
||' OBSERVACAO,'
||' TOTAL_PENA_ANO,'
||' TOTAL_PENA_MES,'
||' TOTAL_PENA_DIA,'
||' IDCOMARCA,'
||' VARA,'
||' PRISAO,'
||' REU,'
||' NPROCESSO,'
||' GR,'
||' SITUACAOJURIDICA,'
||' TIPOJUSTICA,'
||' DATA_PROCESSO,'
||' PARTICIPACAO_CRIME) VALUES ('
||COALESCE(NEW.IDPROCESSO,'NULL')||','
||COALESCE(NEW.IDINTERNO,'NULL')||','
||COALESCE(''''||NEW.OBSERVACAO||'''','NULL')||','
||COALESCE(NEW.TOTAL_PENA_ANO,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_MES,'NULL')||','
||COALESCE(NEW.TOTAL_PENA_DIA,'NULL')||','
||COALESCE(NEW.IDCOMARCA,'NULL')||','
||COALESCE(''''||NEW.VARA||'''','NULL')||','
||COALESCE(''''||NEW.PRISAO||'''','NULL')||','
||COALESCE(''''||NEW.REU||'''','NULL')||','
||COALESCE(''''||NEW.NPROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.GR||'''','NULL')||','
||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL')||','
||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_PROCESSO||'''','NULL')||','
||COALESCE(''''||NEW.PARTICIPACAO_CRIME||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCESSO', NEW.IDPROCESSO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROCESSO_BU_LOG */
CREATE TRIGGER PROCESSO_BU_LOG FOR PROCESSO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDINTERNO,'')<>COALESCE(OLD.IDINTERNO,'')) THEN TXT=TXT||',IDINTERNO = '||COALESCE(NEW.IDINTERNO,'NULL');
IF (COALESCE(NEW.OBSERVACAO,'')<>COALESCE(OLD.OBSERVACAO,'')) THEN TXT=TXT||',OBSERVACAO = '||COALESCE(''''||NEW.OBSERVACAO||'''','NULL');
IF (COALESCE(NEW.TOTAL_PENA_ANO,'')<>COALESCE(OLD.TOTAL_PENA_ANO,'')) THEN TXT=TXT||',TOTAL_PENA_ANO = '||COALESCE(NEW.TOTAL_PENA_ANO,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_MES,'')<>COALESCE(OLD.TOTAL_PENA_MES,'')) THEN TXT=TXT||',TOTAL_PENA_MES = '||COALESCE(NEW.TOTAL_PENA_MES,'NULL');
IF (COALESCE(NEW.TOTAL_PENA_DIA,'')<>COALESCE(OLD.TOTAL_PENA_DIA,'')) THEN TXT=TXT||',TOTAL_PENA_DIA = '||COALESCE(NEW.TOTAL_PENA_DIA,'NULL');
IF (COALESCE(NEW.IDCOMARCA,'')<>COALESCE(OLD.IDCOMARCA,'')) THEN TXT=TXT||',IDCOMARCA = '||COALESCE(NEW.IDCOMARCA,'NULL');
IF (COALESCE(NEW.VARA,'')<>COALESCE(OLD.VARA,'')) THEN TXT=TXT||',VARA = '||COALESCE(''''||NEW.VARA||'''','NULL');
IF (COALESCE(NEW.PRISAO,'')<>COALESCE(OLD.PRISAO,'')) THEN TXT=TXT||',PRISAO = '||COALESCE(''''||NEW.PRISAO||'''','NULL');
IF (COALESCE(NEW.REU,'')<>COALESCE(OLD.REU,'')) THEN TXT=TXT||',REU = '||COALESCE(''''||NEW.REU||'''','NULL');
IF (COALESCE(NEW.NPROCESSO,'')<>COALESCE(OLD.NPROCESSO,'')) THEN TXT=TXT||',NPROCESSO = '||COALESCE(''''||NEW.NPROCESSO||'''','NULL');
IF (COALESCE(NEW.GR,'')<>COALESCE(OLD.GR,'')) THEN TXT=TXT||',GR = '||COALESCE(''''||NEW.GR||'''','NULL');
IF (COALESCE(NEW.SITUACAOJURIDICA,'')<>COALESCE(OLD.SITUACAOJURIDICA,'')) THEN TXT=TXT||',SITUACAOJURIDICA = '||COALESCE(''''||NEW.SITUACAOJURIDICA||'''','NULL');
IF (COALESCE(NEW.TIPOJUSTICA,'')<>COALESCE(OLD.TIPOJUSTICA,'')) THEN TXT=TXT||',TIPOJUSTICA = '||COALESCE(''''||NEW.TIPOJUSTICA||'''','NULL');
IF (COALESCE(NEW.DATA_PROCESSO,'')<>COALESCE(OLD.DATA_PROCESSO,'')) THEN TXT=TXT||',DATA_PROCESSO = '||COALESCE(''''||NEW.DATA_PROCESSO||'''','NULL');
IF (COALESCE(NEW.PARTICIPACAO_CRIME,'')<>COALESCE(OLD.PARTICIPACAO_CRIME,'')) THEN TXT=TXT||',PARTICIPACAO_CRIME = '||COALESCE(''''||NEW.PARTICIPACAO_CRIME||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROCESSO SET IDPROCESSO = '''||NEW.IDPROCESSO||''''||TXT||' WHERE IDPROCESSO = '''||NEW.IDPROCESSO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROCESSO', NEW.IDPROCESSO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: PROFISSAO_AD_SINCRONISMO */
CREATE TRIGGER PROFISSAO_AD_SINCRONISMO FOR PROFISSAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM PROFISSAO WHERE ID_PROFISSAO = '||OLD.ID_PROFISSAO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: PROFISSAO_AI_SINCRONISMO */
CREATE TRIGGER PROFISSAO_AI_SINCRONISMO FOR PROFISSAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO PROFISSAO (ID_PROFISSAO,'
||' PROFISSAO) VALUES ('
||COALESCE(NEW.ID_PROFISSAO,'NULL')||','
||COALESCE(''''||NEW.PROFISSAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: PROFISSAO_AU_SINCRONISMO */
CREATE TRIGGER PROFISSAO_AU_SINCRONISMO FOR PROFISSAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.PROFISSAO,'')<>COALESCE(OLD.PROFISSAO,'')) THEN TXT=TXT||',PROFISSAO = '||COALESCE(''''||NEW.PROFISSAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROFISSAO SET ID_PROFISSAO = '''||NEW.ID_PROFISSAO||''''||TXT||' WHERE ID_PROFISSAO = '''||NEW.ID_PROFISSAO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: PROFISSAO_BD_LOG */
CREATE TRIGGER PROFISSAO_BD_LOG FOR PROFISSAO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROFISSAO (ID_PROFISSAO,'
||' PROFISSAO) VALUES ('
||COALESCE(OLD.ID_PROFISSAO,'NULL')||','
||COALESCE(''''||OLD.PROFISSAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROFISSAO', OLD.ID_PROFISSAO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROFISSAO_BI0 */
CREATE TRIGGER PROFISSAO_BI0 FOR PROFISSAO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_profissao IS null or (new.id_profissao = 0)  ) then
    new.id_profissao = gen_id (cod_up, 0) || gen_id (id_proffissao, 1);
end
^

/* Trigger: PROFISSAO_BI_LOG */
CREATE TRIGGER PROFISSAO_BI_LOG FOR PROFISSAO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO PROFISSAO (ID_PROFISSAO,'
||' PROFISSAO) VALUES ('
||COALESCE(NEW.ID_PROFISSAO,'NULL')||','
||COALESCE(''''||NEW.PROFISSAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROFISSAO', NEW.ID_PROFISSAO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: PROFISSAO_BU_LOG */
CREATE TRIGGER PROFISSAO_BU_LOG FOR PROFISSAO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.PROFISSAO,'')<>COALESCE(OLD.PROFISSAO,'')) THEN TXT=TXT||',PROFISSAO = '||COALESCE(''''||NEW.PROFISSAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE PROFISSAO SET ID_PROFISSAO = '''||NEW.ID_PROFISSAO||''''||TXT||' WHERE ID_PROFISSAO = '''||NEW.ID_PROFISSAO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'PROFISSAO', NEW.ID_PROFISSAO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: QUESTIONAMENTO_AD_SINCRONISMO */
CREATE TRIGGER QUESTIONAMENTO_AD_SINCRONISMO FOR QUESTIONAMENTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM QUESTIONAMENTO WHERE IDQUESTIONAMENTO = '||OLD.IDQUESTIONAMENTO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: QUESTIONAMENTO_AI_SINCRONISMO */
CREATE TRIGGER QUESTIONAMENTO_AI_SINCRONISMO FOR QUESTIONAMENTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO QUESTIONAMENTO (IDQUESTIONAMENTO,'
||' IDOCORRENCIA,'
||' PERGUNTA,'
||' TIPO_RESPOSTA,'
||' RESPOSTA) VALUES ('
||COALESCE(NEW.IDQUESTIONAMENTO,'NULL')||','
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||NEW.PERGUNTA||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL')||','
||COALESCE(''''||NEW.RESPOSTA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: QUESTIONAMENTO_AU_SINCRONISMO */
CREATE TRIGGER QUESTIONAMENTO_AU_SINCRONISMO FOR QUESTIONAMENTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.IDOCORRENCIA,'')<>COALESCE(OLD.IDOCORRENCIA,'')) THEN TXT=TXT||',IDOCORRENCIA = '||COALESCE(NEW.IDOCORRENCIA,'NULL');
IF (COALESCE(NEW.PERGUNTA,'')<>COALESCE(OLD.PERGUNTA,'')) THEN TXT=TXT||',PERGUNTA = '||COALESCE(''''||NEW.PERGUNTA||'''','NULL');
IF (COALESCE(NEW.TIPO_RESPOSTA,'')<>COALESCE(OLD.TIPO_RESPOSTA,'')) THEN TXT=TXT||',TIPO_RESPOSTA = '||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL');
IF (COALESCE(NEW.RESPOSTA,'')<>COALESCE(OLD.RESPOSTA,'')) THEN TXT=TXT||',RESPOSTA = '||COALESCE(''''||NEW.RESPOSTA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE QUESTIONAMENTO SET IDQUESTIONAMENTO = '''||NEW.IDQUESTIONAMENTO||''''||TXT||' WHERE IDQUESTIONAMENTO = '''||NEW.IDQUESTIONAMENTO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: QUESTIONAMENTO_BD_LOG */
CREATE TRIGGER QUESTIONAMENTO_BD_LOG FOR QUESTIONAMENTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO QUESTIONAMENTO (IDQUESTIONAMENTO,'
||' IDOCORRENCIA,'
||' PERGUNTA,'
||' TIPO_RESPOSTA,'
||' RESPOSTA) VALUES ('
||COALESCE(OLD.IDQUESTIONAMENTO,'NULL')||','
||COALESCE(OLD.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||OLD.PERGUNTA||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_RESPOSTA||'''','NULL')||','
||COALESCE(''''||OLD.RESPOSTA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'QUESTIONAMENTO', OLD.IDQUESTIONAMENTO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: QUESTIONAMENTO_BI0 */
CREATE TRIGGER QUESTIONAMENTO_BI0 FOR QUESTIONAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.IDQUESTIONAMENTO IS NULL OR (NEW.IDQUESTIONAMENTO = 0)  ) THEN
    NEW.IDQUESTIONAMENTO = GEN_ID (COD_UP, 0) || GEN_ID (IDQUESTIONAMENTO, 1);
end
^

/* Trigger: QUESTIONAMENTO_BI_LOG */
CREATE TRIGGER QUESTIONAMENTO_BI_LOG FOR QUESTIONAMENTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO QUESTIONAMENTO (IDQUESTIONAMENTO,'
||' IDOCORRENCIA,'
||' PERGUNTA,'
||' TIPO_RESPOSTA,'
||' RESPOSTA) VALUES ('
||COALESCE(NEW.IDQUESTIONAMENTO,'NULL')||','
||COALESCE(NEW.IDOCORRENCIA,'NULL')||','
||COALESCE(''''||NEW.PERGUNTA||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL')||','
||COALESCE(''''||NEW.RESPOSTA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'QUESTIONAMENTO', NEW.IDQUESTIONAMENTO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: QUESTIONAMENTO_BU_LOG */
CREATE TRIGGER QUESTIONAMENTO_BU_LOG FOR QUESTIONAMENTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.IDOCORRENCIA,'')<>COALESCE(OLD.IDOCORRENCIA,'')) THEN TXT=TXT||',IDOCORRENCIA = '||COALESCE(NEW.IDOCORRENCIA,'NULL');
IF (COALESCE(NEW.PERGUNTA,'')<>COALESCE(OLD.PERGUNTA,'')) THEN TXT=TXT||',PERGUNTA = '||COALESCE(''''||NEW.PERGUNTA||'''','NULL');
IF (COALESCE(NEW.TIPO_RESPOSTA,'')<>COALESCE(OLD.TIPO_RESPOSTA,'')) THEN TXT=TXT||',TIPO_RESPOSTA = '||COALESCE(''''||NEW.TIPO_RESPOSTA||'''','NULL');
IF (COALESCE(NEW.RESPOSTA,'')<>COALESCE(OLD.RESPOSTA,'')) THEN TXT=TXT||',RESPOSTA = '||COALESCE(''''||NEW.RESPOSTA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE QUESTIONAMENTO SET IDQUESTIONAMENTO = '''||NEW.IDQUESTIONAMENTO||''''||TXT||' WHERE IDQUESTIONAMENTO = '''||NEW.IDQUESTIONAMENTO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'QUESTIONAMENTO', NEW.IDQUESTIONAMENTO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: RACA_AD_SINCRONISMO */
CREATE TRIGGER RACA_AD_SINCRONISMO FOR RACA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM RACA WHERE ID_RACA = '||OLD.ID_RACA||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: RACA_AI_SINCRONISMO */
CREATE TRIGGER RACA_AI_SINCRONISMO FOR RACA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO RACA (ID_RACA,'
||' RACA) VALUES ('
||COALESCE(NEW.ID_RACA,'NULL')||','
||COALESCE(''''||NEW.RACA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: RACA_AU_SINCRONISMO */
CREATE TRIGGER RACA_AU_SINCRONISMO FOR RACA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.RACA,'')<>COALESCE(OLD.RACA,'')) THEN TXT=TXT||',RACA = '||COALESCE(''''||NEW.RACA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE RACA SET ID_RACA = '''||NEW.ID_RACA||''''||TXT||' WHERE ID_RACA = '''||NEW.ID_RACA||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: RACA_BD_LOG */
CREATE TRIGGER RACA_BD_LOG FOR RACA
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO RACA (ID_RACA,'
||' RACA) VALUES ('
||COALESCE(OLD.ID_RACA,'NULL')||','
||COALESCE(''''||OLD.RACA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'RACA', OLD.ID_RACA,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: RACA_BI0 */
CREATE TRIGGER RACA_BI0 FOR RACA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_raca IS null or (new.id_raca = 0)  ) then
    new.id_raca = gen_id (cod_up, 0) || gen_id (id_raca, 1);
end
^

/* Trigger: RACA_BI_LOG */
CREATE TRIGGER RACA_BI_LOG FOR RACA
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO RACA (ID_RACA,'
||' RACA) VALUES ('
||COALESCE(NEW.ID_RACA,'NULL')||','
||COALESCE(''''||NEW.RACA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'RACA', NEW.ID_RACA,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: RACA_BU_LOG */
CREATE TRIGGER RACA_BU_LOG FOR RACA
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.RACA,'')<>COALESCE(OLD.RACA,'')) THEN TXT=TXT||',RACA = '||COALESCE(''''||NEW.RACA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE RACA SET ID_RACA = '''||NEW.ID_RACA||''''||TXT||' WHERE ID_RACA = '''||NEW.ID_RACA||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'RACA', NEW.ID_RACA,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: REMEDIO_AD_SINCRONISMO */
CREATE TRIGGER REMEDIO_AD_SINCRONISMO FOR REMEDIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM REMEDIO WHERE ID_REMEDIO = '||OLD.ID_REMEDIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: REMEDIO_AI_SINCRONISMO */
CREATE TRIGGER REMEDIO_AI_SINCRONISMO FOR REMEDIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO REMEDIO (ID_REMEDIO,'
||' NOME_REMEDIO,'
||' QTDE,'
||' UNIDADEMEDIDA,'
||' ID_FORNECEDOR) VALUES ('
||COALESCE(NEW.ID_REMEDIO,'NULL')||','
||COALESCE(''''||NEW.NOME_REMEDIO||'''','NULL')||','
||COALESCE(NEW.QTDE,'NULL')||','
||COALESCE(''''||NEW.UNIDADEMEDIDA||'''','NULL')||','
||COALESCE(NEW.ID_FORNECEDOR,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: REMEDIO_AU_SINCRONISMO */
CREATE TRIGGER REMEDIO_AU_SINCRONISMO FOR REMEDIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME_REMEDIO,'')<>COALESCE(OLD.NOME_REMEDIO,'')) THEN TXT=TXT||',NOME_REMEDIO = '||COALESCE(''''||NEW.NOME_REMEDIO||'''','NULL');
IF (COALESCE(NEW.QTDE,'')<>COALESCE(OLD.QTDE,'')) THEN TXT=TXT||',QTDE = '||COALESCE(NEW.QTDE,'NULL');
IF (COALESCE(NEW.UNIDADEMEDIDA,'')<>COALESCE(OLD.UNIDADEMEDIDA,'')) THEN TXT=TXT||',UNIDADEMEDIDA = '||COALESCE(''''||NEW.UNIDADEMEDIDA||'''','NULL');
IF (COALESCE(NEW.ID_FORNECEDOR,'')<>COALESCE(OLD.ID_FORNECEDOR,'')) THEN TXT=TXT||',ID_FORNECEDOR = '||COALESCE(NEW.ID_FORNECEDOR,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE REMEDIO SET ID_REMEDIO = '''||NEW.ID_REMEDIO||''''||TXT||' WHERE ID_REMEDIO = '''||NEW.ID_REMEDIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: REMEDIO_BD_LOG */
CREATE TRIGGER REMEDIO_BD_LOG FOR REMEDIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO REMEDIO (ID_REMEDIO,'
||' NOME_REMEDIO,'
||' QTDE,'
||' UNIDADEMEDIDA,'
||' ID_FORNECEDOR) VALUES ('
||COALESCE(OLD.ID_REMEDIO,'NULL')||','
||COALESCE(''''||OLD.NOME_REMEDIO||'''','NULL')||','
||COALESCE(OLD.QTDE,'NULL')||','
||COALESCE(''''||OLD.UNIDADEMEDIDA||'''','NULL')||','
||COALESCE(OLD.ID_FORNECEDOR,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'REMEDIO', OLD.ID_REMEDIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: REMEDIO_BI0 */
CREATE TRIGGER REMEDIO_BI0 FOR REMEDIO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
 if (NEW.id_remedio IS NULL or (NEW.id_remedio = 0) ) then
    NEW.id_remedio = GEN_ID(cod_up,0)||GEN_ID(idremedio,1);
end
^

/* Trigger: REMEDIO_BI_LOG */
CREATE TRIGGER REMEDIO_BI_LOG FOR REMEDIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO REMEDIO (ID_REMEDIO,'
||' NOME_REMEDIO,'
||' QTDE,'
||' UNIDADEMEDIDA,'
||' ID_FORNECEDOR) VALUES ('
||COALESCE(NEW.ID_REMEDIO,'NULL')||','
||COALESCE(''''||NEW.NOME_REMEDIO||'''','NULL')||','
||COALESCE(NEW.QTDE,'NULL')||','
||COALESCE(''''||NEW.UNIDADEMEDIDA||'''','NULL')||','
||COALESCE(NEW.ID_FORNECEDOR,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'REMEDIO', NEW.ID_REMEDIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: REMEDIO_BU_LOG */
CREATE TRIGGER REMEDIO_BU_LOG FOR REMEDIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME_REMEDIO,'')<>COALESCE(OLD.NOME_REMEDIO,'')) THEN TXT=TXT||',NOME_REMEDIO = '||COALESCE(''''||NEW.NOME_REMEDIO||'''','NULL');
IF (COALESCE(NEW.QTDE,'')<>COALESCE(OLD.QTDE,'')) THEN TXT=TXT||',QTDE = '||COALESCE(NEW.QTDE,'NULL');
IF (COALESCE(NEW.UNIDADEMEDIDA,'')<>COALESCE(OLD.UNIDADEMEDIDA,'')) THEN TXT=TXT||',UNIDADEMEDIDA = '||COALESCE(''''||NEW.UNIDADEMEDIDA||'''','NULL');
IF (COALESCE(NEW.ID_FORNECEDOR,'')<>COALESCE(OLD.ID_FORNECEDOR,'')) THEN TXT=TXT||',ID_FORNECEDOR = '||COALESCE(NEW.ID_FORNECEDOR,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE REMEDIO SET ID_REMEDIO = '''||NEW.ID_REMEDIO||''''||TXT||' WHERE ID_REMEDIO = '''||NEW.ID_REMEDIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'REMEDIO', NEW.ID_REMEDIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: REMEDIO_INTERNO_AD_SINCRONISMO */
CREATE TRIGGER REMEDIO_INTERNO_AD_SINCRONISMO FOR REMEDIO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM REMEDIO_INTERNO WHERE ID_REMEDIO_INTERNO = '||OLD.ID_REMEDIO_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: REMEDIO_INTERNO_AI_SINCRONISMO */
CREATE TRIGGER REMEDIO_INTERNO_AI_SINCRONISMO FOR REMEDIO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO REMEDIO_INTERNO (ID_REMEDIO_INTERNO,'
||' ID_REMEDIO,'
||' ID_INTERNO,'
||' DATA,'
||' OBS,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(NEW.ID_REMEDIO_INTERNO,'NULL')||','
||COALESCE(NEW.ID_REMEDIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: REMEDIO_INTERNO_AU_SINCRONISMO */
CREATE TRIGGER REMEDIO_INTERNO_AU_SINCRONISMO FOR REMEDIO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_REMEDIO,'')<>COALESCE(OLD.ID_REMEDIO,'')) THEN TXT=TXT||',ID_REMEDIO = '||COALESCE(NEW.ID_REMEDIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE REMEDIO_INTERNO SET ID_REMEDIO_INTERNO = '''||NEW.ID_REMEDIO_INTERNO||''''||TXT||' WHERE ID_REMEDIO_INTERNO = '''||NEW.ID_REMEDIO_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: REMEDIO_INTERNO_BD_LOG */
CREATE TRIGGER REMEDIO_INTERNO_BD_LOG FOR REMEDIO_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO REMEDIO_INTERNO (ID_REMEDIO_INTERNO,'
||' ID_REMEDIO,'
||' ID_INTERNO,'
||' DATA,'
||' OBS,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(OLD.ID_REMEDIO_INTERNO,'NULL')||','
||COALESCE(OLD.ID_REMEDIO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA||'''','NULL')||','
||COALESCE(''''||OLD.OBS||'''','NULL')||','
||COALESCE(OLD.ID_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'REMEDIO_INTERNO', OLD.ID_REMEDIO_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: REMEDIO_INTERNO_BI0 */
CREATE TRIGGER REMEDIO_INTERNO_BI0 FOR REMEDIO_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
  if (coalesce(new.id_remedio_interno,0)=0) then
  NEW.id_remedio_interno = gen_id(cod_up,0)||GEN_ID(idremediointerno,1);
end
^

/* Trigger: REMEDIO_INTERNO_BI_LOG */
CREATE TRIGGER REMEDIO_INTERNO_BI_LOG FOR REMEDIO_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO REMEDIO_INTERNO (ID_REMEDIO_INTERNO,'
||' ID_REMEDIO,'
||' ID_INTERNO,'
||' DATA,'
||' OBS,'
||' ID_FUNCIONARIO) VALUES ('
||COALESCE(NEW.ID_REMEDIO_INTERNO,'NULL')||','
||COALESCE(NEW.ID_REMEDIO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||','
||COALESCE(NEW.ID_FUNCIONARIO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'REMEDIO_INTERNO', NEW.ID_REMEDIO_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: REMEDIO_INTERNO_BU_LOG */
CREATE TRIGGER REMEDIO_INTERNO_BU_LOG FOR REMEDIO_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_REMEDIO,'')<>COALESCE(OLD.ID_REMEDIO,'')) THEN TXT=TXT||',ID_REMEDIO = '||COALESCE(NEW.ID_REMEDIO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA,'')<>COALESCE(OLD.DATA,'')) THEN TXT=TXT||',DATA = '||COALESCE(''''||NEW.DATA||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (COALESCE(NEW.ID_FUNCIONARIO,'')<>COALESCE(OLD.ID_FUNCIONARIO,'')) THEN TXT=TXT||',ID_FUNCIONARIO = '||COALESCE(NEW.ID_FUNCIONARIO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE REMEDIO_INTERNO SET ID_REMEDIO_INTERNO = '''||NEW.ID_REMEDIO_INTERNO||''''||TXT||' WHERE ID_REMEDIO_INTERNO = '''||NEW.ID_REMEDIO_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'REMEDIO_INTERNO', NEW.ID_REMEDIO_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: REMICAO_BI */
CREATE TRIGGER REMICAO_BI FOR REMICAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDREMICAO,0)=0) THEN
    NEW.IDREMICAO = GEN_ID(COD_UP,0)||GEN_ID(IDREMICAO,1);
END
^

/* Trigger: REPLICACAO_RECEBIDA_AI0 */
CREATE TRIGGER REPLICACAO_RECEBIDA_AI0 FOR REPLICACAO_RECEBIDA
ACTIVE AFTER INSERT POSITION 0
AS
declare variable delete_sincronismo varchar(8192);
declare variable conexao varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
begin
  FOR
    SELECT
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    where idsincronismo_controle = NEW.idsincronismo_controle
    INTO :CONEXAO
  DO
  BEGIN
      LOGIN = 'SINCRONIZADOR';
      PASSWD = 'albatroz';
      DELETE_SINCRONISMO = 'DELETE FROM SINCRONISMO WHERE IDSINCRONISMO='||NEW.IDSINCRONISMO_ORIGEM;
      EXECUTE STATEMENT :DELETE_SINCRONISMO
      ON EXTERNAL :CONEXAO
      AS USER :LOGIN
      PASSWORD :PASSWD;
  END
end
^

/* Trigger: REPLICACAO_RECEBIDA_BI0 */
CREATE TRIGGER REPLICACAO_RECEBIDA_BI0 FOR REPLICACAO_RECEBIDA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDREPLICACAO_RECEBIDA,0)=0) THEN
    NEW.IDREPLICACAO_RECEBIDA = GEN_ID(IDREPLICACAO_RECEBIDA,1);
END
^

/* Trigger: SERIE_ESTUDO_AD_SINCRONISMO */
CREATE TRIGGER SERIE_ESTUDO_AD_SINCRONISMO FOR SERIE_ESTUDO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM SERIE_ESTUDO WHERE ID_SERIE_ESTUDO = '||OLD.ID_SERIE_ESTUDO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: SERIE_ESTUDO_AI_SINCRONISMO */
CREATE TRIGGER SERIE_ESTUDO_AI_SINCRONISMO FOR SERIE_ESTUDO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO SERIE_ESTUDO (ID_SERIE_ESTUDO,'
||' SERIE_ESTUDO) VALUES ('
||COALESCE(NEW.ID_SERIE_ESTUDO,'NULL')||','
||COALESCE(''''||NEW.SERIE_ESTUDO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: SERIE_ESTUDO_AU_SINCRONISMO */
CREATE TRIGGER SERIE_ESTUDO_AU_SINCRONISMO FOR SERIE_ESTUDO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.SERIE_ESTUDO,'')<>COALESCE(OLD.SERIE_ESTUDO,'')) THEN TXT=TXT||',SERIE_ESTUDO = '||COALESCE(''''||NEW.SERIE_ESTUDO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SERIE_ESTUDO SET ID_SERIE_ESTUDO = '''||NEW.ID_SERIE_ESTUDO||''''||TXT||' WHERE ID_SERIE_ESTUDO = '''||NEW.ID_SERIE_ESTUDO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: SERIE_ESTUDO_BD_LOG */
CREATE TRIGGER SERIE_ESTUDO_BD_LOG FOR SERIE_ESTUDO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SERIE_ESTUDO (ID_SERIE_ESTUDO,'
||' SERIE_ESTUDO) VALUES ('
||COALESCE(OLD.ID_SERIE_ESTUDO,'NULL')||','
||COALESCE(''''||OLD.SERIE_ESTUDO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SERIE_ESTUDO', OLD.ID_SERIE_ESTUDO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SERIE_ESTUDO_BI0 */
CREATE TRIGGER SERIE_ESTUDO_BI0 FOR SERIE_ESTUDO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_serie_estudo IS null or (new.id_serie_estudo = 0)  ) then
    new.id_serie_estudo = gen_id (cod_up, 0) || gen_id (idsereiestudo, 1);
end
^

/* Trigger: SERIE_ESTUDO_BI_LOG */
CREATE TRIGGER SERIE_ESTUDO_BI_LOG FOR SERIE_ESTUDO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SERIE_ESTUDO (ID_SERIE_ESTUDO,'
||' SERIE_ESTUDO) VALUES ('
||COALESCE(NEW.ID_SERIE_ESTUDO,'NULL')||','
||COALESCE(''''||NEW.SERIE_ESTUDO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SERIE_ESTUDO', NEW.ID_SERIE_ESTUDO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SERIE_ESTUDO_BU_LOG */
CREATE TRIGGER SERIE_ESTUDO_BU_LOG FOR SERIE_ESTUDO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.SERIE_ESTUDO,'')<>COALESCE(OLD.SERIE_ESTUDO,'')) THEN TXT=TXT||',SERIE_ESTUDO = '||COALESCE(''''||NEW.SERIE_ESTUDO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SERIE_ESTUDO SET ID_SERIE_ESTUDO = '''||NEW.ID_SERIE_ESTUDO||''''||TXT||' WHERE ID_SERIE_ESTUDO = '''||NEW.ID_SERIE_ESTUDO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SERIE_ESTUDO', NEW.ID_SERIE_ESTUDO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: SETOR_TRABALHO_AD_SINCRONISMO */
CREATE TRIGGER SETOR_TRABALHO_AD_SINCRONISMO FOR SETOR_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM SETOR_TRABALHO WHERE ID_SETOR_TRABALHO = '||OLD.ID_SETOR_TRABALHO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: SETOR_TRABALHO_AI_SINCRONISMO */
CREATE TRIGGER SETOR_TRABALHO_AI_SINCRONISMO FOR SETOR_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO SETOR_TRABALHO (ID_SETOR_TRABALHO,'
||' SETOR_TRABALHO) VALUES ('
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.SETOR_TRABALHO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: SETOR_TRABALHO_AU_SINCRONISMO */
CREATE TRIGGER SETOR_TRABALHO_AU_SINCRONISMO FOR SETOR_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.SETOR_TRABALHO,'')<>COALESCE(OLD.SETOR_TRABALHO,'')) THEN TXT=TXT||',SETOR_TRABALHO = '||COALESCE(''''||NEW.SETOR_TRABALHO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SETOR_TRABALHO SET ID_SETOR_TRABALHO = '''||NEW.ID_SETOR_TRABALHO||''''||TXT||' WHERE ID_SETOR_TRABALHO = '''||NEW.ID_SETOR_TRABALHO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: SETOR_TRABALHO_BD_LOG */
CREATE TRIGGER SETOR_TRABALHO_BD_LOG FOR SETOR_TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SETOR_TRABALHO (ID_SETOR_TRABALHO,'
||' SETOR_TRABALHO) VALUES ('
||COALESCE(OLD.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(''''||OLD.SETOR_TRABALHO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SETOR_TRABALHO', OLD.ID_SETOR_TRABALHO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SETOR_TRABALHO_BI0 */
CREATE TRIGGER SETOR_TRABALHO_BI0 FOR SETOR_TRABALHO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_setor_trabalho IS null or (new.id_setor_trabalho = 0)  ) then
    new.id_setor_trabalho = gen_id (cod_up, 0) || gen_id (id_setor_trabalho, 1);

end
^

/* Trigger: SETOR_TRABALHO_BI_LOG */
CREATE TRIGGER SETOR_TRABALHO_BI_LOG FOR SETOR_TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SETOR_TRABALHO (ID_SETOR_TRABALHO,'
||' SETOR_TRABALHO) VALUES ('
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(''''||NEW.SETOR_TRABALHO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SETOR_TRABALHO', NEW.ID_SETOR_TRABALHO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SETOR_TRABALHO_BU_LOG */
CREATE TRIGGER SETOR_TRABALHO_BU_LOG FOR SETOR_TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.SETOR_TRABALHO,'')<>COALESCE(OLD.SETOR_TRABALHO,'')) THEN TXT=TXT||',SETOR_TRABALHO = '||COALESCE(''''||NEW.SETOR_TRABALHO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SETOR_TRABALHO SET ID_SETOR_TRABALHO = '''||NEW.ID_SETOR_TRABALHO||''''||TXT||' WHERE ID_SETOR_TRABALHO = '''||NEW.ID_SETOR_TRABALHO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SETOR_TRABALHO', NEW.ID_SETOR_TRABALHO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: SINCRONISMO_AD0 */
CREATE TRIGGER SINCRONISMO_AD0 FOR SINCRONISMO
ACTIVE AFTER DELETE POSITION 0
AS
begin

insert into backup_sincronismo (idbackup_sincronismo,
                         idsincronismo,
                         idsincronismo_controle, 
                         script, 
                         status, 
                         ordem, 
                         data_hora, 
                         retorno, 
                         usuario)
values (0,
        OLD.idsincronismo,
        OLD.idsincronismo_controle, 
        OLD.script, 
        OLD.status, 
        OLD.ordem, 
        'NOW',
        OLD.retorno, 
        OLD.usuario);


end
^

/* Trigger: SINCRONISMO_BI0 */
CREATE TRIGGER SINCRONISMO_BI0 FOR SINCRONISMO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.USUARIO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
  IF (COALESCE(NEW.USUARIO,'')='') THEN
    NEW.USUARIO = USER;
  NEW.DATA_HORA = 'NOW';
  NEW.IDSINCRONISMO = GEN_ID(IDSINCRONISMO_GEN, 1);
end
^

/* Trigger: SINCRONISMO_BLOB_AD0 */
CREATE TRIGGER SINCRONISMO_BLOB_AD0 FOR SINCRONISMO_BLOB
ACTIVE AFTER DELETE POSITION 0
AS
begin
  INSERT INTO BACKUP_SINCRONISMO_BLOB (IDBACKUP_SINCRONISMO_BLOB, DATA_HORA_BACKUP, IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
  VALUES (0, 'NOW', OLD.IDSINCRONISMO_BLOB, OLD.IDSINCRONISMO_CONTROLE, OLD.DATA_HORA, OLD.USUARIO, OLD.TABELA, OLD.CAMPO, OLD.NOME_PK, OLD.VALOR_PK);
end
^

/* Trigger: SINCRONISMO_BLOB_BI0 */
CREATE TRIGGER SINCRONISMO_BLOB_BI0 FOR SINCRONISMO_BLOB
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
   NEW.USUARIO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(NEW.USUARIO,'')='') THEN
     NEW.USUARIO = USER;
  NEW.DATA_HORA = 'NOW';
  NEW.IDSINCRONISMO_BLOB = GEN_ID(IDSINCRONISMO_BLOB_GEN,1);
END
^

/* Trigger: SINCRONISMO_CONTROLE_BI0 */
CREATE TRIGGER SINCRONISMO_CONTROLE_BI0 FOR SINCRONISMO_CONTROLE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.IDSINCRONISMO_CONTROLE = GEN_ID(IDSINCRONISMO_CONTROLE_GEN, 1);
end
^

/* Trigger: SOLARIO_AD_SINCRONISMO */
CREATE TRIGGER SOLARIO_AD_SINCRONISMO FOR SOLARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM SOLARIO WHERE ID_SOLARIO = '||OLD.ID_SOLARIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: SOLARIO_AI_SINCRONISMO */
CREATE TRIGGER SOLARIO_AI_SINCRONISMO FOR SOLARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO SOLARIO (ID_SOLARIO,'
||' SOLARIO,'
||' IDGALERIA,'
||' IDPAVILHAO,'
||' DIA_VISITA,'
||' PERIODO_VISITA) VALUES ('
||COALESCE(NEW.ID_SOLARIO,'NULL')||','
||COALESCE(''''||NEW.SOLARIO||'''','NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(''''||NEW.DIA_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.PERIODO_VISITA||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: SOLARIO_AU_SINCRONISMO */
CREATE TRIGGER SOLARIO_AU_SINCRONISMO FOR SOLARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.SOLARIO,'')<>COALESCE(OLD.SOLARIO,'')) THEN TXT=TXT||',SOLARIO = '||COALESCE(''''||NEW.SOLARIO||'''','NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.DIA_VISITA,'')<>COALESCE(OLD.DIA_VISITA,'')) THEN TXT=TXT||',DIA_VISITA = '||COALESCE(''''||NEW.DIA_VISITA||'''','NULL');
IF (COALESCE(NEW.PERIODO_VISITA,'')<>COALESCE(OLD.PERIODO_VISITA,'')) THEN TXT=TXT||',PERIODO_VISITA = '||COALESCE(''''||NEW.PERIODO_VISITA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SOLARIO SET ID_SOLARIO = '''||NEW.ID_SOLARIO||''''||TXT||' WHERE ID_SOLARIO = '''||NEW.ID_SOLARIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: SOLARIO_BD_LOG */
CREATE TRIGGER SOLARIO_BD_LOG FOR SOLARIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SOLARIO (ID_SOLARIO,'
||' SOLARIO,'
||' IDGALERIA,'
||' IDPAVILHAO,'
||' DIA_VISITA,'
||' PERIODO_VISITA) VALUES ('
||COALESCE(OLD.ID_SOLARIO,'NULL')||','
||COALESCE(''''||OLD.SOLARIO||'''','NULL')||','
||COALESCE(OLD.IDGALERIA,'NULL')||','
||COALESCE(OLD.IDPAVILHAO,'NULL')||','
||COALESCE(''''||OLD.DIA_VISITA||'''','NULL')||','
||COALESCE(''''||OLD.PERIODO_VISITA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SOLARIO', OLD.ID_SOLARIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SOLARIO_BI0 */
CREATE TRIGGER SOLARIO_BI0 FOR SOLARIO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_solario IS null or (new.id_solario = 0)  ) then
    new.id_solario = gen_id (cod_up, 0) || gen_id (id_solario, 1);
end
^

/* Trigger: SOLARIO_BI_LOG */
CREATE TRIGGER SOLARIO_BI_LOG FOR SOLARIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SOLARIO (ID_SOLARIO,'
||' SOLARIO,'
||' IDGALERIA,'
||' IDPAVILHAO,'
||' DIA_VISITA,'
||' PERIODO_VISITA) VALUES ('
||COALESCE(NEW.ID_SOLARIO,'NULL')||','
||COALESCE(''''||NEW.SOLARIO||'''','NULL')||','
||COALESCE(NEW.IDGALERIA,'NULL')||','
||COALESCE(NEW.IDPAVILHAO,'NULL')||','
||COALESCE(''''||NEW.DIA_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.PERIODO_VISITA||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SOLARIO', NEW.ID_SOLARIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SOLARIO_BU_LOG */
CREATE TRIGGER SOLARIO_BU_LOG FOR SOLARIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.SOLARIO,'')<>COALESCE(OLD.SOLARIO,'')) THEN TXT=TXT||',SOLARIO = '||COALESCE(''''||NEW.SOLARIO||'''','NULL');
IF (COALESCE(NEW.IDGALERIA,'')<>COALESCE(OLD.IDGALERIA,'')) THEN TXT=TXT||',IDGALERIA = '||COALESCE(NEW.IDGALERIA,'NULL');
IF (COALESCE(NEW.IDPAVILHAO,'')<>COALESCE(OLD.IDPAVILHAO,'')) THEN TXT=TXT||',IDPAVILHAO = '||COALESCE(NEW.IDPAVILHAO,'NULL');
IF (COALESCE(NEW.DIA_VISITA,'')<>COALESCE(OLD.DIA_VISITA,'')) THEN TXT=TXT||',DIA_VISITA = '||COALESCE(''''||NEW.DIA_VISITA||'''','NULL');
IF (COALESCE(NEW.PERIODO_VISITA,'')<>COALESCE(OLD.PERIODO_VISITA,'')) THEN TXT=TXT||',PERIODO_VISITA = '||COALESCE(''''||NEW.PERIODO_VISITA||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SOLARIO SET ID_SOLARIO = '''||NEW.ID_SOLARIO||''''||TXT||' WHERE ID_SOLARIO = '''||NEW.ID_SOLARIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SOLARIO', NEW.ID_SOLARIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: SUB_EVENTOS_AD_SINCRONISMO */
CREATE TRIGGER SUB_EVENTOS_AD_SINCRONISMO FOR SUB_EVENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM SUB_EVENTOS WHERE ID_SUB_EVENTOS = '||OLD.ID_SUB_EVENTOS||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: SUB_EVENTOS_AI_SINCRONISMO */
CREATE TRIGGER SUB_EVENTOS_AI_SINCRONISMO FOR SUB_EVENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO SUB_EVENTOS (ID_SUB_EVENTOS,'
||' DESCRICAO_EVENTOS,'
||' CODIGO_SUB_EVENTO) VALUES ('
||COALESCE(NEW.ID_SUB_EVENTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_EVENTOS||'''','NULL')||','
||COALESCE(NEW.CODIGO_SUB_EVENTO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: SUB_EVENTOS_AU_SINCRONISMO */
CREATE TRIGGER SUB_EVENTOS_AU_SINCRONISMO FOR SUB_EVENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_EVENTOS,'')<>COALESCE(OLD.DESCRICAO_EVENTOS,'')) THEN TXT=TXT||',DESCRICAO_EVENTOS = '||COALESCE(''''||NEW.DESCRICAO_EVENTOS||'''','NULL');
IF (COALESCE(NEW.CODIGO_SUB_EVENTO,'')<>COALESCE(OLD.CODIGO_SUB_EVENTO,'')) THEN TXT=TXT||',CODIGO_SUB_EVENTO = '||COALESCE(NEW.CODIGO_SUB_EVENTO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SUB_EVENTOS SET ID_SUB_EVENTOS = '''||NEW.ID_SUB_EVENTOS||''''||TXT||' WHERE ID_SUB_EVENTOS = '''||NEW.ID_SUB_EVENTOS||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: SUB_EVENTOS_BD_LOG */
CREATE TRIGGER SUB_EVENTOS_BD_LOG FOR SUB_EVENTOS
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SUB_EVENTOS (ID_SUB_EVENTOS,'
||' DESCRICAO_EVENTOS,'
||' CODIGO_SUB_EVENTO) VALUES ('
||COALESCE(OLD.ID_SUB_EVENTOS,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO_EVENTOS||'''','NULL')||','
||COALESCE(OLD.CODIGO_SUB_EVENTO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SUB_EVENTOS', OLD.ID_SUB_EVENTOS,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SUB_EVENTOS_BI0 */
CREATE TRIGGER SUB_EVENTOS_BI0 FOR SUB_EVENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (COALESCE(NEW.id_sub_eventos,0)=0) THEN
  BEGIN
    NEW.id_sub_eventos = GEN_ID(COD_UP,0)||GEN_ID(idsub_evento,1);
  END

END
^

/* Trigger: SUB_EVENTOS_BI_LOG */
CREATE TRIGGER SUB_EVENTOS_BI_LOG FOR SUB_EVENTOS
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO SUB_EVENTOS (ID_SUB_EVENTOS,'
||' DESCRICAO_EVENTOS,'
||' CODIGO_SUB_EVENTO) VALUES ('
||COALESCE(NEW.ID_SUB_EVENTOS,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO_EVENTOS||'''','NULL')||','
||COALESCE(NEW.CODIGO_SUB_EVENTO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SUB_EVENTOS', NEW.ID_SUB_EVENTOS,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: SUB_EVENTOS_BU_LOG */
CREATE TRIGGER SUB_EVENTOS_BU_LOG FOR SUB_EVENTOS
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO_EVENTOS,'')<>COALESCE(OLD.DESCRICAO_EVENTOS,'')) THEN TXT=TXT||',DESCRICAO_EVENTOS = '||COALESCE(''''||NEW.DESCRICAO_EVENTOS||'''','NULL');
IF (COALESCE(NEW.CODIGO_SUB_EVENTO,'')<>COALESCE(OLD.CODIGO_SUB_EVENTO,'')) THEN TXT=TXT||',CODIGO_SUB_EVENTO = '||COALESCE(NEW.CODIGO_SUB_EVENTO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE SUB_EVENTOS SET ID_SUB_EVENTOS = '''||NEW.ID_SUB_EVENTOS||''''||TXT||' WHERE ID_SUB_EVENTOS = '''||NEW.ID_SUB_EVENTOS||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'SUB_EVENTOS', NEW.ID_SUB_EVENTOS,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: TIPO_DOCUMENTO_AD_SINCRONISMO */
CREATE TRIGGER TIPO_DOCUMENTO_AD_SINCRONISMO FOR TIPO_DOCUMENTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM TIPO_DOCUMENTO WHERE ID_TIPO_DOCUMENTO = '||OLD.ID_TIPO_DOCUMENTO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: TIPO_DOCUMENTO_AI_SINCRONISMO */
CREATE TRIGGER TIPO_DOCUMENTO_AI_SINCRONISMO FOR TIPO_DOCUMENTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO TIPO_DOCUMENTO (ID_TIPO_DOCUMENTO,'
||' TIPODOCUMENTO) VALUES ('
||COALESCE(NEW.ID_TIPO_DOCUMENTO,'NULL')||','
||COALESCE(''''||NEW.TIPODOCUMENTO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: TIPO_DOCUMENTO_AU_SINCRONISMO */
CREATE TRIGGER TIPO_DOCUMENTO_AU_SINCRONISMO FOR TIPO_DOCUMENTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.TIPODOCUMENTO,'')<>COALESCE(OLD.TIPODOCUMENTO,'')) THEN TXT=TXT||',TIPODOCUMENTO = '||COALESCE(''''||NEW.TIPODOCUMENTO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE TIPO_DOCUMENTO SET ID_TIPO_DOCUMENTO = '''||NEW.ID_TIPO_DOCUMENTO||''''||TXT||' WHERE ID_TIPO_DOCUMENTO = '''||NEW.ID_TIPO_DOCUMENTO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: TIPO_DOCUMENTO_BD_LOG */
CREATE TRIGGER TIPO_DOCUMENTO_BD_LOG FOR TIPO_DOCUMENTO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO TIPO_DOCUMENTO (ID_TIPO_DOCUMENTO,'
||' TIPODOCUMENTO) VALUES ('
||COALESCE(OLD.ID_TIPO_DOCUMENTO,'NULL')||','
||COALESCE(''''||OLD.TIPODOCUMENTO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TIPO_DOCUMENTO', OLD.ID_TIPO_DOCUMENTO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: TIPO_DOCUMENTO_BI0 */
CREATE TRIGGER TIPO_DOCUMENTO_BI0 FOR TIPO_DOCUMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
  if (coalesce(new.id_tipo_documento,0)=0) then
  NEW.id_tipo_documento = gen_id(cod_up,0)||GEN_ID(idtipo_documento,1);
end
^

/* Trigger: TIPO_DOCUMENTO_BI_LOG */
CREATE TRIGGER TIPO_DOCUMENTO_BI_LOG FOR TIPO_DOCUMENTO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO TIPO_DOCUMENTO (ID_TIPO_DOCUMENTO,'
||' TIPODOCUMENTO) VALUES ('
||COALESCE(NEW.ID_TIPO_DOCUMENTO,'NULL')||','
||COALESCE(''''||NEW.TIPODOCUMENTO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TIPO_DOCUMENTO', NEW.ID_TIPO_DOCUMENTO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: TIPO_DOCUMENTO_BU_LOG */
CREATE TRIGGER TIPO_DOCUMENTO_BU_LOG FOR TIPO_DOCUMENTO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.TIPODOCUMENTO,'')<>COALESCE(OLD.TIPODOCUMENTO,'')) THEN TXT=TXT||',TIPODOCUMENTO = '||COALESCE(''''||NEW.TIPODOCUMENTO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE TIPO_DOCUMENTO SET ID_TIPO_DOCUMENTO = '''||NEW.ID_TIPO_DOCUMENTO||''''||TXT||' WHERE ID_TIPO_DOCUMENTO = '''||NEW.ID_TIPO_DOCUMENTO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TIPO_DOCUMENTO', NEW.ID_TIPO_DOCUMENTO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: TIPO_PATRIMONIO_AD_SINCRONISMO */
CREATE TRIGGER TIPO_PATRIMONIO_AD_SINCRONISMO FOR TIPO_PATRIMONIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM TIPO_PATRIMONIO WHERE IDTIPO_PATRIMONIO = '||OLD.IDTIPO_PATRIMONIO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: TIPO_PATRIMONIO_AI_SINCRONISMO */
CREATE TRIGGER TIPO_PATRIMONIO_AI_SINCRONISMO FOR TIPO_PATRIMONIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO TIPO_PATRIMONIO (IDTIPO_PATRIMONIO,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDTIPO_PATRIMONIO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: TIPO_PATRIMONIO_AU_SINCRONISMO */
CREATE TRIGGER TIPO_PATRIMONIO_AU_SINCRONISMO FOR TIPO_PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE TIPO_PATRIMONIO SET IDTIPO_PATRIMONIO = '''||NEW.IDTIPO_PATRIMONIO||''''||TXT||' WHERE IDTIPO_PATRIMONIO = '''||NEW.IDTIPO_PATRIMONIO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: TIPO_PATRIMONIO_BD_LOG */
CREATE TRIGGER TIPO_PATRIMONIO_BD_LOG FOR TIPO_PATRIMONIO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO TIPO_PATRIMONIO (IDTIPO_PATRIMONIO,'
||' DESCRICAO) VALUES ('
||COALESCE(OLD.IDTIPO_PATRIMONIO,'NULL')||','
||COALESCE(''''||OLD.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TIPO_PATRIMONIO', OLD.IDTIPO_PATRIMONIO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: TIPO_PATRIMONIO_BI0 */
CREATE TRIGGER TIPO_PATRIMONIO_BI0 FOR TIPO_PATRIMONIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.IDTIPO_PATRIMONIO,0)=0) THEN
    NEW.IDTIPO_PATRIMONIO = GEN_ID(COD_UP,0)||GEN_ID(IDTIPO_PATRIMONIO,1);
END
^

/* Trigger: TIPO_PATRIMONIO_BI_LOG */
CREATE TRIGGER TIPO_PATRIMONIO_BI_LOG FOR TIPO_PATRIMONIO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO TIPO_PATRIMONIO (IDTIPO_PATRIMONIO,'
||' DESCRICAO) VALUES ('
||COALESCE(NEW.IDTIPO_PATRIMONIO,'NULL')||','
||COALESCE(''''||NEW.DESCRICAO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TIPO_PATRIMONIO', NEW.IDTIPO_PATRIMONIO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: TIPO_PATRIMONIO_BU_LOG */
CREATE TRIGGER TIPO_PATRIMONIO_BU_LOG FOR TIPO_PATRIMONIO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.DESCRICAO,'')<>COALESCE(OLD.DESCRICAO,'')) THEN TXT=TXT||',DESCRICAO = '||COALESCE(''''||NEW.DESCRICAO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE TIPO_PATRIMONIO SET IDTIPO_PATRIMONIO = '''||NEW.IDTIPO_PATRIMONIO||''''||TXT||' WHERE IDTIPO_PATRIMONIO = '''||NEW.IDTIPO_PATRIMONIO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TIPO_PATRIMONIO', NEW.IDTIPO_PATRIMONIO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: TRABALHO_AD_SINCRONISMO */
CREATE TRIGGER TRABALHO_AD_SINCRONISMO FOR TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM TRABALHO WHERE ID_TRABALHO = '||OLD.ID_TRABALHO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: TRABALHO_AI_SINCRONISMO */
CREATE TRIGGER TRABALHO_AI_SINCRONISMO FOR TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO TRABALHO (ID_TRABALHO,'
||' ID_INTERNO,'
||' ID_SETOR_TRABALHO,'
||' ID_FUNCAO_INTERNO,'
||' DATA_TRABALHO,'
||' OBSERVACAO_TRABALHO,'
||' ID_UNIDADE_PENAL) VALUES ('
||COALESCE(NEW.ID_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO_TRABALHO||'''','NULL')||','
||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: TRABALHO_AU_SINCRONISMO */
CREATE TRIGGER TRABALHO_AU_SINCRONISMO FOR TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_FUNCAO_INTERNO,'')<>COALESCE(OLD.ID_FUNCAO_INTERNO,'')) THEN TXT=TXT||',ID_FUNCAO_INTERNO = '||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_TRABALHO,'')<>COALESCE(OLD.DATA_TRABALHO,'')) THEN TXT=TXT||',DATA_TRABALHO = '||COALESCE(''''||NEW.DATA_TRABALHO||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO_TRABALHO,'')<>COALESCE(OLD.OBSERVACAO_TRABALHO,'')) THEN TXT=TXT||',OBSERVACAO_TRABALHO = '||COALESCE(''''||NEW.OBSERVACAO_TRABALHO||'''','NULL');
IF (COALESCE(NEW.ID_UNIDADE_PENAL,'')<>COALESCE(OLD.ID_UNIDADE_PENAL,'')) THEN TXT=TXT||',ID_UNIDADE_PENAL = '||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE TRABALHO SET ID_TRABALHO = '''||NEW.ID_TRABALHO||''''||TXT||' WHERE ID_TRABALHO = '''||NEW.ID_TRABALHO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: TRABALHO_BD_LOG */
CREATE TRIGGER TRABALHO_BD_LOG FOR TRABALHO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO TRABALHO (ID_TRABALHO,'
||' ID_INTERNO,'
||' ID_SETOR_TRABALHO,'
||' ID_FUNCAO_INTERNO,'
||' DATA_TRABALHO,'
||' OBSERVACAO_TRABALHO,'
||' ID_UNIDADE_PENAL) VALUES ('
||COALESCE(OLD.ID_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(OLD.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA_TRABALHO||'''','NULL')||','
||COALESCE(''''||OLD.OBSERVACAO_TRABALHO||'''','NULL')||','
||COALESCE(OLD.ID_UNIDADE_PENAL,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TRABALHO', OLD.ID_TRABALHO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: TRABALHO_BI0 */
CREATE TRIGGER TRABALHO_BI0 FOR TRABALHO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
      if (NEW.id_trabalho IS null or (new.id_trabalho = 0)  ) then
    new.id_trabalho = gen_id (cod_up, 0) || gen_id (id_trabalho, 1);
end
^

/* Trigger: TRABALHO_BI_LOG */
CREATE TRIGGER TRABALHO_BI_LOG FOR TRABALHO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO TRABALHO (ID_TRABALHO,'
||' ID_INTERNO,'
||' ID_SETOR_TRABALHO,'
||' ID_FUNCAO_INTERNO,'
||' DATA_TRABALHO,'
||' OBSERVACAO_TRABALHO,'
||' ID_UNIDADE_PENAL) VALUES ('
||COALESCE(NEW.ID_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL')||','
||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_TRABALHO||'''','NULL')||','
||COALESCE(''''||NEW.OBSERVACAO_TRABALHO||'''','NULL')||','
||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TRABALHO', NEW.ID_TRABALHO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: TRABALHO_BU_LOG */
CREATE TRIGGER TRABALHO_BU_LOG FOR TRABALHO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_SETOR_TRABALHO,'')<>COALESCE(OLD.ID_SETOR_TRABALHO,'')) THEN TXT=TXT||',ID_SETOR_TRABALHO = '||COALESCE(NEW.ID_SETOR_TRABALHO,'NULL');
IF (COALESCE(NEW.ID_FUNCAO_INTERNO,'')<>COALESCE(OLD.ID_FUNCAO_INTERNO,'')) THEN TXT=TXT||',ID_FUNCAO_INTERNO = '||COALESCE(NEW.ID_FUNCAO_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_TRABALHO,'')<>COALESCE(OLD.DATA_TRABALHO,'')) THEN TXT=TXT||',DATA_TRABALHO = '||COALESCE(''''||NEW.DATA_TRABALHO||'''','NULL');
IF (COALESCE(NEW.OBSERVACAO_TRABALHO,'')<>COALESCE(OLD.OBSERVACAO_TRABALHO,'')) THEN TXT=TXT||',OBSERVACAO_TRABALHO = '||COALESCE(''''||NEW.OBSERVACAO_TRABALHO||'''','NULL');
IF (COALESCE(NEW.ID_UNIDADE_PENAL,'')<>COALESCE(OLD.ID_UNIDADE_PENAL,'')) THEN TXT=TXT||',ID_UNIDADE_PENAL = '||COALESCE(NEW.ID_UNIDADE_PENAL,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE TRABALHO SET ID_TRABALHO = '''||NEW.ID_TRABALHO||''''||TXT||' WHERE ID_TRABALHO = '''||NEW.ID_TRABALHO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'TRABALHO', NEW.ID_TRABALHO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: UNIDADE_PENAL_AD_SINCRONISMO */
CREATE TRIGGER UNIDADE_PENAL_AD_SINCRONISMO FOR UNIDADE_PENAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM UNIDADE_PENAL WHERE ID_UP = '||OLD.ID_UP||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: UNIDADE_PENAL_AI_SINCRONISMO */
CREATE TRIGGER UNIDADE_PENAL_AI_SINCRONISMO FOR UNIDADE_PENAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO UNIDADE_PENAL (ID_UP,'
||' NOME_UP,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' CEP,'
||' ID_CIDADE,'
||' FONE,'
||' FAX,'
||' CONTATO,'
||' FOTO,'
||' CAPITAL,'
||' REGIAO,'
||' SIGLA,'
||' REGIME,'
||' GENERO,'
||' EMAIL,'
||' CNPJ) VALUES ('
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.NOME_UP||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.FAX||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||','
||COALESCE(''''||NEW.FOTO||'''','NULL')||','
||COALESCE(''''||NEW.CAPITAL||'''','NULL')||','
||COALESCE(''''||NEW.REGIAO||'''','NULL')||','
||COALESCE(''''||NEW.SIGLA||'''','NULL')||','
||COALESCE(''''||NEW.REGIME||'''','NULL')||','
||COALESCE(''''||NEW.GENERO||'''','NULL')||','
||COALESCE(''''||NEW.EMAIL||'''','NULL')||','
||COALESCE(''''||NEW.CNPJ||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: UNIDADE_PENAL_AU_SINCRONISMO */
CREATE TRIGGER UNIDADE_PENAL_AU_SINCRONISMO FOR UNIDADE_PENAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.NOME_UP,'')<>COALESCE(OLD.NOME_UP,'')) THEN TXT=TXT||',NOME_UP = '||COALESCE(''''||NEW.NOME_UP||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.FAX,'')<>COALESCE(OLD.FAX,'')) THEN TXT=TXT||',FAX = '||COALESCE(''''||NEW.FAX||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (COALESCE(NEW.FOTO,'')<>COALESCE(OLD.FOTO,'')) THEN TXT=TXT||',FOTO = '||COALESCE(''''||NEW.FOTO||'''','NULL');
IF (COALESCE(NEW.CAPITAL,'')<>COALESCE(OLD.CAPITAL,'')) THEN TXT=TXT||',CAPITAL = '||COALESCE(''''||NEW.CAPITAL||'''','NULL');
IF (COALESCE(NEW.REGIAO,'')<>COALESCE(OLD.REGIAO,'')) THEN TXT=TXT||',REGIAO = '||COALESCE(''''||NEW.REGIAO||'''','NULL');
IF (COALESCE(NEW.SIGLA,'')<>COALESCE(OLD.SIGLA,'')) THEN TXT=TXT||',SIGLA = '||COALESCE(''''||NEW.SIGLA||'''','NULL');
IF (COALESCE(NEW.REGIME,'')<>COALESCE(OLD.REGIME,'')) THEN TXT=TXT||',REGIME = '||COALESCE(''''||NEW.REGIME||'''','NULL');
IF (COALESCE(NEW.GENERO,'')<>COALESCE(OLD.GENERO,'')) THEN TXT=TXT||',GENERO = '||COALESCE(''''||NEW.GENERO||'''','NULL');
IF (COALESCE(NEW.EMAIL,'')<>COALESCE(OLD.EMAIL,'')) THEN TXT=TXT||',EMAIL = '||COALESCE(''''||NEW.EMAIL||'''','NULL');
IF (COALESCE(NEW.CNPJ,'')<>COALESCE(OLD.CNPJ,'')) THEN TXT=TXT||',CNPJ = '||COALESCE(''''||NEW.CNPJ||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE UNIDADE_PENAL SET ID_UP = '''||NEW.ID_UP||''''||TXT||' WHERE ID_UP = '''||NEW.ID_UP||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: UNIDADE_PENAL_BD_LOG */
CREATE TRIGGER UNIDADE_PENAL_BD_LOG FOR UNIDADE_PENAL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO UNIDADE_PENAL (ID_UP,'
||' NOME_UP,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' CEP,'
||' ID_CIDADE,'
||' FONE,'
||' FAX,'
||' CONTATO,'
||' FOTO,'
||' CAPITAL,'
||' REGIAO,'
||' SIGLA,'
||' REGIME,'
||' GENERO,'
||' EMAIL,'
||' CNPJ) VALUES ('
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(''''||OLD.NOME_UP||'''','NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO||'''','NULL')||','
||COALESCE(''''||OLD.BAIRRO||'''','NULL')||','
||COALESCE(''''||OLD.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||OLD.CEP||'''','NULL')||','
||COALESCE(OLD.ID_CIDADE,'NULL')||','
||COALESCE(''''||OLD.FONE||'''','NULL')||','
||COALESCE(''''||OLD.FAX||'''','NULL')||','
||COALESCE(''''||OLD.CONTATO||'''','NULL')||','
||COALESCE(''''||OLD.FOTO||'''','NULL')||','
||COALESCE(''''||OLD.CAPITAL||'''','NULL')||','
||COALESCE(''''||OLD.REGIAO||'''','NULL')||','
||COALESCE(''''||OLD.SIGLA||'''','NULL')||','
||COALESCE(''''||OLD.REGIME||'''','NULL')||','
||COALESCE(''''||OLD.GENERO||'''','NULL')||','
||COALESCE(''''||OLD.EMAIL||'''','NULL')||','
||COALESCE(''''||OLD.CNPJ||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'UNIDADE_PENAL', OLD.ID_UP,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: UNIDADE_PENAL_BI0 */
CREATE TRIGGER UNIDADE_PENAL_BI0 FOR UNIDADE_PENAL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
   if (NEW.id_up IS null or (new.id_up = 0)  ) then
    new.id_up = gen_id (cod_up, 0) || gen_id (id_unidade_penal, 1);
end
^

/* Trigger: UNIDADE_PENAL_BI_LOG */
CREATE TRIGGER UNIDADE_PENAL_BI_LOG FOR UNIDADE_PENAL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO UNIDADE_PENAL (ID_UP,'
||' NOME_UP,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENTO,'
||' CEP,'
||' ID_CIDADE,'
||' FONE,'
||' FAX,'
||' CONTATO,'
||' FOTO,'
||' CAPITAL,'
||' REGIAO,'
||' SIGLA,'
||' REGIME,'
||' GENERO,'
||' EMAIL,'
||' CNPJ) VALUES ('
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.NOME_UP||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(NEW.ID_CIDADE,'NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.FAX||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||','
||COALESCE(''''||NEW.FOTO||'''','NULL')||','
||COALESCE(''''||NEW.CAPITAL||'''','NULL')||','
||COALESCE(''''||NEW.REGIAO||'''','NULL')||','
||COALESCE(''''||NEW.SIGLA||'''','NULL')||','
||COALESCE(''''||NEW.REGIME||'''','NULL')||','
||COALESCE(''''||NEW.GENERO||'''','NULL')||','
||COALESCE(''''||NEW.EMAIL||'''','NULL')||','
||COALESCE(''''||NEW.CNPJ||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'UNIDADE_PENAL', NEW.ID_UP,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: UNIDADE_PENAL_BU_LOG */
CREATE TRIGGER UNIDADE_PENAL_BU_LOG FOR UNIDADE_PENAL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.NOME_UP,'')<>COALESCE(OLD.NOME_UP,'')) THEN TXT=TXT||',NOME_UP = '||COALESCE(''''||NEW.NOME_UP||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENTO,'')<>COALESCE(OLD.COMPLEMENTO,'')) THEN TXT=TXT||',COMPLEMENTO = '||COALESCE(''''||NEW.COMPLEMENTO||'''','NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.ID_CIDADE,'')<>COALESCE(OLD.ID_CIDADE,'')) THEN TXT=TXT||',ID_CIDADE = '||COALESCE(NEW.ID_CIDADE,'NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.FAX,'')<>COALESCE(OLD.FAX,'')) THEN TXT=TXT||',FAX = '||COALESCE(''''||NEW.FAX||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (COALESCE(NEW.FOTO,'')<>COALESCE(OLD.FOTO,'')) THEN TXT=TXT||',FOTO = '||COALESCE(''''||NEW.FOTO||'''','NULL');
IF (COALESCE(NEW.CAPITAL,'')<>COALESCE(OLD.CAPITAL,'')) THEN TXT=TXT||',CAPITAL = '||COALESCE(''''||NEW.CAPITAL||'''','NULL');
IF (COALESCE(NEW.REGIAO,'')<>COALESCE(OLD.REGIAO,'')) THEN TXT=TXT||',REGIAO = '||COALESCE(''''||NEW.REGIAO||'''','NULL');
IF (COALESCE(NEW.SIGLA,'')<>COALESCE(OLD.SIGLA,'')) THEN TXT=TXT||',SIGLA = '||COALESCE(''''||NEW.SIGLA||'''','NULL');
IF (COALESCE(NEW.REGIME,'')<>COALESCE(OLD.REGIME,'')) THEN TXT=TXT||',REGIME = '||COALESCE(''''||NEW.REGIME||'''','NULL');
IF (COALESCE(NEW.GENERO,'')<>COALESCE(OLD.GENERO,'')) THEN TXT=TXT||',GENERO = '||COALESCE(''''||NEW.GENERO||'''','NULL');
IF (COALESCE(NEW.EMAIL,'')<>COALESCE(OLD.EMAIL,'')) THEN TXT=TXT||',EMAIL = '||COALESCE(''''||NEW.EMAIL||'''','NULL');
IF (COALESCE(NEW.CNPJ,'')<>COALESCE(OLD.CNPJ,'')) THEN TXT=TXT||',CNPJ = '||COALESCE(''''||NEW.CNPJ||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE UNIDADE_PENAL SET ID_UP = '''||NEW.ID_UP||''''||TXT||' WHERE ID_UP = '''||NEW.ID_UP||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'UNIDADE_PENAL', NEW.ID_UP,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: VINC_ARTIGO_AD_SINCRONISMO */
CREATE TRIGGER VINC_ARTIGO_AD_SINCRONISMO FOR VINC_ARTIGO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM VINC_ARTIGO WHERE ID_VINC_ARTIGO = '||OLD.ID_VINC_ARTIGO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: VINC_ARTIGO_AI_SINCRONISMO */
CREATE TRIGGER VINC_ARTIGO_AI_SINCRONISMO FOR VINC_ARTIGO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO VINC_ARTIGO (ID_VINC_ARTIGO,'
||' ID_ARTIGO,'
||' ID_PROCESSO) VALUES ('
||COALESCE(NEW.ID_VINC_ARTIGO,'NULL')||','
||COALESCE(NEW.ID_ARTIGO,'NULL')||','
||COALESCE(NEW.ID_PROCESSO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: VINC_ARTIGO_AU_SINCRONISMO */
CREATE TRIGGER VINC_ARTIGO_AU_SINCRONISMO FOR VINC_ARTIGO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_ARTIGO,'')<>COALESCE(OLD.ID_ARTIGO,'')) THEN TXT=TXT||',ID_ARTIGO = '||COALESCE(NEW.ID_ARTIGO,'NULL');
IF (COALESCE(NEW.ID_PROCESSO,'')<>COALESCE(OLD.ID_PROCESSO,'')) THEN TXT=TXT||',ID_PROCESSO = '||COALESCE(NEW.ID_PROCESSO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VINC_ARTIGO SET ID_VINC_ARTIGO = '''||NEW.ID_VINC_ARTIGO||''''||TXT||' WHERE ID_VINC_ARTIGO = '''||NEW.ID_VINC_ARTIGO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: VINC_ARTIGO_BD_LOG */
CREATE TRIGGER VINC_ARTIGO_BD_LOG FOR VINC_ARTIGO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VINC_ARTIGO (ID_VINC_ARTIGO,'
||' ID_ARTIGO,'
||' ID_PROCESSO) VALUES ('
||COALESCE(OLD.ID_VINC_ARTIGO,'NULL')||','
||COALESCE(OLD.ID_ARTIGO,'NULL')||','
||COALESCE(OLD.ID_PROCESSO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_ARTIGO', OLD.ID_VINC_ARTIGO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VINC_ARTIGO_BI0 */
CREATE TRIGGER VINC_ARTIGO_BI0 FOR VINC_ARTIGO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_vinc_artigo IS null or (new.id_vinc_artigo = 0)  ) then
    new.id_vinc_artigo = gen_id (cod_up, 0) || gen_id (idvincartigo, 1);
end
^

/* Trigger: VINC_ARTIGO_BI_LOG */
CREATE TRIGGER VINC_ARTIGO_BI_LOG FOR VINC_ARTIGO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VINC_ARTIGO (ID_VINC_ARTIGO,'
||' ID_ARTIGO,'
||' ID_PROCESSO) VALUES ('
||COALESCE(NEW.ID_VINC_ARTIGO,'NULL')||','
||COALESCE(NEW.ID_ARTIGO,'NULL')||','
||COALESCE(NEW.ID_PROCESSO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_ARTIGO', NEW.ID_VINC_ARTIGO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VINC_ARTIGO_BU_LOG */
CREATE TRIGGER VINC_ARTIGO_BU_LOG FOR VINC_ARTIGO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_ARTIGO,'')<>COALESCE(OLD.ID_ARTIGO,'')) THEN TXT=TXT||',ID_ARTIGO = '||COALESCE(NEW.ID_ARTIGO,'NULL');
IF (COALESCE(NEW.ID_PROCESSO,'')<>COALESCE(OLD.ID_PROCESSO,'')) THEN TXT=TXT||',ID_PROCESSO = '||COALESCE(NEW.ID_PROCESSO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VINC_ARTIGO SET ID_VINC_ARTIGO = '''||NEW.ID_VINC_ARTIGO||''''||TXT||' WHERE ID_VINC_ARTIGO = '''||NEW.ID_VINC_ARTIGO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_ARTIGO', NEW.ID_VINC_ARTIGO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: VINC_ARTIGO_PERFIL_AD_SINCRONIS */
CREATE TRIGGER VINC_ARTIGO_PERFIL_AD_SINCRONIS FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM VINC_ARTIGO_PERFIL WHERE ID_VINC_ARTIGO_PERFIL = '||OLD.ID_VINC_ARTIGO_PERFIL||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: VINC_ARTIGO_PERFIL_AI_SINCRONIS */
CREATE TRIGGER VINC_ARTIGO_PERFIL_AI_SINCRONIS FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO VINC_ARTIGO_PERFIL (ID_VINC_ARTIGO_PERFIL,'
||' ARTIGO_PERFIL,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_VINC_ARTIGO_PERFIL,'NULL')||','
||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: VINC_ARTIGO_PERFIL_AU_SINCRONIS */
CREATE TRIGGER VINC_ARTIGO_PERFIL_AU_SINCRONIS FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ARTIGO_PERFIL,'')<>COALESCE(OLD.ARTIGO_PERFIL,'')) THEN TXT=TXT||',ARTIGO_PERFIL = '||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VINC_ARTIGO_PERFIL SET ID_VINC_ARTIGO_PERFIL = '''||NEW.ID_VINC_ARTIGO_PERFIL||''''||TXT||' WHERE ID_VINC_ARTIGO_PERFIL = '''||NEW.ID_VINC_ARTIGO_PERFIL||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: VINC_ARTIGO_PERFIL_BD_LOG */
CREATE TRIGGER VINC_ARTIGO_PERFIL_BD_LOG FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VINC_ARTIGO_PERFIL (ID_VINC_ARTIGO_PERFIL,'
||' ARTIGO_PERFIL,'
||' ID_INTERNO) VALUES ('
||COALESCE(OLD.ID_VINC_ARTIGO_PERFIL,'NULL')||','
||COALESCE(''''||OLD.ARTIGO_PERFIL||'''','NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_ARTIGO_PERFIL', OLD.ID_VINC_ARTIGO_PERFIL,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VINC_ARTIGO_PERFIL_BI0 */
CREATE TRIGGER VINC_ARTIGO_PERFIL_BI0 FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_vinc_artigo_perfil IS null or (new.id_vinc_artigo_perfil = 0)  ) then
    new.id_vinc_artigo_perfil = gen_id (cod_up, 0) || gen_id (idvincartigo_perfil, 1);
end
^

/* Trigger: VINC_ARTIGO_PERFIL_BI_LOG */
CREATE TRIGGER VINC_ARTIGO_PERFIL_BI_LOG FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VINC_ARTIGO_PERFIL (ID_VINC_ARTIGO_PERFIL,'
||' ARTIGO_PERFIL,'
||' ID_INTERNO) VALUES ('
||COALESCE(NEW.ID_VINC_ARTIGO_PERFIL,'NULL')||','
||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_ARTIGO_PERFIL', NEW.ID_VINC_ARTIGO_PERFIL,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VINC_ARTIGO_PERFIL_BU_LOG */
CREATE TRIGGER VINC_ARTIGO_PERFIL_BU_LOG FOR VINC_ARTIGO_PERFIL
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ARTIGO_PERFIL,'')<>COALESCE(OLD.ARTIGO_PERFIL,'')) THEN TXT=TXT||',ARTIGO_PERFIL = '||COALESCE(''''||NEW.ARTIGO_PERFIL||'''','NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VINC_ARTIGO_PERFIL SET ID_VINC_ARTIGO_PERFIL = '''||NEW.ID_VINC_ARTIGO_PERFIL||''''||TXT||' WHERE ID_VINC_ARTIGO_PERFIL = '''||NEW.ID_VINC_ARTIGO_PERFIL||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_ARTIGO_PERFIL', NEW.ID_VINC_ARTIGO_PERFIL,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: VINC_FALTA_DISCIPLINAR_AD_SINCR */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_AD_SINCR FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 10:42:30.6830
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM VINC_FALTA_DISCIPLINAR WHERE ID_VINC_FALTA_DISCIPLINAR = '||OLD.ID_VINC_FALTA_DISCIPLINAR||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: VINC_FALTA_DISCIPLINAR_AI_SINCR */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_AI_SINCR FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 10:42:30.6830

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO VINC_FALTA_DISCIPLINAR (ID_VINC_FALTA_DISCIPLINAR,'
||' ID_FALTA_DISCIPLINAR,'
||' ID_INTERNO,'
||' DATA_INCIDENCIA,'
||' DATA_REABILITACAO,'
||' OBS,'
||' CONCLUSAOCD,'
||' NUMERO_PDI,'
||' DATA_CONDENACAO,'
||' RESULTADO,'
||' DATA_RESULTADO) VALUES ('
||COALESCE(NEW.ID_VINC_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(NEW.ID_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_INCIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||','
||COALESCE(''''||NEW.CONCLUSAOCD||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_PDI||'''','NULL')||','
||COALESCE(''''||NEW.DATA_CONDENACAO||'''','NULL')||','
||COALESCE(''''||NEW.RESULTADO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_RESULTADO||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: VINC_FALTA_DISCIPLINAR_AU_SINCR */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_AU_SINCR FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 10:42:30.6830
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_FALTA_DISCIPLINAR,'')<>COALESCE(OLD.ID_FALTA_DISCIPLINAR,'')) THEN TXT=TXT||',ID_FALTA_DISCIPLINAR = '||COALESCE(NEW.ID_FALTA_DISCIPLINAR,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_INCIDENCIA,'')<>COALESCE(OLD.DATA_INCIDENCIA,'')) THEN TXT=TXT||',DATA_INCIDENCIA = '||COALESCE(''''||NEW.DATA_INCIDENCIA||'''','NULL');
IF (COALESCE(NEW.DATA_REABILITACAO,'')<>COALESCE(OLD.DATA_REABILITACAO,'')) THEN TXT=TXT||',DATA_REABILITACAO = '||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (COALESCE(NEW.CONCLUSAOCD,'')<>COALESCE(OLD.CONCLUSAOCD,'')) THEN TXT=TXT||',CONCLUSAOCD = '||COALESCE(''''||NEW.CONCLUSAOCD||'''','NULL');
IF (COALESCE(NEW.NUMERO_PDI,'')<>COALESCE(OLD.NUMERO_PDI,'')) THEN TXT=TXT||',NUMERO_PDI = '||COALESCE(''''||NEW.NUMERO_PDI||'''','NULL');
IF (COALESCE(NEW.DATA_CONDENACAO,'')<>COALESCE(OLD.DATA_CONDENACAO,'')) THEN TXT=TXT||',DATA_CONDENACAO = '||COALESCE(''''||NEW.DATA_CONDENACAO||'''','NULL');
IF (COALESCE(NEW.RESULTADO,'')<>COALESCE(OLD.RESULTADO,'')) THEN TXT=TXT||',RESULTADO = '||COALESCE(''''||NEW.RESULTADO||'''','NULL');
IF (COALESCE(NEW.DATA_RESULTADO,'')<>COALESCE(OLD.DATA_RESULTADO,'')) THEN TXT=TXT||',DATA_RESULTADO = '||COALESCE(''''||NEW.DATA_RESULTADO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VINC_FALTA_DISCIPLINAR SET ID_VINC_FALTA_DISCIPLINAR = '''||NEW.ID_VINC_FALTA_DISCIPLINAR||''''||TXT||' WHERE ID_VINC_FALTA_DISCIPLINAR = '''||NEW.ID_VINC_FALTA_DISCIPLINAR||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: VINC_FALTA_DISCIPLINAR_BD_LOG */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_BD_LOG FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 10:40:55.7920

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VINC_FALTA_DISCIPLINAR (ID_VINC_FALTA_DISCIPLINAR,'
||' ID_FALTA_DISCIPLINAR,'
||' ID_INTERNO,'
||' DATA_INCIDENCIA,'
||' DATA_REABILITACAO,'
||' OBS,'
||' CONCLUSAOCD,'
||' NUMERO_PDI,'
||' DATA_CONDENACAO,'
||' RESULTADO,'
||' DATA_RESULTADO) VALUES ('
||COALESCE(OLD.ID_VINC_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(OLD.ID_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.DATA_INCIDENCIA||'''','NULL')||','
||COALESCE(''''||OLD.DATA_REABILITACAO||'''','NULL')||','
||COALESCE(''''||OLD.OBS||'''','NULL')||','
||COALESCE(''''||OLD.CONCLUSAOCD||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO_PDI||'''','NULL')||','
||COALESCE(''''||OLD.DATA_CONDENACAO||'''','NULL')||','
||COALESCE(''''||OLD.RESULTADO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_RESULTADO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_FALTA_DISCIPLINAR', OLD.ID_VINC_FALTA_DISCIPLINAR,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VINC_FALTA_DISCIPLINAR_BI0 */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_BI0 FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* Trigger text */
    if (NEW.id_vinc_falta_disciplinar IS null or (new.id_vinc_falta_disciplinar = 0)  ) then
    new.id_vinc_falta_disciplinar = gen_id (cod_up, 0) || gen_id (idvincfalta_disciplinar, 1);
end
^

/* Trigger: VINC_FALTA_DISCIPLINAR_BI_LOG */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_BI_LOG FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 10:40:55.7920

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VINC_FALTA_DISCIPLINAR (ID_VINC_FALTA_DISCIPLINAR,'
||' ID_FALTA_DISCIPLINAR,'
||' ID_INTERNO,'
||' DATA_INCIDENCIA,'
||' DATA_REABILITACAO,'
||' OBS,'
||' CONCLUSAOCD,'
||' NUMERO_PDI,'
||' DATA_CONDENACAO,'
||' RESULTADO,'
||' DATA_RESULTADO) VALUES ('
||COALESCE(NEW.ID_VINC_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(NEW.ID_FALTA_DISCIPLINAR,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.DATA_INCIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL')||','
||COALESCE(''''||NEW.OBS||'''','NULL')||','
||COALESCE(''''||NEW.CONCLUSAOCD||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_PDI||'''','NULL')||','
||COALESCE(''''||NEW.DATA_CONDENACAO||'''','NULL')||','
||COALESCE(''''||NEW.RESULTADO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_RESULTADO||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_FALTA_DISCIPLINAR', NEW.ID_VINC_FALTA_DISCIPLINAR,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VINC_FALTA_DISCIPLINAR_BU_LOG */
CREATE TRIGGER VINC_FALTA_DISCIPLINAR_BU_LOG FOR VINC_FALTA_DISCIPLINAR
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 10:40:55.7920
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_FALTA_DISCIPLINAR,'')<>COALESCE(OLD.ID_FALTA_DISCIPLINAR,'')) THEN TXT=TXT||',ID_FALTA_DISCIPLINAR = '||COALESCE(NEW.ID_FALTA_DISCIPLINAR,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.DATA_INCIDENCIA,'')<>COALESCE(OLD.DATA_INCIDENCIA,'')) THEN TXT=TXT||',DATA_INCIDENCIA = '||COALESCE(''''||NEW.DATA_INCIDENCIA||'''','NULL');
IF (COALESCE(NEW.DATA_REABILITACAO,'')<>COALESCE(OLD.DATA_REABILITACAO,'')) THEN TXT=TXT||',DATA_REABILITACAO = '||COALESCE(''''||NEW.DATA_REABILITACAO||'''','NULL');
IF (COALESCE(NEW.OBS,'')<>COALESCE(OLD.OBS,'')) THEN TXT=TXT||',OBS = '||COALESCE(''''||NEW.OBS||'''','NULL');
IF (COALESCE(NEW.CONCLUSAOCD,'')<>COALESCE(OLD.CONCLUSAOCD,'')) THEN TXT=TXT||',CONCLUSAOCD = '||COALESCE(''''||NEW.CONCLUSAOCD||'''','NULL');
IF (COALESCE(NEW.NUMERO_PDI,'')<>COALESCE(OLD.NUMERO_PDI,'')) THEN TXT=TXT||',NUMERO_PDI = '||COALESCE(''''||NEW.NUMERO_PDI||'''','NULL');
IF (COALESCE(NEW.DATA_CONDENACAO,'')<>COALESCE(OLD.DATA_CONDENACAO,'')) THEN TXT=TXT||',DATA_CONDENACAO = '||COALESCE(''''||NEW.DATA_CONDENACAO||'''','NULL');
IF (COALESCE(NEW.RESULTADO,'')<>COALESCE(OLD.RESULTADO,'')) THEN TXT=TXT||',RESULTADO = '||COALESCE(''''||NEW.RESULTADO||'''','NULL');
IF (COALESCE(NEW.DATA_RESULTADO,'')<>COALESCE(OLD.DATA_RESULTADO,'')) THEN TXT=TXT||',DATA_RESULTADO = '||COALESCE(''''||NEW.DATA_RESULTADO||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VINC_FALTA_DISCIPLINAR SET ID_VINC_FALTA_DISCIPLINAR = '''||NEW.ID_VINC_FALTA_DISCIPLINAR||''''||TXT||' WHERE ID_VINC_FALTA_DISCIPLINAR = '''||NEW.ID_VINC_FALTA_DISCIPLINAR||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VINC_FALTA_DISCIPLINAR', NEW.ID_VINC_FALTA_DISCIPLINAR,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: VISITANTE_AD_SINCRONISMO */
CREATE TRIGGER VISITANTE_AD_SINCRONISMO FOR VISITANTE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 09:40:36.3350
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM VISITANTE WHERE ID_VISITANTE = '||OLD.ID_VISITANTE||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: VISITANTE_AI_MOVDIARIO */
CREATE TRIGGER VISITANTE_AI_MOVDIARIO FOR VISITANTE
ACTIVE AFTER INSERT POSITION 0
AS
begin
--  insert into mov_diario_visitantes (id_mov_diario_visitantes, id_visitante, nome_visitante, numero_carteirinha, cpf, rg, orgao_expedidor, sexo, data_visita, hora_visita, ordem_visita)
--  values (0, new.id_visitante, new.visitante, new.numero_carteirinha, new.cpf, new.rg, new.orgao_expedidor, new.sexo, current_date, current_time, 0);
end
^

/* Trigger: VISITANTE_AI_SINCRONISMO */
CREATE TRIGGER VISITANTE_AI_SINCRONISMO FOR VISITANTE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 09:40:36.3350

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO VISITANTE (ID_VISITANTE,'
||' VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_CADASTRO,'
||' STATUS,'
||' DATA_ULT_VISITA,'
||' MOTIVO_INATIVO,'
||' QUANTIDADE_MENOR,'
||' ID_UP,'
||' DATA_EMISSAO_RG,'
||' COMPROVANTE_RESIDENCIA,'
||' CERTIDAO,'
||' CERTIDAO_ANTECEDENTE_CRIMINAL,'
||' PAI,'
||' MAE,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENETO,'
||' IDCIDADE,'
||' CEP,'
||' FONE,'
||' CONTATO,'
||' DATA_NASCIMENTO,'
||' TIPO_VISITANTE,'
||' NEGATIVO_CERTIDAO_FEDERAL,'
||' NEGATIVO_CERTIDAO_ESTADUAL,'
||' TEM_COMPROVANTE_RESIDENCIA,'
||' NUMERO_CERTIDAO_NASCIMENTO,'
||' ID_NACIONALIDADE,'
||' ID_NATURALIDADE,'
||' TITULO_ELEITOR) VALUES ('
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.VISITANTE||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ULT_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_INATIVO||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE_MENOR,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.DATA_EMISSAO_RG||'''','NULL')||','
||COALESCE(''''||NEW.COMPROVANTE_RESIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.CERTIDAO||'''','NULL')||','
||COALESCE(''''||NEW.CERTIDAO_ANTECEDENTE_CRIMINAL||'''','NULL')||','
||COALESCE(''''||NEW.PAI||'''','NULL')||','
||COALESCE(''''||NEW.MAE||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENETO||'''','NULL')||','
||COALESCE(NEW.IDCIDADE,'NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_VISITANTE||'''','NULL')||','
||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_FEDERAL||'''','NULL')||','
||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_ESTADUAL||'''','NULL')||','
||COALESCE(''''||NEW.TEM_COMPROVANTE_RESIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL')||','
||COALESCE(NEW.ID_NACIONALIDADE,'NULL')||','
||COALESCE(NEW.ID_NATURALIDADE,'NULL')||','
||COALESCE(''''||NEW.TITULO_ELEITOR||'''','NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: VISITANTE_AU_SINCRONISMO */
CREATE TRIGGER VISITANTE_AU_SINCRONISMO FOR VISITANTE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 09:40:36.3350
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.VISITANTE,'')<>COALESCE(OLD.VISITANTE,'')) THEN TXT=TXT||',VISITANTE = '||COALESCE(''''||NEW.VISITANTE||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.NUMERO_CARTEIRINHA,'')<>COALESCE(OLD.NUMERO_CARTEIRINHA,'')) THEN TXT=TXT||',NUMERO_CARTEIRINHA = '||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.DATA_CADASTRO,'')<>COALESCE(OLD.DATA_CADASTRO,'')) THEN TXT=TXT||',DATA_CADASTRO = '||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.DATA_ULT_VISITA,'')<>COALESCE(OLD.DATA_ULT_VISITA,'')) THEN TXT=TXT||',DATA_ULT_VISITA = '||COALESCE(''''||NEW.DATA_ULT_VISITA||'''','NULL');
IF (COALESCE(NEW.MOTIVO_INATIVO,'')<>COALESCE(OLD.MOTIVO_INATIVO,'')) THEN TXT=TXT||',MOTIVO_INATIVO = '||COALESCE(''''||NEW.MOTIVO_INATIVO||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE_MENOR,'')<>COALESCE(OLD.QUANTIDADE_MENOR,'')) THEN TXT=TXT||',QUANTIDADE_MENOR = '||COALESCE(NEW.QUANTIDADE_MENOR,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.DATA_EMISSAO_RG,'')<>COALESCE(OLD.DATA_EMISSAO_RG,'')) THEN TXT=TXT||',DATA_EMISSAO_RG = '||COALESCE(''''||NEW.DATA_EMISSAO_RG||'''','NULL');
IF (COALESCE(NEW.COMPROVANTE_RESIDENCIA,'')<>COALESCE(OLD.COMPROVANTE_RESIDENCIA,'')) THEN TXT=TXT||',COMPROVANTE_RESIDENCIA = '||COALESCE(''''||NEW.COMPROVANTE_RESIDENCIA||'''','NULL');
IF (COALESCE(NEW.CERTIDAO,'')<>COALESCE(OLD.CERTIDAO,'')) THEN TXT=TXT||',CERTIDAO = '||COALESCE(''''||NEW.CERTIDAO||'''','NULL');
IF (COALESCE(NEW.CERTIDAO_ANTECEDENTE_CRIMINAL,'')<>COALESCE(OLD.CERTIDAO_ANTECEDENTE_CRIMINAL,'')) THEN TXT=TXT||',CERTIDAO_ANTECEDENTE_CRIMINAL = '||COALESCE(''''||NEW.CERTIDAO_ANTECEDENTE_CRIMINAL||'''','NULL');
IF (COALESCE(NEW.PAI,'')<>COALESCE(OLD.PAI,'')) THEN TXT=TXT||',PAI = '||COALESCE(''''||NEW.PAI||'''','NULL');
IF (COALESCE(NEW.MAE,'')<>COALESCE(OLD.MAE,'')) THEN TXT=TXT||',MAE = '||COALESCE(''''||NEW.MAE||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENETO,'')<>COALESCE(OLD.COMPLEMENETO,'')) THEN TXT=TXT||',COMPLEMENETO = '||COALESCE(''''||NEW.COMPLEMENETO||'''','NULL');
IF (COALESCE(NEW.IDCIDADE,'')<>COALESCE(OLD.IDCIDADE,'')) THEN TXT=TXT||',IDCIDADE = '||COALESCE(NEW.IDCIDADE,'NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.TIPO_VISITANTE,'')<>COALESCE(OLD.TIPO_VISITANTE,'')) THEN TXT=TXT||',TIPO_VISITANTE = '||COALESCE(''''||NEW.TIPO_VISITANTE||'''','NULL');
IF (COALESCE(NEW.NEGATIVO_CERTIDAO_FEDERAL,'')<>COALESCE(OLD.NEGATIVO_CERTIDAO_FEDERAL,'')) THEN TXT=TXT||',NEGATIVO_CERTIDAO_FEDERAL = '||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_FEDERAL||'''','NULL');
IF (COALESCE(NEW.NEGATIVO_CERTIDAO_ESTADUAL,'')<>COALESCE(OLD.NEGATIVO_CERTIDAO_ESTADUAL,'')) THEN TXT=TXT||',NEGATIVO_CERTIDAO_ESTADUAL = '||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_ESTADUAL||'''','NULL');
IF (COALESCE(NEW.TEM_COMPROVANTE_RESIDENCIA,'')<>COALESCE(OLD.TEM_COMPROVANTE_RESIDENCIA,'')) THEN TXT=TXT||',TEM_COMPROVANTE_RESIDENCIA = '||COALESCE(''''||NEW.TEM_COMPROVANTE_RESIDENCIA||'''','NULL');
IF (COALESCE(NEW.NUMERO_CERTIDAO_NASCIMENTO,'')<>COALESCE(OLD.NUMERO_CERTIDAO_NASCIMENTO,'')) THEN TXT=TXT||',NUMERO_CERTIDAO_NASCIMENTO = '||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.ID_NACIONALIDADE,'')<>COALESCE(OLD.ID_NACIONALIDADE,'')) THEN TXT=TXT||',ID_NACIONALIDADE = '||COALESCE(NEW.ID_NACIONALIDADE,'NULL');
IF (COALESCE(NEW.ID_NATURALIDADE,'')<>COALESCE(OLD.ID_NATURALIDADE,'')) THEN TXT=TXT||',ID_NATURALIDADE = '||COALESCE(NEW.ID_NATURALIDADE,'NULL');
IF (COALESCE(NEW.TITULO_ELEITOR,'')<>COALESCE(OLD.TITULO_ELEITOR,'')) THEN TXT=TXT||',TITULO_ELEITOR = '||COALESCE(''''||NEW.TITULO_ELEITOR||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VISITANTE SET ID_VISITANTE = '''||NEW.ID_VISITANTE||''''||TXT||' WHERE ID_VISITANTE = '''||NEW.ID_VISITANTE||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: VISITANTE_BD_LOG */
CREATE TRIGGER VISITANTE_BD_LOG FOR VISITANTE
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 09:40:06.5450

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VISITANTE (ID_VISITANTE,'
||' VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_CADASTRO,'
||' STATUS,'
||' DATA_ULT_VISITA,'
||' MOTIVO_INATIVO,'
||' QUANTIDADE_MENOR,'
||' ID_UP,'
||' DATA_EMISSAO_RG,'
||' COMPROVANTE_RESIDENCIA,'
||' CERTIDAO,'
||' CERTIDAO_ANTECEDENTE_CRIMINAL,'
||' PAI,'
||' MAE,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENETO,'
||' IDCIDADE,'
||' CEP,'
||' FONE,'
||' CONTATO,'
||' DATA_NASCIMENTO,'
||' TIPO_VISITANTE,'
||' NEGATIVO_CERTIDAO_FEDERAL,'
||' NEGATIVO_CERTIDAO_ESTADUAL,'
||' TEM_COMPROVANTE_RESIDENCIA,'
||' NUMERO_CERTIDAO_NASCIMENTO,'
||' ID_NACIONALIDADE,'
||' ID_NATURALIDADE,'
||' TITULO_ELEITOR) VALUES ('
||COALESCE(OLD.ID_VISITANTE,'NULL')||','
||COALESCE(''''||OLD.VISITANTE||'''','NULL')||','
||COALESCE(OLD.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(''''||OLD.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||OLD.CPF||'''','NULL')||','
||COALESCE(''''||OLD.RG||'''','NULL')||','
||COALESCE(''''||OLD.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||OLD.SEXO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_CADASTRO||'''','NULL')||','
||COALESCE(''''||OLD.STATUS||'''','NULL')||','
||COALESCE(''''||OLD.DATA_ULT_VISITA||'''','NULL')||','
||COALESCE(''''||OLD.MOTIVO_INATIVO||'''','NULL')||','
||COALESCE(OLD.QUANTIDADE_MENOR,'NULL')||','
||COALESCE(OLD.ID_UP,'NULL')||','
||COALESCE(''''||OLD.DATA_EMISSAO_RG||'''','NULL')||','
||COALESCE(''''||OLD.COMPROVANTE_RESIDENCIA||'''','NULL')||','
||COALESCE(''''||OLD.CERTIDAO||'''','NULL')||','
||COALESCE(''''||OLD.CERTIDAO_ANTECEDENTE_CRIMINAL||'''','NULL')||','
||COALESCE(''''||OLD.PAI||'''','NULL')||','
||COALESCE(''''||OLD.MAE||'''','NULL')||','
||COALESCE(''''||OLD.ENDERECO||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO||'''','NULL')||','
||COALESCE(''''||OLD.BAIRRO||'''','NULL')||','
||COALESCE(''''||OLD.COMPLEMENETO||'''','NULL')||','
||COALESCE(OLD.IDCIDADE,'NULL')||','
||COALESCE(''''||OLD.CEP||'''','NULL')||','
||COALESCE(''''||OLD.FONE||'''','NULL')||','
||COALESCE(''''||OLD.CONTATO||'''','NULL')||','
||COALESCE(''''||OLD.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||OLD.TIPO_VISITANTE||'''','NULL')||','
||COALESCE(''''||OLD.NEGATIVO_CERTIDAO_FEDERAL||'''','NULL')||','
||COALESCE(''''||OLD.NEGATIVO_CERTIDAO_ESTADUAL||'''','NULL')||','
||COALESCE(''''||OLD.TEM_COMPROVANTE_RESIDENCIA||'''','NULL')||','
||COALESCE(''''||OLD.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL')||','
||COALESCE(OLD.ID_NACIONALIDADE,'NULL')||','
||COALESCE(OLD.ID_NATURALIDADE,'NULL')||','
||COALESCE(''''||OLD.TITULO_ELEITOR||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VISITANTE', OLD.ID_VISITANTE,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VISITANTE_BI0 */
CREATE TRIGGER VISITANTE_BI0 FOR VISITANTE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  NEW.status = 'A';
  new.data_cadastro = current_date ;
--  new.data_ult_visita = current_date ;
  /* Trigger text */
    if (NEW.id_visitante IS null or (new.id_visitante = 0)  ) then
    new.id_visitante = gen_id (cod_up, 0) || gen_id (id_visitante, 1);
end
^

/* Trigger: VISITANTE_BIU0 */
CREATE TRIGGER VISITANTE_BIU0 FOR VISITANTE
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN

 INSERT INTO BACKUP_VISITANTE (IDBACKUP_VISITANTE, 
                               DATA_HORA, 
                               ID_VISITANTE, 
                               VISITANTE, 
                               ID_GRAU_PARENTESCO, 
                               ID_INTERNO, 
                               NUMERO_CARTEIRINHA, 
                               CPF, 
                               RG, 
                               ORGAO_EXPEDIDOR, 
                               SEXO, 
                               DATA_CADASTRO, 
                               STATUS, 
                               DATA_ULT_VISITA, 
                               TIPO_REGISTRO,
                               MOTIVO_INATIVO)
 VALUES (0,
         'NOW',
         NEW.ID_VISITANTE, 
         NEW.VISITANTE, 
         NEW.ID_GRAU_PARENTESCO, 
         NEW.ID_INTERNO, 
         NEW.NUMERO_CARTEIRINHA, 
         NEW.CPF, 
         NEW.RG, 
         NEW.ORGAO_EXPEDIDOR, 
         NEW.SEXO, 
         NEW.DATA_CADASTRO, 
         NEW.STATUS, 
         NEW.DATA_ULT_VISITA, 
         IIF(INSERTING,'I','U'),
         NEW.MOTIVO_INATIVO);

END
^

/* Trigger: VISITANTE_BI_LOG */
CREATE TRIGGER VISITANTE_BI_LOG FOR VISITANTE
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 09:40:06.5450

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VISITANTE (ID_VISITANTE,'
||' VISITANTE,'
||' ID_GRAU_PARENTESCO,'
||' ID_INTERNO,'
||' NUMERO_CARTEIRINHA,'
||' CPF,'
||' RG,'
||' ORGAO_EXPEDIDOR,'
||' SEXO,'
||' DATA_CADASTRO,'
||' STATUS,'
||' DATA_ULT_VISITA,'
||' MOTIVO_INATIVO,'
||' QUANTIDADE_MENOR,'
||' ID_UP,'
||' DATA_EMISSAO_RG,'
||' COMPROVANTE_RESIDENCIA,'
||' CERTIDAO,'
||' CERTIDAO_ANTECEDENTE_CRIMINAL,'
||' PAI,'
||' MAE,'
||' ENDERECO,'
||' NUMERO,'
||' BAIRRO,'
||' COMPLEMENETO,'
||' IDCIDADE,'
||' CEP,'
||' FONE,'
||' CONTATO,'
||' DATA_NASCIMENTO,'
||' TIPO_VISITANTE,'
||' NEGATIVO_CERTIDAO_FEDERAL,'
||' NEGATIVO_CERTIDAO_ESTADUAL,'
||' TEM_COMPROVANTE_RESIDENCIA,'
||' NUMERO_CERTIDAO_NASCIMENTO,'
||' ID_NACIONALIDADE,'
||' ID_NATURALIDADE,'
||' TITULO_ELEITOR) VALUES ('
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(''''||NEW.VISITANTE||'''','NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL')||','
||COALESCE(''''||NEW.CPF||'''','NULL')||','
||COALESCE(''''||NEW.RG||'''','NULL')||','
||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL')||','
||COALESCE(''''||NEW.SEXO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL')||','
||COALESCE(''''||NEW.STATUS||'''','NULL')||','
||COALESCE(''''||NEW.DATA_ULT_VISITA||'''','NULL')||','
||COALESCE(''''||NEW.MOTIVO_INATIVO||'''','NULL')||','
||COALESCE(NEW.QUANTIDADE_MENOR,'NULL')||','
||COALESCE(NEW.ID_UP,'NULL')||','
||COALESCE(''''||NEW.DATA_EMISSAO_RG||'''','NULL')||','
||COALESCE(''''||NEW.COMPROVANTE_RESIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.CERTIDAO||'''','NULL')||','
||COALESCE(''''||NEW.CERTIDAO_ANTECEDENTE_CRIMINAL||'''','NULL')||','
||COALESCE(''''||NEW.PAI||'''','NULL')||','
||COALESCE(''''||NEW.MAE||'''','NULL')||','
||COALESCE(''''||NEW.ENDERECO||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO||'''','NULL')||','
||COALESCE(''''||NEW.BAIRRO||'''','NULL')||','
||COALESCE(''''||NEW.COMPLEMENETO||'''','NULL')||','
||COALESCE(NEW.IDCIDADE,'NULL')||','
||COALESCE(''''||NEW.CEP||'''','NULL')||','
||COALESCE(''''||NEW.FONE||'''','NULL')||','
||COALESCE(''''||NEW.CONTATO||'''','NULL')||','
||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL')||','
||COALESCE(''''||NEW.TIPO_VISITANTE||'''','NULL')||','
||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_FEDERAL||'''','NULL')||','
||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_ESTADUAL||'''','NULL')||','
||COALESCE(''''||NEW.TEM_COMPROVANTE_RESIDENCIA||'''','NULL')||','
||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL')||','
||COALESCE(NEW.ID_NACIONALIDADE,'NULL')||','
||COALESCE(NEW.ID_NATURALIDADE,'NULL')||','
||COALESCE(''''||NEW.TITULO_ELEITOR||'''','NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VISITANTE', NEW.ID_VISITANTE,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VISITANTE_BU_DATA_VISITA */
CREATE TRIGGER VISITANTE_BU_DATA_VISITA FOR VISITANTE
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
if (updating) then
begin
    if (new.data_ult_visita is not null) then
    begin
        if ((new.data_ult_visita <> old.data_ult_visita) or (old.data_ult_visita is null))  then
        begin
          insert into mov_diario_visitantes (id_mov_diario_visitantes, id_visitante, nome_visitante, numero_carteirinha, cpf, rg, orgao_expedidor, sexo, data_visita, hora_visita, ordem_visita)
          values (0, new.id_visitante, new.visitante, new.numero_carteirinha, new.cpf, new.rg, new.orgao_expedidor, new.sexo, current_date, current_time, 0);
        end
    end
end

end
^

/* Trigger: VISITANTE_BU_LOG */
CREATE TRIGGER VISITANTE_BU_LOG FOR VISITANTE
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-05-02 09:40:06.5450
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.VISITANTE,'')<>COALESCE(OLD.VISITANTE,'')) THEN TXT=TXT||',VISITANTE = '||COALESCE(''''||NEW.VISITANTE||'''','NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.NUMERO_CARTEIRINHA,'')<>COALESCE(OLD.NUMERO_CARTEIRINHA,'')) THEN TXT=TXT||',NUMERO_CARTEIRINHA = '||COALESCE(''''||NEW.NUMERO_CARTEIRINHA||'''','NULL');
IF (COALESCE(NEW.CPF,'')<>COALESCE(OLD.CPF,'')) THEN TXT=TXT||',CPF = '||COALESCE(''''||NEW.CPF||'''','NULL');
IF (COALESCE(NEW.RG,'')<>COALESCE(OLD.RG,'')) THEN TXT=TXT||',RG = '||COALESCE(''''||NEW.RG||'''','NULL');
IF (COALESCE(NEW.ORGAO_EXPEDIDOR,'')<>COALESCE(OLD.ORGAO_EXPEDIDOR,'')) THEN TXT=TXT||',ORGAO_EXPEDIDOR = '||COALESCE(''''||NEW.ORGAO_EXPEDIDOR||'''','NULL');
IF (COALESCE(NEW.SEXO,'')<>COALESCE(OLD.SEXO,'')) THEN TXT=TXT||',SEXO = '||COALESCE(''''||NEW.SEXO||'''','NULL');
IF (COALESCE(NEW.DATA_CADASTRO,'')<>COALESCE(OLD.DATA_CADASTRO,'')) THEN TXT=TXT||',DATA_CADASTRO = '||COALESCE(''''||NEW.DATA_CADASTRO||'''','NULL');
IF (COALESCE(NEW.STATUS,'')<>COALESCE(OLD.STATUS,'')) THEN TXT=TXT||',STATUS = '||COALESCE(''''||NEW.STATUS||'''','NULL');
IF (COALESCE(NEW.DATA_ULT_VISITA,'')<>COALESCE(OLD.DATA_ULT_VISITA,'')) THEN TXT=TXT||',DATA_ULT_VISITA = '||COALESCE(''''||NEW.DATA_ULT_VISITA||'''','NULL');
IF (COALESCE(NEW.MOTIVO_INATIVO,'')<>COALESCE(OLD.MOTIVO_INATIVO,'')) THEN TXT=TXT||',MOTIVO_INATIVO = '||COALESCE(''''||NEW.MOTIVO_INATIVO||'''','NULL');
IF (COALESCE(NEW.QUANTIDADE_MENOR,'')<>COALESCE(OLD.QUANTIDADE_MENOR,'')) THEN TXT=TXT||',QUANTIDADE_MENOR = '||COALESCE(NEW.QUANTIDADE_MENOR,'NULL');
IF (COALESCE(NEW.ID_UP,'')<>COALESCE(OLD.ID_UP,'')) THEN TXT=TXT||',ID_UP = '||COALESCE(NEW.ID_UP,'NULL');
IF (COALESCE(NEW.DATA_EMISSAO_RG,'')<>COALESCE(OLD.DATA_EMISSAO_RG,'')) THEN TXT=TXT||',DATA_EMISSAO_RG = '||COALESCE(''''||NEW.DATA_EMISSAO_RG||'''','NULL');
IF (COALESCE(NEW.COMPROVANTE_RESIDENCIA,'')<>COALESCE(OLD.COMPROVANTE_RESIDENCIA,'')) THEN TXT=TXT||',COMPROVANTE_RESIDENCIA = '||COALESCE(''''||NEW.COMPROVANTE_RESIDENCIA||'''','NULL');
IF (COALESCE(NEW.CERTIDAO,'')<>COALESCE(OLD.CERTIDAO,'')) THEN TXT=TXT||',CERTIDAO = '||COALESCE(''''||NEW.CERTIDAO||'''','NULL');
IF (COALESCE(NEW.CERTIDAO_ANTECEDENTE_CRIMINAL,'')<>COALESCE(OLD.CERTIDAO_ANTECEDENTE_CRIMINAL,'')) THEN TXT=TXT||',CERTIDAO_ANTECEDENTE_CRIMINAL = '||COALESCE(''''||NEW.CERTIDAO_ANTECEDENTE_CRIMINAL||'''','NULL');
IF (COALESCE(NEW.PAI,'')<>COALESCE(OLD.PAI,'')) THEN TXT=TXT||',PAI = '||COALESCE(''''||NEW.PAI||'''','NULL');
IF (COALESCE(NEW.MAE,'')<>COALESCE(OLD.MAE,'')) THEN TXT=TXT||',MAE = '||COALESCE(''''||NEW.MAE||'''','NULL');
IF (COALESCE(NEW.ENDERECO,'')<>COALESCE(OLD.ENDERECO,'')) THEN TXT=TXT||',ENDERECO = '||COALESCE(''''||NEW.ENDERECO||'''','NULL');
IF (COALESCE(NEW.NUMERO,'')<>COALESCE(OLD.NUMERO,'')) THEN TXT=TXT||',NUMERO = '||COALESCE(''''||NEW.NUMERO||'''','NULL');
IF (COALESCE(NEW.BAIRRO,'')<>COALESCE(OLD.BAIRRO,'')) THEN TXT=TXT||',BAIRRO = '||COALESCE(''''||NEW.BAIRRO||'''','NULL');
IF (COALESCE(NEW.COMPLEMENETO,'')<>COALESCE(OLD.COMPLEMENETO,'')) THEN TXT=TXT||',COMPLEMENETO = '||COALESCE(''''||NEW.COMPLEMENETO||'''','NULL');
IF (COALESCE(NEW.IDCIDADE,'')<>COALESCE(OLD.IDCIDADE,'')) THEN TXT=TXT||',IDCIDADE = '||COALESCE(NEW.IDCIDADE,'NULL');
IF (COALESCE(NEW.CEP,'')<>COALESCE(OLD.CEP,'')) THEN TXT=TXT||',CEP = '||COALESCE(''''||NEW.CEP||'''','NULL');
IF (COALESCE(NEW.FONE,'')<>COALESCE(OLD.FONE,'')) THEN TXT=TXT||',FONE = '||COALESCE(''''||NEW.FONE||'''','NULL');
IF (COALESCE(NEW.CONTATO,'')<>COALESCE(OLD.CONTATO,'')) THEN TXT=TXT||',CONTATO = '||COALESCE(''''||NEW.CONTATO||'''','NULL');
IF (COALESCE(NEW.DATA_NASCIMENTO,'')<>COALESCE(OLD.DATA_NASCIMENTO,'')) THEN TXT=TXT||',DATA_NASCIMENTO = '||COALESCE(''''||NEW.DATA_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.TIPO_VISITANTE,'')<>COALESCE(OLD.TIPO_VISITANTE,'')) THEN TXT=TXT||',TIPO_VISITANTE = '||COALESCE(''''||NEW.TIPO_VISITANTE||'''','NULL');
IF (COALESCE(NEW.NEGATIVO_CERTIDAO_FEDERAL,'')<>COALESCE(OLD.NEGATIVO_CERTIDAO_FEDERAL,'')) THEN TXT=TXT||',NEGATIVO_CERTIDAO_FEDERAL = '||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_FEDERAL||'''','NULL');
IF (COALESCE(NEW.NEGATIVO_CERTIDAO_ESTADUAL,'')<>COALESCE(OLD.NEGATIVO_CERTIDAO_ESTADUAL,'')) THEN TXT=TXT||',NEGATIVO_CERTIDAO_ESTADUAL = '||COALESCE(''''||NEW.NEGATIVO_CERTIDAO_ESTADUAL||'''','NULL');
IF (COALESCE(NEW.TEM_COMPROVANTE_RESIDENCIA,'')<>COALESCE(OLD.TEM_COMPROVANTE_RESIDENCIA,'')) THEN TXT=TXT||',TEM_COMPROVANTE_RESIDENCIA = '||COALESCE(''''||NEW.TEM_COMPROVANTE_RESIDENCIA||'''','NULL');
IF (COALESCE(NEW.NUMERO_CERTIDAO_NASCIMENTO,'')<>COALESCE(OLD.NUMERO_CERTIDAO_NASCIMENTO,'')) THEN TXT=TXT||',NUMERO_CERTIDAO_NASCIMENTO = '||COALESCE(''''||NEW.NUMERO_CERTIDAO_NASCIMENTO||'''','NULL');
IF (COALESCE(NEW.ID_NACIONALIDADE,'')<>COALESCE(OLD.ID_NACIONALIDADE,'')) THEN TXT=TXT||',ID_NACIONALIDADE = '||COALESCE(NEW.ID_NACIONALIDADE,'NULL');
IF (COALESCE(NEW.ID_NATURALIDADE,'')<>COALESCE(OLD.ID_NATURALIDADE,'')) THEN TXT=TXT||',ID_NATURALIDADE = '||COALESCE(NEW.ID_NATURALIDADE,'NULL');
IF (COALESCE(NEW.TITULO_ELEITOR,'')<>COALESCE(OLD.TITULO_ELEITOR,'')) THEN TXT=TXT||',TITULO_ELEITOR = '||COALESCE(''''||NEW.TITULO_ELEITOR||'''','NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VISITANTE SET ID_VISITANTE = '''||NEW.ID_VISITANTE||''''||TXT||' WHERE ID_VISITANTE = '''||NEW.ID_VISITANTE||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VISITANTE', NEW.ID_VISITANTE,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: VISITANTE_INTERNO_AD_SINCRONISM */
CREATE TRIGGER VISITANTE_INTERNO_AD_SINCRONISM FOR VISITANTE_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'DELETE FROM VISITANTE_INTERNO WHERE ID_VISITANTE_INTERNO = '||OLD.ID_VISITANTE_INTERNO||';';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END

END
^

/* Trigger: VISITANTE_INTERNO_AI_SINCRONISM */
CREATE TRIGGER VISITANTE_INTERNO_AI_SINCRONISM FOR VISITANTE_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = 'INSERT INTO VISITANTE_INTERNO (ID_VISITANTE_INTERNO,'
||' ID_VISITANTE,'
||' ID_INTERNO,'
||' ID_GRAU_PARENTESCO) VALUES ('
||COALESCE(NEW.ID_VISITANTE_INTERNO,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||');';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
   END
END
^

/* Trigger: VISITANTE_INTERNO_AU_SINCRONISM */
CREATE TRIGGER VISITANTE_INTERNO_AU_SINCRONISM FOR VISITANTE_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-03-07 18:12:00.9750
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '';

IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VISITANTE_INTERNO SET ID_VISITANTE_INTERNO = '''||NEW.ID_VISITANTE_INTERNO||''''||TXT||' WHERE ID_VISITANTE_INTERNO = '''||NEW.ID_VISITANTE_INTERNO||''' ;';
    IF (TXT<>'') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,'A',0,'NOW',TRIM(:USUARIO_REPLICACAO));
       END
    END
END
^

/* Trigger: VISITANTE_INTERNO_BD_LOG */
CREATE TRIGGER VISITANTE_INTERNO_BD_LOG FOR VISITANTE_INTERNO
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VISITANTE_INTERNO (ID_VISITANTE_INTERNO,'
||' ID_VISITANTE,'
||' ID_INTERNO,'
||' ID_GRAU_PARENTESCO) VALUES ('
||COALESCE(OLD.ID_VISITANTE_INTERNO,'NULL')||','
||COALESCE(OLD.ID_VISITANTE,'NULL')||','
||COALESCE(OLD.ID_INTERNO,'NULL')||','
||COALESCE(OLD.ID_GRAU_PARENTESCO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VISITANTE_INTERNO', OLD.ID_VISITANTE_INTERNO,'D', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VISITANTE_INTERNO_BI0 */
CREATE TRIGGER VISITANTE_INTERNO_BI0 FOR VISITANTE_INTERNO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (NEW.id_visitante_interno IS NULL OR (NEW.id_visitante_interno = 0)) then
  BEGIN
    NEW.id_visitante_interno = GEN_ID(cod_up,0)||GEN_ID(ID_VISITANTE_INTERNO,1);
  END
end
^

/* Trigger: VISITANTE_INTERNO_BI_LOG */
CREATE TRIGGER VISITANTE_INTERNO_BI_LOG FOR VISITANTE_INTERNO
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
  IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');

  TXT = 'INSERT INTO VISITANTE_INTERNO (ID_VISITANTE_INTERNO,'
||' ID_VISITANTE,'
||' ID_INTERNO,'
||' ID_GRAU_PARENTESCO) VALUES ('
||COALESCE(NEW.ID_VISITANTE_INTERNO,'NULL')||','
||COALESCE(NEW.ID_VISITANTE,'NULL')||','
||COALESCE(NEW.ID_INTERNO,'NULL')||','
||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL')||');';

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VISITANTE_INTERNO', NEW.ID_VISITANTE_INTERNO,'I', :TXT, :IP_MAQUINA);

END
^

/* Trigger: VISITANTE_INTERNO_BU_LOG */
CREATE TRIGGER VISITANTE_INTERNO_BU_LOG FOR VISITANTE_INTERNO
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: 2012-03-07 17:37:10.2440
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '';

IF (COALESCE(NEW.ID_VISITANTE,'')<>COALESCE(OLD.ID_VISITANTE,'')) THEN TXT=TXT||',ID_VISITANTE = '||COALESCE(NEW.ID_VISITANTE,'NULL');
IF (COALESCE(NEW.ID_INTERNO,'')<>COALESCE(OLD.ID_INTERNO,'')) THEN TXT=TXT||',ID_INTERNO = '||COALESCE(NEW.ID_INTERNO,'NULL');
IF (COALESCE(NEW.ID_GRAU_PARENTESCO,'')<>COALESCE(OLD.ID_GRAU_PARENTESCO,'')) THEN TXT=TXT||',ID_GRAU_PARENTESCO = '||COALESCE(NEW.ID_GRAU_PARENTESCO,'NULL');
IF (TXT <> '') THEN TXT = 'UPDATE VISITANTE_INTERNO SET ID_VISITANTE_INTERNO = '''||NEW.ID_VISITANTE_INTERNO||''''||TXT||' WHERE ID_VISITANTE_INTERNO = '''||NEW.ID_VISITANTE_INTERNO||''' ;';

    ID_FUNCIONARIO_LOGIN = rdb$get_context('USER_TRANSACTION', 'ID_FUNCIONARIO');
    IP_MAQUINA = rdb$get_context('SYSTEM', 'CLIENT_ADDRESS');
    
    IF (TXT<>'') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, 'NOW', 'VISITANTE_INTERNO', NEW.ID_VISITANTE_INTERNO,'U', :TXT, :IP_MAQUINA);
    END
END
^

/* Trigger: VISITANTE_IU_SINC_BLOB */
CREATE TRIGGER VISITANTE_IU_SINC_BLOB FOR VISITANTE
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: 2012-05-02 09:40:36.3350
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = 'SINCRONIZADOR') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO');
   IF (COALESCE(USUARIO_REPLICACAO,'')='') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

    IF (INSERTING) THEN
    BEGIN
      
        IF (NEW.FOTO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'VISITANTE', 'FOTO', 'ID_VISITANTE', NEW.ID_VISITANTE);
        END

    END
    ELSE
    BEGIN
      
        IF (OLD.FOTO <> NEW.FOTO) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'VISITANTE', 'FOTO', 'ID_VISITANTE', NEW.ID_VISITANTE);
        END

    END

   END

END
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CALCULA_DIAS_UTEIS (
    DAT_INI DATE,
    DAT_FIM DATE,
    IGNORAR VARCHAR(10))
RETURNS (
    UTEIS INTEGER)
AS
declare variable contar integer;
declare variable dia date;
declare variable dia_semana char(1);
declare variable dias integer;
BEGIN
  DIAS = (DATEDIFF(DAY, DAT_INI, DAT_FIM));
  --INICIALIZA AS VARIAVEIS
  CONTAR = 0;
  UTEIS = 0;
  DIA = (:DAT_INI);
  WHILE (:CONTAR <= :DIAS) DO BEGIN
     --ADICINIONA 1 DIA NA DATA
     DIA = (:DIA + 1);
     --EXTRAI O DIA DA SEMANA DA DATA
     DIA_SEMANA = EXTRACT (WEEKDAY FROM :DIA);
     --A = EXTRACT (YEARDAY FROM :DIA);
     IF (POSITION(DIA_SEMANA IN IGNORAR)=0) THEN
        UTEIS = (:UTEIS + 1);
     --ADICIONA UM NUMERO NO CONTADOR
     CONTAR = (:CONTAR + 1);
  END
  SUSPEND;
END^


ALTER PROCEDURE SET_CONTEXT (
    ID_FUNCIONARIO INTEGER)
AS
begin

  RDB$SET_CONTEXT('USER_TRANSACTION', 'ID_FUNCIONARIO', ID_FUNCIONARIO);

end^


ALTER PROCEDURE SET_CONTEXT_CONEXAO (
    IDCONEXAO INTEGER)
AS
BEGIN

  RDB$SET_CONTEXT('USER_SESSION', 'IDCONEXAO', IDCONEXAO);

END^


ALTER PROCEDURE SOUNDEX (
    STR VARCHAR(100))
RETURNS (
    RET VARCHAR(100))
AS
declare variable PALAVRA varchar(100);
declare variable AUX varchar(100);
declare variable AUX_SOUNDEX varchar(100);
declare variable J integer;
declare variable K integer;
declare variable V_COM_ACENTO varchar(28);
declare variable V_SEM_ACENTO varchar(28);
begin

    v_sem_acento = 'aaeouaoaeioucuAAEOUAOAEIOUCU';

    str = trim(str);

    ret='';

   -- Excluir espacos extras --------------------------------------------------
    while (position('  ',str,1) > 0) do
        begin
            str = replace(str,'  ',' ');
        end

    while (substring(str from 1 for 1) = ' ') do
        begin
            str = substring(str from 2 for char_length(str) - 1);
        end

    while (substring(str from char_length(str) - 1 for char_length(str)) = ' ') do
        begin
            str = substring(str from char_length(str) - 1 for char_length(str));
         end
    -- -------------------------------------------------------------------------

    -- Substituir caracteres acentuados ----------------------------------------
    j=1;
    aux='';
    while (j < (char_length(str)+1) ) do
        begin
            if(v_com_acento containing substring(str from j for 1)) then
                begin
                    k=1;
                    while (k < 29) do
                        begin
                            if( substring(str from j for 1) = substring(v_com_acento from k for 1) ) then
                                aux = aux || substring(v_sem_acento from k for 1);
                            k = k+1;
                        end
                end
            else
                aux = aux || substring(str from j for 1);
            j = j+1;
        end
        str=aux;
    -- -------------------------------------------------------------------------

    str = upper(str);

    -- Excluir caracteres especiais --------------------------------------------
    j=1;
    aux='';
    while (j < (char_length(str)+1) ) do
        begin
            if( ascii_val(substring(str from j for 1))<>32 ) then
            begin
                if( (ascii_val(substring(str from j for 1)) > 64) and
                    (ascii_val(substring(str from j for 1)) < 96) ) then
                        aux = aux || substring(str from j for 1);
            end
            else
                aux = aux || substring(str from j for 1);
             j=j+1;
        end
    -- -------------------------------------------------------------------------

    -- Gerar Soundex das Palavras ----------------------------------------------
    while ( position(' ',aux) > 0) do
        begin
            -- Pega a primeira palavra
            palavra = substring(aux from 1 for position(' ',aux));
            -- Retira a primeira palavra da variavel aux
            aux = substring(aux from position(' ',aux)+1 for char_length(aux));

            -- Calcula o soundex da palavra
            execute procedure soundex_palavra palavra returning_values aux_soundex;

            ret = ret || aux_soundex;

        end

        -- Calcula o codigo soundex da ultima palavra
        execute procedure soundex_palavra aux returning_values aux_soundex;
        ret = ret || aux_soundex;
     -- -------------------------------------------------------------------------

  suspend;
end^


ALTER PROCEDURE SOUNDEX_GRUPO (
    CARACTER CHAR(1))
RETURNS (
    RESULT CHAR(1))
AS
declare variable CR char(1);
declare variable GRUPO char(1);
begin

    cr = upper(caracter);

    if (position(cr, 'BFPVW') > 0) then
        grupo = '1';
    else
        grupo = '2';
    if(position(cr,'DT') > 0) then
        grupo = '3';
    else
    if(position(cr,'L') > 0) then
        grupo = '4';
    else
    if(position(cr,'MN') > 0) then
        grupo = '5';
    else
    if(position(cr,'R') > 0) then
        grupo='6';
    else
        grupo = '';

    result=grupo;

  suspend;
end^


ALTER PROCEDURE SOUNDEX_PALAVRA (
    STR VARCHAR(100))
RETURNS (
    RET VARCHAR(100))
AS
declare variable AUX varchar(100);
declare variable AUX2 varchar(100);
declare variable AUX3 char(1);
declare variable J integer;
begin

    str = upper(str);

    -- aux recebe o primeiro caracter da palavra
    aux = substring(str from 1 for 1);

    -- Percorre todos os caracteres da palavra e calcula o codigo
    -- de cada um, chamando a SOUNDEX_GRUPO, armazenando na variavel aux
    j=2;
    while (j <= char_length(str)) do
        begin
            aux2 = substring(str from j for 1);
            execute procedure soundex_grupo aux2 returning_values aux3;
            aux = aux || aux3;
            j = j + 1;
        end

    -- A variavel str recebe o codigo de todos os caracteres
    str = aux;
    aux='';

    -- percorre o codigo e retira caracteres duplicados
    j=1;
    while (j < (char_length(str)+1) ) do
        begin
            if( substring(str from j for 1) = substring(str from j+1 for 1) ) then
                str = substring(str from 1 for j) || substring(str from j+2 for char_length(str) );
             j=j+1;
        end

    -- Retira espacos em branco
    j=char_length(str);
    while (j > 0) do
        begin
            if (substring(str from 1 for 1) <> ' ') then
                aux = aux || substring(str from 1 for 1);
            str = substring(str from 2 for 99);
            j = :j - 1;
        end

    -- O codigo soundex devera conter uma letra e quatro digitos
    -- Esta rotina armazena apenas os quatro primeiros digitos do codigo
    -- Se o codigo nao tiver quatro digitos, preenche com zeros
    if(char_length(aux)>4) then
        aux=substring(aux from 1 for 4);
    else if (char_length(aux)<4) then
        aux=rpad(aux,4,'0');

    ret = aux;

  suspend;
end^


ALTER PROCEDURE SP_AGENDA_ESCALA_EQUIPE (
    IDEQUIPE INTEGER,
    DATA_PLANTAO TIMESTAMP)
AS
DECLARE VARIABLE NOME_EQUIPE VARCHAR(50);
DECLARE VARIABLE TIPO_EQUIPE VARCHAR(1);

DECLARE VARIABLE IDESCALA_PLANTAO INTEGER;
DECLARE VARIABLE IDFUNCIONARIO INTEGER;
DECLARE VARIABLE IDFUNC_SUBSTITUTO INTEGER;
DECLARE VARIABLE IDPOSTO_TRABALHO INTEGER;
DECLARE VARIABLE HORA_INICIO TIME;
DECLARE VARIABLE HORA_FIM TIME;
DECLARE VARIABLE POSTO_ROTATIVO VARCHAR(1);
DECLARE VARIABLE OBSERVACOES VARCHAR(1000);

DECLARE VARIABLE IDAGENTE_EQUIPE INTEGER;
DECLARE VARIABLE ST VARCHAR(1);

DECLARE VARIABLE POSTO_TRABALHO VARCHAR(50);
DECLARE VARIABLE HORAS_TRABALHO INTEGER;

BEGIN

    FOR SELECT EQUIPE,
               TIPO
        FROM EQUIPE
        WHERE IDEQUIPE = :IDEQUIPE
        INTO :NOME_EQUIPE,
             :TIPO_EQUIPE
    DO
    BEGIN
    
        FOR SELECT IDAGENTE_EQUIPE, 
                   IDFUNCIONARIO,
                   IDPOSTO_TRABALHO, 
                   ST, 
                   OBSERVACOES
        FROM AGENTE_EQUIPE
        WHERE IDEQUIPE = :IDEQUIPE
        INTO :IDAGENTE_EQUIPE,
             :IDFUNCIONARIO,
             :IDPOSTO_TRABALHO, 
             :ST, 
             :OBSERVACOES
        DO
        BEGIN

            SELECT POSTO_TRABALHO,
                   COALESCE(HORAS_TRABALHO,24)
            FROM POSTO_TRABALHO
            WHERE IDPOSTO_TRABALHO = :IDPOSTO_TRABALHO
            INTO :POSTO_TRABALHO,
                 :HORAS_TRABALHO;

            POSTO_ROTATIVO = 'N';

            HORA_INICIO = CAST('08:00:00' AS TIME);

            IF (HORAS_TRABALHO = 6) THEN
            BEGIN
                HORA_FIM = CAST('14:00:00' AS TIME);
            END

            IF (HORAS_TRABALHO = 8) THEN
            BEGIN
                HORA_FIM = CAST('18:00:00' AS TIME);
            END
    
            IF (HORAS_TRABALHO = 24) THEN
            BEGIN
                HORA_FIM = CAST('08:00:00' AS TIME);
            END

            IDESCALA_PLANTAO = 0 ;
            IDFUNC_SUBSTITUTO = NULL ;

            INSERT INTO ESCALA_PLANTAO (IDESCALA_PLANTAO, 
                                        DATA_PLANTAO, 
                                        IDEQUIPE, 
                                        IDFUNCIONARIO, 
                                        IDFUNC_SUBSTITUTO, 
                                        IDPOSTO_TRABALHO, 
                                        HORA_INICIO, 
                                        HORA_FIM, 
                                        POSTO_ROTATIVO, 
                                        OBSERVACOES)
            VALUES (:IDESCALA_PLANTAO, 
                    :DATA_PLANTAO, 
                    :IDEQUIPE, 
                    :IDFUNCIONARIO, 
                    :IDFUNC_SUBSTITUTO, 
                    :IDPOSTO_TRABALHO, 
                    :HORA_INICIO, 
                    :HORA_FIM, 
                    :POSTO_ROTATIVO, 
                    :OBSERVACOES);
        END

    END

END^


ALTER PROCEDURE SP_BUSCA_TROCA (
    VALOR_CAMPO VARCHAR(32000),
    BUSCA VARCHAR(100),
    TROCA VARCHAR(100))
RETURNS (
    V VARCHAR(32000))
AS
declare variable num integer;
declare variable vlen integer;
declare variable char_campo varchar(20);
BEGIN
    /* PROCEDURE TEXT */
    NUM = 1 ;
    vLen = strlen(:busca);
    V = '' ;
    WHILE (STRLEN(VALOR_CAMPO)>=:NUM) DO
    BEGIN
        SELECT RESULTADO_COPY FROM SP_COPY(:VALOR_CAMPO,:NUM,:vLen)
          INTO :CHAR_CAMPO;

        IF (CHAR_CAMPO = BUSCA) THEN
        BEGIN
          CHAR_CAMPO = TROCA ;
          NUM = NUM + :vLen ;
        END
        ELSE
        BEGIN
            SELECT RESULTADO_COPY FROM SP_COPY(:VALOR_CAMPO,:NUM,1)
              INTO :CHAR_CAMPO;
            NUM = NUM + 1 ;
        END
        V = V || CHAR_CAMPO ;
    END

    IF (VALOR_CAMPO IS NULL) THEN
      V = VALOR_CAMPO;

    SUSPEND;
END^


ALTER PROCEDURE SP_CALCULA_FALTA_DISCIPLINAR (
    TEMPO_REABILITACAO INTEGER,
    DAT_INCIDENCIA DATE)
RETURNS (
    DAT_REABILITACAO DATE)
AS
BEGIN

  dat_reabilitacao = dateadd(DAY, :tempo_reabilitacao, :dat_incidencia);

  SUSPEND;
END^


ALTER PROCEDURE SP_CALCULO_EXECUCAO_PENAL
RETURNS (
    TOTAL_PENA_ANO INTEGER,
    TOTAL_PENA_MES INTEGER,
    TOTAL_PENA_DIA INTEGER,
    DATA_FATO_CONDENACAO TIMESTAMP,
    DATA_INICIO_CONDENACAO TIMESTAMP,
    PROGRESSAO_REGIME VARCHAR(1),
    LIVRAMENTO_CONDICIONAL VARCHAR(1))
AS
BEGIN
  FOR
    SELECT
        TOTAL_PENA_ANO,
        TOTAL_PENA_MES, 
        TOTAL_PENA_DIA, 
        DATA_FATO_CONDENACAO,
        DATA_INICIO_CONDENACAO, 
        PROGRESSAO_REGIME, 
        LIVRAMENTO_CONDICIONAL
    FROM PROCESSO
    WHERE SITUACAOJURIDICA LIKE 'CONDEN%' AND IDINTERNO=1056
    INTO :TOTAL_PENA_ANO,
         :TOTAL_PENA_MES,
         :TOTAL_PENA_DIA,
         :DATA_FATO_CONDENACAO,
         :DATA_INICIO_CONDENACAO,
         :PROGRESSAO_REGIME,
         :LIVRAMENTO_CONDICIONAL
  DO
  BEGIN
    SUSPEND;
  END
END^


ALTER PROCEDURE SP_COMUNICACAO_TODAS
RETURNS (
    SIGLA VARCHAR(20))
AS
declare variable sql_stm varchar(8192);
declare variable exec_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable usuario varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
declare variable conexao varchar(200);
declare variable id_up integer;
declare variable total integer;
BEGIN



  --PARA ACHAR ESTE BANCO NO OUTRO BANCO
  LOGIN = 'SYSDBA';
  PASSWD = 'masterkey';

  FOR
    SELECT 'OK:'||descricao,
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    INTO :sigla,:CONEXAO
  DO
  BEGIN
        FOR
            EXECUTE STATEMENT 'select count(*) from rdb$database '
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :TOTAL
        DO
        BEGIN
          SUSPEND;
        END
  END

END^


ALTER PROCEDURE SP_COPY (
    VALOR VARCHAR(32000),
    CARAC_INI INTEGER,
    QTDE INTEGER)
RETURNS (
    RESULTADO_COPY VARCHAR(32000))
AS
declare variable i integer;
declare variable j integer;
declare variable k integer;
BEGIN
  /*
  Copia de "CARAC_INI" "QTDE" bytes de "VALOR"
  Este recurso não é mais necessário no FB 2
  Pois já aceita o substring com variáveis
  */
  i = STRLEN(:VALOR);
  j = 1;
  k = 1;
  RESULTADO_COPY = '';
  
  WHILE ((:VALOR IS NOT NULL) AND (:i > 0) AND (j <= :QTDE)) DO
  BEGIN
    IF (:k >= :CARAC_INI) THEN
    BEGIN
    RESULTADO_COPY = :RESULTADO_COPY || SUBSTRING(:VALOR FROM 1 FOR 1);
    j = j + 1;
    END
  
    VALOR = SUBSTRING(:VALOR FROM 2 FOR 32000);
    k = :k + 1;
    i = :i - 1;
  END

SUSPEND;
END^


ALTER PROCEDURE SP_CRIAR_TRIGGERS_LOGS (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    TXT VARCHAR(32700))
AS
declare variable nome_trigger varchar(31);
declare variable sql_trigger varchar(32700);
BEGIN

  NOME_TRIGGER = SUBSTR(TABELA||'_BI_LOG',1,31);

  select retorno
  from SP_GERA_SCRIPT_INSERT_TRIGGER(:TABELA)
  into :sql_trigger;

    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: '||current_timestamp||'

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context(''USER_TRANSACTION'', ''ID_FUNCIONARIO'');
  IP_MAQUINA = rdb$get_context(''SYSTEM'', ''CLIENT_ADDRESS'');

  TXT = '||:sql_trigger||'

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, ''NOW'', '''||:TABELA||''', NEW.'||:PK_TABELA||',''I'', :TXT, :IP_MAQUINA);

END';

--   EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;
--UPDATE

  NOME_TRIGGER = SUBSTR(TABELA||'_BU_LOG',1,31);

  SELECT RETORNO
  FROM SP_GERA_SCRIPT_UPDATE_TRIGGER(:TABELA,:PK_TABELA)
  INTO :SQL_TRIGGER;

    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: '||current_timestamp||'
   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   TXT = '''';
'||:sql_trigger||'

    ID_FUNCIONARIO_LOGIN = rdb$get_context(''USER_TRANSACTION'', ''ID_FUNCIONARIO'');
    IP_MAQUINA = rdb$get_context(''SYSTEM'', ''CLIENT_ADDRESS'');
    
    IF (TXT<>'''') THEN
    BEGIN
        INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
        VALUES (0, :ID_FUNCIONARIO_LOGIN, ''NOW'', '''||:TABELA||''', NEW.'||:PK_TABELA||',''U'', :TXT, :IP_MAQUINA);
    END
END';


--   EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;

--DELETE

  NOME_TRIGGER = SUBSTR(TABELA||'_BD_LOG',1,31);



  select retorno
  from SP_GERA_SCRIPT_INSERT_OLD(:TABELA)
  into :sql_trigger;


    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE ID_FUNCIONARIO_LOGIN VARCHAR(200);
DECLARE VARIABLE IP_MAQUINA VARCHAR(200);
BEGIN

   /* TRIGGER DE LOGS GERADA DIA: '||current_timestamp||'

   pelas procedures:
        -> SP_GERA_TRIGGERS_LOGS
        -> SP_CRIAR_TRIGGERS_LOGS
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */

  ID_FUNCIONARIO_LOGIN = rdb$get_context(''USER_TRANSACTION'', ''ID_FUNCIONARIO'');
  IP_MAQUINA = rdb$get_context(''SYSTEM'', ''CLIENT_ADDRESS'');

  TXT = '||:sql_trigger||'

  INSERT INTO LOG_SISTEMA (IDLOG_SISTEMA, ID_FUNCIONARIO, DATA_HORA, TABELA, ID_PK, TIPO, SCRIPT_REVERSAO, IP_MAQUINA)
  VALUES (0, :ID_FUNCIONARIO_LOGIN, ''NOW'', '''||:TABELA||''', OLD.'||:PK_TABELA||',''D'', :TXT, :IP_MAQUINA);

END';


--   EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;


END^


ALTER PROCEDURE SP_ENVIAR_TODOS_BLOB
AS
declare variable idsincronismo_controle integer;
declare variable interno_id_interno integer;
declare variable interno_foto type of dm_foto;
declare variable interno_foto_perfil type of dm_foto;
declare variable interno_foto_tatuagem type of dm_foto;
declare variable interno_foto_sinais type of dm_foto;
declare variable interno_foto_sinais1 type of dm_foto;
declare variable interno_foto_sinais2 type of dm_foto;
declare variable interno_foto_sinais3 type of dm_foto;
declare variable interno_foto_sinais4 type of dm_foto;
BEGIN
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN

   FOR
     SELECT
        ID_INTERNO,
        FOTO,
        FOTO_PERFIL,
        FOTO_TATUAGEM,
        FOTO_SINAIS,
        FOTO_SINAIS1,
        FOTO_SINAIS2,
        FOTO_SINAIS3,
        FOTO_SINAIS4
     FROM INTERNO
     WHERE ST='A'
     AND FOTO IS NOT NULL
     AND ID_UP <> (IIF(:IDSINCRONISMO_CONTROLE=1,11,
                       IIF(:IDSINCRONISMO_CONTROLE=2,62,
                          IIF(:IDSINCRONISMO_CONTROLE=3,73,52)
                          )
                      )
                   )
     INTO :INTERNO_ID_INTERNO,
        :INTERNO_FOTO,
        :INTERNO_FOTO_PERFIL,
        :INTERNO_FOTO_TATUAGEM,
        :INTERNO_FOTO_SINAIS,
        :INTERNO_FOTO_SINAIS1,
        :INTERNO_FOTO_SINAIS2,
        :INTERNO_FOTO_SINAIS3,
        :INTERNO_FOTO_SINAIS4
   DO
   BEGIN

        IF (:INTERNO_FOTO IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_PERFIL IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_PERFIL', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_TATUAGEM IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_TATUAGEM', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_SINAIS IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_SINAIS1 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS1', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_SINAIS2 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS2', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_SINAIS3 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS3', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END

        IF (:INTERNO_FOTO_SINAIS4 IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, 'NOW', USER, 'INTERNO', 'FOTO_SINAIS4', 'ID_INTERNO', :INTERNO_ID_INTERNO);
        END
    END

  END

END^


ALTER PROCEDURE SP_GERA_CONSTRAINT
RETURNS (
    DELETA VARCHAR(276),
    CRIA VARCHAR(915))
AS
BEGIN
  FOR
    SELECT
    'ALTER TABLE '||TRIM(A.RDB$RELATION_NAME)||
    ' DROP CONSTRAINT '||TRIM(A.RDB$CONSTRAINT_NAME)||';' DELETA,
    
    'ALTER TABLE '||TRIM(A.RDB$RELATION_NAME)||'
     ADD CONSTRAINT '||TRIM(A.RDB$CONSTRAINT_NAME)||'
     FOREIGN KEY ('||TRIM(C.RDB$FIELD_NAME)||')
     REFERENCES '
    ||--TABELA DEPENDENTE
    TRIM((SELECT
      RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME
    FROM RDB$RELATION_CONSTRAINTS,
    RDB$INDICES,
    RDB$INDEX_SEGMENTS
    WHERE RDB$RELATION_CONSTRAINTS.RDB$CONSTRAINT_TYPE = 'PRIMARY KEY'
    AND RDB$RELATION_CONSTRAINTS.RDB$INDEX_NAME = RDB$INDICES.RDB$INDEX_NAME
    AND RDB$INDEX_SEGMENTS.RDB$INDEX_NAME = RDB$INDICES.RDB$INDEX_NAME
    AND RDB$RELATION_CONSTRAINTS.rdb$constraint_name = B.rdb$const_name_uq))
    ||
    '('
    ||--PRIMARY KEY
    TRIM((SELECT
    RDB$INDEX_SEGMENTS.RDB$FIELD_NAME
    FROM RDB$RELATION_CONSTRAINTS,
    RDB$INDICES,
    RDB$INDEX_SEGMENTS
    WHERE RDB$RELATION_CONSTRAINTS.RDB$CONSTRAINT_TYPE = 'PRIMARY KEY'
    AND RDB$RELATION_CONSTRAINTS.RDB$INDEX_NAME = RDB$INDICES.RDB$INDEX_NAME
    AND RDB$INDEX_SEGMENTS.RDB$INDEX_NAME = RDB$INDICES.RDB$INDEX_NAME
    AND RDB$RELATION_CONSTRAINTS.rdb$constraint_name = B.rdb$const_name_uq))
    ||
    ')
     ON DELETE CASCADE
     ON UPDATE CASCADE
     USING INDEX '||TRIM(A.RDB$CONSTRAINT_NAME)||';' CRIA
    
    
    --A.RDB$CONSTRAINT_NAME FK, A.RDB$RELATION_NAME AS TABELA, RDB$INDEX_SEGMENTS.RDB$FIELD_NAME AS PK_TABELA
    FROM RDB$INDEX_SEGMENTS C
    INNER JOIN RDB$RELATION_CONSTRAINTS A ON (C.RDB$INDEX_NAME = A.RDB$INDEX_NAME)
    INNER JOIN RDB$REF_CONSTRAINTS B ON (B.rdb$constraint_name = A.rdb$constraint_name)
    WHERE A.RDB$CONSTRAINT_TYPE = 'FOREIGN KEY'
    INTO :DELETA,
         :CRIA
  DO
  BEGIN
    SUSPEND;
  END
END^


ALTER PROCEDURE SP_GERA_SCRIPT_BLOB_TRIGGER (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
declare variable nome_campo varchar(31);
declare variable tipo varchar(31);
declare variable valor_insert varchar(32500);
declare variable valor_update varchar(32500);
declare variable virgula varchar(4);
declare variable txt_empresa varchar(500);
BEGIN
/*
ESTA PROCEDURE GERA O TXT PARA SER USADO NA TRIGGER DE BEFORE.
*/
    /* PROCEDURE TEXT */
    VALOR_INSERT = '';
    VALOR_UPDATE = '';
    VIRGULA = ''',';
    RETORNO = '';
    TXT_EMPRESA = '';
    FOR
        SELECT LTRIM(RTRIM(F.RDB$FIELD_NAME)) AS CAMPO
        FROM RDB$RELATION_FIELDS F
        JOIN RDB$FIELDS FS ON (FS.RDB$FIELD_NAME = F.RDB$FIELD_SOURCE)
        JOIN RDB$TYPES T ON ((FS.RDB$FIELD_TYPE = T.RDB$TYPE) AND (T.RDB$FIELD_NAME = 'RDB$FIELD_TYPE'))
        WHERE F.RDB$RELATION_NAME = :TABELA
        AND T.RDB$TYPE_NAME = 'BLOB'
        ORDER BY F.RDB$FIELD_POSITION
       INTO :NOME_CAMPO
   DO
   BEGIN
   VALOR_INSERT = VALOR_INSERT||'
        IF (NEW.'||:NOME_CAMPO||' IS NOT NULL) THEN
        BEGIN
          INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
          VALUES (0, :IDSINCRONISMO_CONTROLE, ''NOW'', USER, '''||:TABELA||''', '''||:NOME_CAMPO||''', '''||:PK_TABELA||''', NEW.'||:PK_TABELA||');
        END
';

   VALOR_UPDATE = VALOR_UPDATE||'
        IF (OLD.'||:NOME_CAMPO||' IS NOT NULL) THEN
        BEGIN
            IF (OLD.'||:NOME_CAMPO||' <> NEW.'||:NOME_CAMPO||') THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, ''NOW'', USER, '''||:TABELA||''', '''||:NOME_CAMPO||''', '''||:PK_TABELA||''', NEW.'||:PK_TABELA||');
            END
        END
        ELSE
        BEGIN
            IF (NEW.'||:NOME_CAMPO||' IS NOT NULL) THEN
            BEGIN
              INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK)
              VALUES (0, :IDSINCRONISMO_CONTROLE, ''NOW'', USER, '''||:TABELA||''', '''||:NOME_CAMPO||''', '''||:PK_TABELA||''', NEW.'||:PK_TABELA||');
            END
        END
';

   END

if (VALOR_INSERT<>'') then
BEGIN
   RETORNO = RETORNO||'
    IF (INSERTING) THEN
    BEGIN
      '||:VALOR_INSERT||'
    END
    ELSE
    BEGIN
      '||:VALOR_UPDATE||'
    END
';
   SUSPEND;

END

END^


ALTER PROCEDURE SP_GERA_SCRIPT_INSERT_OLD (
    TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
declare variable nome_campo varchar(31);
declare variable tipo varchar(31);
declare variable nome_registro varchar(32500);
declare variable valor_registro varchar(32500);
BEGIN
/*
ESTA PROCEDURE GERA O TXT PARA SER USADO NA TRIGGER DE BEFORE.
*/
    /* PROCEDURE TEXT */
    NOME_REGISTRO  = '';
    FOR
        SELECT F.RDB$FIELD_NAME AS CAMPO,
               CASE T.RDB$TYPE_NAME
                 WHEN 'VARYING' THEN 'VARCHAR'
                 WHEN 'LONG' THEN 'INTEGER'
                 WHEN 'TEXT' THEN 'CHAR'
                 WHEN 'TIMESTAMP' THEN 'DATE'
                 WHEN 'DOUBLE' THEN
                   CASE WHEN FS.RDB$FIELD_SCALE < 0 THEN
                     'NUMERIC'
                   ELSE
                     'DOUBLE PRECISION' END
               ELSE
                 T.RDB$TYPE_NAME END AS TIPO
        FROM RDB$RELATION_FIELDS F
        JOIN RDB$FIELDS FS ON (FS.RDB$FIELD_NAME = F.RDB$FIELD_SOURCE)
        JOIN RDB$TYPES T ON ((FS.RDB$FIELD_TYPE = T.RDB$TYPE) AND (T.RDB$FIELD_NAME = 'RDB$FIELD_TYPE'))
        WHERE F.RDB$RELATION_NAME = :TABELA
        AND F.RDB$FIELD_NAME NOT IN ('PK_DEFINITIVA', 'EXECUTA_TRIGGER')
        ORDER BY F.RDB$FIELD_POSITION
       INTO :NOME_CAMPO, :TIPO
   DO
   BEGIN
     IF (:TIPO <> 'BLOB') THEN
     BEGIN    

       IF (NOME_REGISTRO = '') THEN
       BEGIN
           NOME_REGISTRO = LTRIM(RTRIM(:NOME_CAMPO));
           IF (LTRIM(RTRIM(TIPO)) IN ('CHAR','VARCHAR','TIME','DATE')) THEN
           BEGIN
                   VALOR_REGISTRO = '''
||COALESCE(''''''''||OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||'||'''''''',''NULL'')';
           END
           ELSE
           BEGIN
               VALOR_REGISTRO = '''
||COALESCE(OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||',''NULL'')';
           END
       END
       ELSE
       BEGIN
           NOME_REGISTRO = NOME_REGISTRO||',''
||'' '||LTRIM(RTRIM(:NOME_CAMPO));
           IF (LTRIM(RTRIM(TIPO)) IN ('CHAR','VARCHAR','TIME','DATE')) THEN
           BEGIN
                    VALOR_REGISTRO = VALOR_REGISTRO||'||'','||'''
||COALESCE(''''''''||OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||'||'''''''',''NULL'')';
           END
           ELSE
           BEGIN
             VALOR_REGISTRO = VALOR_REGISTRO||'||'','||'''
||COALESCE(OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||',''NULL'')';
           END
       END

     END
   END

   RETORNO = '''INSERT INTO '||TABELA||' ('||NOME_REGISTRO||') VALUES ('||VALOR_REGISTRO||'||'');'';';

   SUSPEND;
END^


ALTER PROCEDURE SP_GERA_SCRIPT_INSERT_TRIGGER (
    TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
declare variable nome_campo varchar(31);
declare variable tipo varchar(31);
declare variable nome_registro varchar(32500);
declare variable valor_registro varchar(32500);
BEGIN
/*
ESTA PROCEDURE GERA O TXT PARA SER USADO NA TRIGGER DE BEFORE.
*/
    /* PROCEDURE TEXT */
    NOME_REGISTRO  = '';
    FOR
        SELECT F.RDB$FIELD_NAME AS CAMPO,
               CASE T.RDB$TYPE_NAME
                 WHEN 'VARYING' THEN 'VARCHAR'
                 WHEN 'LONG' THEN 'INTEGER'
                 WHEN 'TEXT' THEN 'CHAR'
                 WHEN 'TIMESTAMP' THEN 'DATE'
                 WHEN 'DOUBLE' THEN
                   CASE WHEN FS.RDB$FIELD_SCALE < 0 THEN
                     'NUMERIC'
                   ELSE
                     'DOUBLE PRECISION' END
               ELSE
                 T.RDB$TYPE_NAME END AS TIPO
        FROM RDB$RELATION_FIELDS F
        JOIN RDB$FIELDS FS ON (FS.RDB$FIELD_NAME = F.RDB$FIELD_SOURCE)
        JOIN RDB$TYPES T ON ((FS.RDB$FIELD_TYPE = T.RDB$TYPE) AND (T.RDB$FIELD_NAME = 'RDB$FIELD_TYPE'))
        WHERE F.RDB$RELATION_NAME = :TABELA
        AND F.RDB$FIELD_NAME NOT IN ('PK_DEFINITIVA', 'EXECUTA_TRIGGER')
        ORDER BY F.RDB$FIELD_POSITION
       INTO :NOME_CAMPO, :TIPO
   DO
   BEGIN
     IF (:TIPO <> 'BLOB') THEN
     BEGIN    

       IF (NOME_REGISTRO = '') THEN
       BEGIN
           NOME_REGISTRO = LTRIM(RTRIM(:NOME_CAMPO));
           IF (LTRIM(RTRIM(TIPO)) IN ('CHAR','VARCHAR','TIME','DATE')) THEN
           BEGIN
                   VALOR_REGISTRO = '''
||COALESCE(''''''''||NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||'||'''''''',''NULL'')';
           END
           ELSE
           BEGIN
               VALOR_REGISTRO = '''
||COALESCE(NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||',''NULL'')';
           END
       END
       ELSE
       BEGIN
           NOME_REGISTRO = NOME_REGISTRO||',''
||'' '||LTRIM(RTRIM(:NOME_CAMPO));
           IF (LTRIM(RTRIM(TIPO)) IN ('CHAR','VARCHAR')) THEN
           BEGIN
                    VALOR_REGISTRO = VALOR_REGISTRO||'||'','||'''
||COALESCE(''''''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||','''''''',''''''''''''))||'''''''',''NULL'')';

           END
           ELSE
           IF (LTRIM(RTRIM(TIPO)) IN ('TIME','DATE')) THEN
           BEGIN
                    VALOR_REGISTRO = VALOR_REGISTRO||'||'','||'''
||COALESCE(''''''''||NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||'||'''''''',''NULL'')';
           END
           ELSE
           BEGIN
             VALOR_REGISTRO = VALOR_REGISTRO||'||'','||'''
||COALESCE(NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||',''NULL'')';
           END
       END

     END
   END

   RETORNO = '''INSERT INTO '||TABELA||' ('||NOME_REGISTRO||') VALUES ('||VALOR_REGISTRO||'||'');'';';

   SUSPEND;
END^


ALTER PROCEDURE SP_GERA_SCRIPT_UPDATE_TRIGGER (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    RETORNO VARCHAR(32500))
AS
declare variable nome_campo varchar(31);
declare variable tipo varchar(31);
declare variable valor_registro varchar(32500);
declare variable virgula varchar(4);
BEGIN
/*
ESTA PROCEDURE GERA O TXT PARA SER USADO NA TRIGGER DE BEFORE.
*/
    /* PROCEDURE TEXT */
    VALOR_REGISTRO = '';
    VIRGULA = ''',';
    RETORNO = '';
    FOR
        SELECT F.RDB$FIELD_NAME AS CAMPO,
               CASE T.RDB$TYPE_NAME
                 WHEN 'VARYING' THEN 'VARCHAR'
                 WHEN 'LONG' THEN 'INTEGER'
                 WHEN 'TEXT' THEN 'CHAR'
                 WHEN 'TIMESTAMP' THEN 'DATE'
                 WHEN 'DOUBLE' THEN
                   CASE WHEN FS.RDB$FIELD_SCALE < 0 THEN
                     'NUMERIC'
                   ELSE
                     'DOUBLE PRECISION' END
               ELSE
                 T.RDB$TYPE_NAME END AS TIPO
        FROM RDB$RELATION_FIELDS F
        JOIN RDB$FIELDS FS ON (FS.RDB$FIELD_NAME = F.RDB$FIELD_SOURCE)
        JOIN RDB$TYPES T ON ((FS.RDB$FIELD_TYPE = T.RDB$TYPE) AND (T.RDB$FIELD_NAME = 'RDB$FIELD_TYPE'))
        WHERE F.RDB$RELATION_NAME = :TABELA
        AND F.RDB$FIELD_NAME NOT IN ('OBJ_EXIST','PK_DEFINITIVA', 'EXECUTA_TRIGGER','SALDOATUAL', 'SALDORESERVADO', 'SALDO_ADIANTAMENTO_C', 'SALDO_ADIANTAMENTO_F')
        ORDER BY F.RDB$FIELD_POSITION
       INTO :NOME_CAMPO, :TIPO
   DO
   BEGIN


     IF (:TIPO <> 'BLOB' AND (LTRIM(RTRIM(:NOME_CAMPO)) <> :PK_TABELA)) THEN
     BEGIN

       IF (LTRIM(RTRIM(TIPO)) IN ('CHAR','VARCHAR')) THEN
       BEGIN
               VALOR_REGISTRO = VALOR_REGISTRO||'
IF (COALESCE(NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||','''')<>COALESCE(OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||','''')) THEN TXT=TXT||'||VIRGULA||LTRIM(RTRIM(:NOME_CAMPO))||' = ''||
COALESCE(''''''''||(SELECT V FROM SP_BUSCA_TROCA (NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||','''''''',''''''''''''))||'''''''',''NULL'');';
       END
       ELSE
       IF (LTRIM(RTRIM(TIPO)) IN ('TIME','DATE')) THEN
       BEGIN
               VALOR_REGISTRO = VALOR_REGISTRO||'
IF (COALESCE(NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||','''')<>COALESCE(OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||','''')) THEN TXT=TXT||'||VIRGULA||LTRIM(RTRIM(:NOME_CAMPO))||' = ''||COALESCE(''''''''||NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||'||'''''''',''NULL'');';
       END
       ELSE
       BEGIN
           VALOR_REGISTRO = VALOR_REGISTRO||'
IF (COALESCE(NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||','''')<>COALESCE(OLD.'||LTRIM(RTRIM(:NOME_CAMPO))||','''')) THEN TXT=TXT||'||VIRGULA||LTRIM(RTRIM(:NOME_CAMPO))||' = ''||COALESCE(NEW.'||LTRIM(RTRIM(:NOME_CAMPO))||',''NULL'');';
       END
     END

   END

   RETORNO = VALOR_REGISTRO||'
IF (TXT <> '''') THEN TXT = ''UPDATE '||TABELA||' SET '||PK_TABELA||' = ''''''||NEW.'||PK_TABELA||'||''''''''||TXT||'' WHERE '||PK_TABELA||' = ''''''||NEW.'||PK_TABELA||'||'''''' ;'';';

   SUSPEND;

END^


ALTER PROCEDURE SP_GERA_TRIGGERS_LOGS
RETURNS (
    RETORNO TYPE OF DM_BLOB_TEXTO)
AS
declare variable tabela char(93);
declare variable pk_tabela char(93);
BEGIN
  FOR
    SELECT RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME AS TABELA,--TABELAS
           RDB$INDEX_SEGMENTS.RDB$FIELD_NAME AS PK_TABELA--OS CAMPOS IDS
    FROM RDB$INDEX_SEGMENTS
    INNER JOIN RDB$RELATION_CONSTRAINTS ON (RDB$INDEX_SEGMENTS.RDB$INDEX_NAME = RDB$RELATION_CONSTRAINTS.RDB$INDEX_NAME)
    WHERE RDB$RELATION_CONSTRAINTS.RDB$CONSTRAINT_TYPE = 'PRIMARY KEY'
    AND ( (RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE '%$%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE 'SINCRONISMO%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE 'MENSAGEM_BANCO_DADOS%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE 'LOG_%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE '%BACKUP%'))
    INTO :TABELA,
         :PK_TABELA
  DO
  BEGIN
      FOR
        SELECT TXT
        FROM SP_CRIAR_TRIGGERS_LOGS(LTRIM(RTRIM(:TABELA)),LTRIM(RTRIM(:PK_TABELA)))
        INTO :RETORNO
      DO
      BEGIN
       --   EXECUTE STATEMENT :RETORNO;
          SUSPEND;
      END
/*
    WHEN ANY DO
    BEGIN

     exception MESSAGEM_DIVERSAS ''||:RETORNO;

    END

*/
  END
END^


ALTER PROCEDURE SP_GERA_TRIGGERS_REPLICACAO
RETURNS (
    RETORNO TYPE OF DM_BLOB_TEXTO)
AS
declare variable tabela char(93);
declare variable pk_tabela char(93);
BEGIN
--    retorno type of dm_blob_texto)
  FOR
    SELECT RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME AS TABELA,--TABELAS
           RDB$INDEX_SEGMENTS.RDB$FIELD_NAME AS PK_TABELA--OS CAMPOS IDS
    FROM RDB$INDEX_SEGMENTS
    INNER JOIN RDB$RELATION_CONSTRAINTS ON (RDB$INDEX_SEGMENTS.RDB$INDEX_NAME = RDB$RELATION_CONSTRAINTS.RDB$INDEX_NAME)
    WHERE RDB$RELATION_CONSTRAINTS.RDB$CONSTRAINT_TYPE = 'PRIMARY KEY'
    AND ( (RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE '%$%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE 'SINCRONISMO%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE 'MENSAGEM_BANCO_DADOS%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE 'LOG_%'
    AND RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME NOT LIKE '%BACKUP%'))
    INTO :TABELA,
         :PK_TABELA
  DO
  BEGIN
      FOR
        SELECT TXT
        FROM SP_GERA_TRIGGERS_TABELA(LTRIM(RTRIM(:TABELA)),LTRIM(RTRIM(:PK_TABELA)))
        INTO :RETORNO
      DO
      BEGIN
       --   EXECUTE STATEMENT :RETORNO;
          SUSPEND;
      END
   -- RETORNO = 'EXECUTE PROCEDURE SP_GERA_TRIGGERS_TABELA('''||LTRIM(RTRIM(TABELA))||''','''||LTRIM(RTRIM(PK_TABELA))||''');';
   -- EXECUTE STATEMENT RETORNO;
   -- SUSPEND;
    WHEN ANY DO
    BEGIN

     exception MESSAGEM_DIVERSAS ''||:RETORNO;

    END
  END
END^


ALTER PROCEDURE SP_GERA_TRIGGERS_TABELA (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31))
RETURNS (
    TXT VARCHAR(32700))
AS
declare variable nome_trigger varchar(31);
declare variable sql_trigger varchar(32700);
BEGIN

  NOME_TRIGGER = SUBSTR(TABELA||'_AI_SINCRONISMO',1,31);

  select retorno
  from SP_GERA_SCRIPT_INSERT_TRIGGER(:TABELA)
  into :sql_trigger;

    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE INSERT POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: '||current_timestamp||'

   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_INSERT_TRIGGER
   */
   IF (USER = ''SINCRONIZADOR'') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT(''USER_TRANSACTION'', ''USUARIO_REPLICACAO'');
   IF (COALESCE(USUARIO_REPLICACAO,'''')='''') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '||:sql_trigger||'
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
       INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
       VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,''A'',0,''NOW'',TRIM(:USUARIO_REPLICACAO));
   END
END';

   --EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;
--UPDATE

  NOME_TRIGGER = SUBSTR(TABELA||'_AU_SINCRONISMO',1,31);

  SELECT RETORNO
  FROM SP_GERA_SCRIPT_UPDATE_TRIGGER(:TABELA,:PK_TABELA)
  INTO :SQL_TRIGGER;

    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE UPDATE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: '||current_timestamp||'
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_UPDATE_TRIGGER
   */
   IF (USER = ''SINCRONIZADOR'') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT(''USER_TRANSACTION'', ''USUARIO_REPLICACAO'');
   IF (COALESCE(USUARIO_REPLICACAO,'''')='''') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = '''';
'||:sql_trigger||'
    IF (TXT<>'''') THEN
    BEGIN
       FOR
         SELECT IDSINCRONISMO_CONTROLE
         FROM SINCRONISMO_CONTROLE
         WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
         INTO :IDSINCRONISMO_CONTROLE
       DO
       BEGIN
           INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
           VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,''A'',0,''NOW'',TRIM(:USUARIO_REPLICACAO));
       END
    END
END';


   --EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;
--DELETE

  NOME_TRIGGER = SUBSTR(TABELA||'_AD_SINCRONISMO',1,31);

    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE DELETE POSITION 999
AS
DECLARE VARIABLE TXT VARCHAR(32700);
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN
   /* TRIGGER DE SINCRONISMO GERADA DIA: '||current_timestamp||'
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
   */
   IF (USER = ''SINCRONIZADOR'') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT(''USER_TRANSACTION'', ''USUARIO_REPLICACAO'');
   IF (COALESCE(USUARIO_REPLICACAO,'''')='''') THEN
     USUARIO_REPLICACAO = USER ;
   TXT = ''DELETE FROM '||:TABELA||' WHERE '||:PK_TABELA||' = ''||OLD.'||:PK_TABELA||'||'';'';
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
     INSERT INTO SINCRONISMO (IDSINCRONISMO,IDSINCRONISMO_CONTROLE,SCRIPT,STATUS,ORDEM,DATA_HORA,USUARIO)
     VALUES (0,:IDSINCRONISMO_CONTROLE,:TXT,''A'',0,''NOW'',TRIM(:USUARIO_REPLICACAO));
   END

END';


   --EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;
--BLOB

  NOME_TRIGGER = SUBSTR(TABELA||'_IU_SINC_BLOB',1,31);

FOR SELECT RETORNO
FROM SP_GERA_SCRIPT_BLOB_TRIGGER(:TABELA,:PK_TABELA)
INTO :SQL_TRIGGER
DO
BEGIN
IF (SQL_TRIGGER<>'') THEN
BEGIN
    TXT = 'CREATE OR ALTER TRIGGER '||:NOME_TRIGGER||' FOR '||:TABELA||'
ACTIVE BEFORE INSERT OR UPDATE POSITION 999
AS
DECLARE VARIABLE IDSINCRONISMO_CONTROLE INTEGER;
DECLARE VARIABLE USUARIO_REPLICACAO VARCHAR(200);
BEGIN

   /* TRIGGER DE SINCRONISMO GERADA DIA: '||current_timestamp||'
   Trigger gerada automaticamente,
   pelas procedures:
        -> SP_GERA_TRIGGERS_REPLICACAO
        -> SP_GERA_TRIGGERS_TABELA
        -> SP_GERA_SCRIPT_BLOB_TRIGGER
   */
   IF (USER = ''SINCRONIZADOR'') THEN
      EXIT;
   IF (GEN_ID(COD_UP,0)=0) THEN
      EXIT;
   USUARIO_REPLICACAO = RDB$GET_CONTEXT(''USER_TRANSACTION'', ''USUARIO_REPLICACAO'');
   IF (COALESCE(USUARIO_REPLICACAO,'''')='''') THEN
     USUARIO_REPLICACAO = USER ;
   FOR
     SELECT IDSINCRONISMO_CONTROLE
     FROM SINCRONISMO_CONTROLE
     WHERE USUARIO <> TRIM(:USUARIO_REPLICACAO)
     INTO :IDSINCRONISMO_CONTROLE
   DO
   BEGIN
'||:SQL_TRIGGER||'
   END

END';
END

END

   --EXECUTE STATEMENT TXT ;
  TXT = TXT||';
  ';
  SUSPEND;



END^


ALTER PROCEDURE SP_INSERT_SINC_BLOB (
    TABELA VARCHAR(31),
    PK_TABELA VARCHAR(31),
    IDSINCRONISMO_CONTROLE INTEGER)
RETURNS (
    RETORNO VARCHAR(32500))
AS
declare variable nome_campo varchar(31);
declare variable tipo varchar(31);
declare variable valor_insert varchar(32500);
declare variable valor_update varchar(32500);
declare variable virgula varchar(4);
declare variable valor_pk integer;
BEGIN
/*
ESTA PROCEDURE GERA O TXT PARA SER USADO NA TRIGGER DE BEFORE.
*/
    /* PROCEDURE TEXT */
    VALOR_INSERT = '';
    VALOR_UPDATE = '';
    VIRGULA = ''',';
    RETORNO = '';
    FOR
        SELECT LTRIM(RTRIM(F.RDB$FIELD_NAME)) AS CAMPO
        FROM RDB$RELATION_FIELDS F
        JOIN RDB$FIELDS FS ON (FS.RDB$FIELD_NAME = F.RDB$FIELD_SOURCE)
        JOIN RDB$TYPES T ON ((FS.RDB$FIELD_TYPE = T.RDB$TYPE) AND (T.RDB$FIELD_NAME = 'RDB$FIELD_TYPE'))
        WHERE F.RDB$RELATION_NAME = :TABELA
        AND T.RDB$TYPE_NAME = 'BLOB'
        ORDER BY F.RDB$FIELD_POSITION
       INTO :NOME_CAMPO
   DO
   BEGIN
      VALOR_UPDATE = 'SELECT '||:PK_TABELA||' FROM '||:TABELA||' WHERE '||PK_TABELA||' LIKE '''||GEN_ID(COD_UP,0)||'%'' AND '||:NOME_CAMPO||' IS NOT NULL' ;
      FOR EXECUTE STATEMENT :VALOR_UPDATE
      INTO :VALOR_PK
      DO
      BEGIN
        RETORNO = 'INSERT INTO SINCRONISMO_BLOB (IDSINCRONISMO_BLOB, IDSINCRONISMO_CONTROLE, DATA_HORA, USUARIO, TABELA, CAMPO, NOME_PK, VALOR_PK) VALUES (0, '||:IDSINCRONISMO_CONTROLE||', ''NOW'', USER, '''||:TABELA||''', '''||:NOME_CAMPO||''', '''||:PK_TABELA||''', '||:VALOR_PK||');';
        SUSPEND;
      END

   END


END^


ALTER PROCEDURE SP_LIMPA_CHAR (
    CAMPO VARCHAR(16386))
RETURNS (
    RETORNO VARCHAR(16386))
AS
declare variable var_i integer;
declare variable var_x integer;
declare variable subs varchar(1);
begin

  /* Procedure Text */
  var_i = 100;
  var_x = 0 ;
  retorno = '' ;

  while (var_x <= var_i) do
  begin
    var_x = var_x + 1 ;
    subs = substring(campo from var_x for 1);
    if (subs = '''') then
    begin
    end
    retorno = retorno || subs;
  end
  var_x = var_x + 1 ;
  retorno = retorno || substring(campo from var_x for 16286);
  suspend;

end^


ALTER PROCEDURE SP_LIMPA_SCRIPT (
    VSCRIPT VARCHAR(32000))
RETURNS (
    TEMP_VSCRIPT VARCHAR(32000))
AS
declare variable inum integer;
declare variable fnum integer;
declare variable ilen integer;
declare variable flen integer;
declare variable char_campo varchar(32000);
declare variable aspasinicio varchar(100);
declare variable aspasfim varchar(100);
declare variable fim1 varchar(100);
declare variable fim2 varchar(100);
BEGIN

    IF (:vScript like 'DELETE%')  THEN
    BEGIN
       temp_vScript = vScript;
       SUSPEND;
       EXIT;
    END
    
    IF (:VSCRIPT LIKE 'UPDATE%') THEN 
    BEGIN
        /* PROCEDURE TEXT */
        AspasInicio = '''';
        fim1 = ''',';
        fim2 = ''')';
        iNUM = 1 ;
        ilen = strlen(:AspasInicio) ;
        flen = strlen(:fim1) ;
        TEMP_vScript = '' ;
    END
    ELSE
    BEGIN
        /* PROCEDURE TEXT */
        AspasInicio = '''';
        fim1 = ''',';
        fim2 = ''')';
        iNUM = 1 ;
        ilen = strlen(:AspasInicio) ;
        flen = strlen(:fim1) ;
        TEMP_vScript = '' ;
    END
    
    WHILE (STRLEN(vScript)>=:iNUM) DO
    BEGIN
        SELECT RESULTADO_COPY FROM SP_COPY(:vScript,:iNUM,:ilen)
          INTO :CHAR_CAMPO;

        IF (CHAR_CAMPO = AspasInicio) THEN
        BEGIN

          fNUM = iNUM;
          WHILE (STRLEN(vScript)>=:fNUM) DO
          BEGIN

              SELECT RESULTADO_COPY FROM SP_COPY(:vScript,:fNUM,:flen)
                INTO :CHAR_CAMPO;
        
              IF (CHAR_CAMPO = FIM1) THEN
              BEGIN
                  fNUM = fNUM + :flen ;
                  AspasFim = FIM1;
                  break;
              END
              ELSE
              BEGIN
                  IF (CHAR_CAMPO = FIM2) THEN
                  BEGIN
                      fNUM = fNUM + :flen ;
                      AspasFim = FIM2;
                      break;
                  END
                  ELSE
                  BEGIN
                      fNUM = fNUM + 1 ;
                  END
              END

              
          END
          
          SELECT RESULTADO_COPY FROM SP_COPY(:vScript,:iNum+1,(:fNum-:iNum)-3)
          INTO :CHAR_CAMPO;

          SELECT V FROM SP_BUSCA_TROCA (:CHAR_CAMPO,'''','''''')
          INTO :CHAR_CAMPO;

          iNum = fNum ;
          
          TEMP_vScript = TEMP_vScript || AspasInicio || CHAR_CAMPO || AspasFim ;

        END
        ELSE
        BEGIN

            SELECT RESULTADO_COPY FROM SP_COPY(:vScript,:iNUM,1)
            INTO :CHAR_CAMPO;
              
            iNUM = iNUM + 1 ;
            
            TEMP_vScript = TEMP_vScript || CHAR_CAMPO ;

        END
        
        
    END
    SUSPEND;
END^


ALTER PROCEDURE SP_LISTA_MV_PESSOA_PROC (
    IDMOV_PROCEDIMENTOS INTEGER)
RETURNS (
    NOME VARCHAR(1000))
AS
BEGIN
  FOR
    SELECT ' ADVOGADO: '||A.ADVOGADO NOME
    FROM MOV_PROCEDIMENTOS_ADV MA
    JOIN ADVOGADO A ON MA.IDADVOGADO = A.ID_ADVOGADO
    WHERE IDMOV_PROCEDIMENTOS = :IDMOV_PROCEDIMENTOS
    
    UNION ALL
    
    SELECT ' FUNCIONARIO: '||F.NOME_FUNCIONARIO NOME
    FROM MOV_PROCEDIMENTOS_FUNC MF
    JOIN FUNCIONARIO F ON MF.IDFUNCIONARIO = F.ID_FUNCIONARIO
    WHERE IDMOV_PROCEDIMENTOS = :IDMOV_PROCEDIMENTOS
    
    UNION ALL
    
    SELECT ' INTERNO: '||I.NOME_INTERNO NOME
    FROM MOV_PROCEDIMENTOS_INT MI
    JOIN INTERNO I ON MI.IDINTERNO = I.ID_INTERNO
    WHERE IDMOV_PROCEDIMENTOS = :IDMOV_PROCEDIMENTOS
    
    UNION ALL
    
    SELECT ' VISITANTE: '||V.VISITANTE NOME
    FROM MOV_PROCEDIMENTOS_VIS MV
    JOIN VISITANTE V ON MV.IDVISITANTE = V.ID_VISITANTE
    WHERE IDMOV_PROCEDIMENTOS = :IDMOV_PROCEDIMENTOS
    INTO :NOME
  DO
  BEGIN
    SUSPEND;
  END
END^


ALTER PROCEDURE SP_MIGRA_CONFERE
RETURNS (
    NOME VARCHAR(100),
    PAVILHAO VARCHAR(50),
    IDPAVILHAO INTEGER,
    GALERIA VARCHAR(50),
    IDGALERIA INTEGER,
    SOLARIO VARCHAR(50),
    IDSOLARIO INTEGER,
    CELA VARCHAR(50),
    IDCELA INTEGER)
AS
BEGIN
  FOR
    SELECT NOME,
    PAVILHAO,
    (SELECT ID_PAVILHAO FROM PAVILHAO P
     WHERE p.id_up=80 and P.pavilhao =C.pavilhao) IDPAVILHAO,
    galeria, 
    (SELECT G.id_galeria FROM
     PAVILHAO P, GALERIA G
     WHERE p.id_up=80 and P.pavilhao =C.pavilhao
     AND P.id_pavilhao = G.idpavilhao
     AND G.galeria = C.galeria) IDGALERIA,
    solario, 
    (SELECT S.id_solario FROM
     PAVILHAO P, GALERIA G, SOLARIO S
     WHERE p.id_up=80 and P.pavilhao =C.pavilhao
     AND P.id_pavilhao = G.idpavilhao
     AND G.galeria = C.galeria
     AND S.idpavilhao =P.id_pavilhao
     AND S.idgaleria = G.id_galeria
     AND S.solario = C.solario) IDSOLARIO,
    CELA,
    (SELECT FIRST 1 l.id_cela FROM
     CELA L
     JOIN PAVILHAO P ON L.idpavilhao=P.id_pavilhao and P.pavilhao =C.pavilhao
     JOIN GALERIA G ON L.idgaleria=G.id_galeria and G.galeria = C.galeria
     JOIN SOLARIO S ON L.idsolario=s.id_solario and S.solario = C.solario
     WHERE p.id_up=80 and
     P.id_pavilhao = G.idpavilhao
     AND S.idpavilhao =P.id_pavilhao
     AND S.idgaleria = G.id_galeria
     AND L.cela=C.cela) IDCELA
    FROM CONFERE C
    WHERE C.pavilhao <> '[EXCLUIDO]'
    INTO :NOME,
         :PAVILHAO,
         :IDPAVILHAO,
         :GALERIA,
         :IDGALERIA,
         :SOLARIO,
         :IDSOLARIO,
         :CELA,
         :IDCELA
  DO
  BEGIN
    SUSPEND;
  END
END^


ALTER PROCEDURE SP_MIGRA_CONFERE_2
RETURNS (
    CONCATENATION VARCHAR(169))
AS
BEGIN
  FOR
    select
    'insert into cela (id_cela, cela, idsolario, idpavilhao, idgaleria) '||
    'values (0, '''||cela||''', '||idsolario||','|| idpavilhao||','|| idgaleria||');'
    from confere
    WHERE pavilhao <> '[EXCLUIDO]'
    INTO :CONCATENATION
  DO
  BEGIN
    SUSPEND;
  END
END^


ALTER PROCEDURE SP_MIGRA_CONFERE_3
RETURNS (
    IDCELA INTEGER,
    IDPAVILHAO INTEGER,
    IDGALERIA INTEGER,
    IDSOLARIO INTEGER,
    CELA VARCHAR(50),
    NOME VARCHAR(100))
AS
BEGIN
  FOR
    SELECT
    (SELECT FIRST 1 l.id_cela FROM
         CELA L
         WHERE L.idpavilhao=C.idpavilhao
         AND L.idgaleria=C.idgaleria
         AND L.idsolario=C.idsolario
         AND L.cela=C.cela) IDCELA,
    C.idpavilhao,
    C.idgaleria,
    C.idsolario,
    C.cela,
    C.nome
    FROM CONFERE C
    WHERE C.PAVILHAO <> '[EXCLUIDO]'
    INTO :IDCELA,
         :IDPAVILHAO,
         :IDGALERIA,
         :IDSOLARIO,
         :CELA,
         :NOME
  DO
  BEGIN
    SUSPEND;
  END
END^


ALTER PROCEDURE SP_MIGRA_CONFERE_4
RETURNS (
    ID_INTERNO INTEGER,
    NOME_INTERNO VARCHAR(50),
    RGI VARCHAR(30),
    IDPROFISSAO INTEGER,
    IDGALERIA INTEGER,
    IDPAVILHAO INTEGER,
    IDSOLARIO INTEGER,
    IDCELA INTEGER,
    DATA_ENTRADA TIMESTAMP,
    MAE VARCHAR(50),
    PAI VARCHAR(50),
    IDNATURALIDADE INTEGER,
    IDNACIONALIDADE INTEGER,
    IDRACA INTEGER,
    IDESCOLARIDADE INTEGER,
    ENDERECO VARCHAR(50),
    NUMERO VARCHAR(10),
    BAIRRO VARCHAR(30),
    COMPLEMENETO VARCHAR(30),
    CEP VARCHAR(8),
    IDCIDADE INTEGER,
    FONE VARCHAR(10),
    CONTATO VARCHAR(50),
    RELIGIAO VARCHAR(50),
    IDADVOGADO INTEGER,
    ID_PROCEDENCIA INTEGER,
    CONDENACAO VARCHAR(100),
    DATA_PRISAO TIMESTAMP,
    HISTORICO VARCHAR(16386),
    ST VARCHAR(8),
    SEXO VARCHAR(1),
    ID_UP INTEGER,
    IDCONDICAO_INTERNO INTEGER,
    IDDESTINO INTEGER,
    ID_FUNCIONARIO INTEGER,
    STATUS_ISOLAMENTO VARCHAR(30),
    IDSETOR_TRABALHO INTEGER,
    DATA_SETOR TIMESTAMP)
AS
BEGIN
DELETE FROM MOV_INTERNO WHERE EXISTS (SELECT NULL FROM INTERNO WHERE INTERNO.id_interno like '80%' AND INTERNO.ID_INTERNO=MOV_INTERNO.ID_INTERNO);
--DELETE FROM VISITANTE_INTERNO WHERE EXISTS (SELECT NULL FROM INTERNO WHERE ID_UP=80 AND VISITANTE_INTERNO.ID_INTERNO=INTERNO.ID_INTERNO);
DELETE FROM INTERNO WHERE id_interno like '80%';
  FOR
    SELECT 0 ID_INTERNO,
           SUBSTR(NOME,1,50) NOME_INTERNO,
           NULL RGI,
           NULL IDPROFISSAO, 
           IDGALERIA, 
           IDPAVILHAO, 
           IDSOLARIO, 
           COALESCE(IDCELA,801221),
           C.data DATA_ENTRADA,
           C.NOME_MAE MAE,
           C.NOME_PAI PAI,
           NULL IDNATURALIDADE, 
           NULL IDNACIONALIDADE, 
           NULL IDRACA, 
           NULL IDESCOLARIDADE, 
           NULL ENDERECO, 
           NULL NUMERO, 
           NULL BAIRRO, 
           NULL COMPLEMENETO, 
           NULL CEP, 
           NULL IDCIDADE, 
           NULL FONE, 
           NULL CONTATO, 
           NULL RELIGIAO, 
           NULL IDADVOGADO, 
           NULL ID_PROCEDENCIA, 
           NULL CONDENACAO, 
           C.DATA DATA_PRISAO,
           NULL HISTORICO, 
           NULL ST, 
           NULL SEXO, 
           80 ID_UP,
           NULL IDCONDICAO_INTERNO, 
           NULL IDDESTINO, 
           NULL ID_FUNCIONARIO,
           C.CAMPO1 STATUS_ISOLAMENTO,
           C.IDSETOR,
           C.data_setor
    FROM CONFERE C
    WHERE C.PAVILHAO <> '[EXCLUIDO]'
    INTO :ID_INTERNO,
         :NOME_INTERNO,
         :RGI,
         :IDPROFISSAO,
         :IDGALERIA,
         :IDPAVILHAO,
         :IDSOLARIO,
         :IDCELA,
         :DATA_ENTRADA,
         :MAE,
         :PAI,
         :IDNATURALIDADE,
         :IDNACIONALIDADE,
         :IDRACA,
         :IDESCOLARIDADE,
         :ENDERECO,
         :NUMERO,
         :BAIRRO,
         :COMPLEMENETO,
         :CEP,
         :IDCIDADE,
         :FONE,
         :CONTATO,
         :RELIGIAO,
         :IDADVOGADO,
         :ID_PROCEDENCIA,
         :CONDENACAO,
         :DATA_PRISAO,
         :HISTORICO,
         :ST,
         :SEXO,
         :ID_UP,
         :IDCONDICAO_INTERNO,
         :IDDESTINO,
         :ID_FUNCIONARIO,
         :STATUS_ISOLAMENTO,
         :IDSETOR_TRABALHO,
         :DATA_SETOR
  DO
  BEGIN

    INSERT INTO INTERNO (ID_INTERNO, NOME_INTERNO, RGI, IDPROFISSAO, IDGALERIA, IDPAVILHAO, IDSOLARIO, IDCELA, DATA_ENTRADA, MAE, PAI, IDNATURALIDADE, IDNACIONALIDADE, IDRACA, IDESCOLARIDADE, ENDERECO, NUMERO, BAIRRO, COMPLEMENETO, CEP, IDCIDADE, FONE, CONTATO, RELIGIAO, IDADVOGADO, ID_PROCEDENCIA, CONDENACAO, DATA_PRISAO, HISTORICO, ST, SEXO, ID_UP, IDCONDICAO_INTERNO, IDDESTINO, ID_FUNCIONARIO,STATUS_ISOLAMENTO, IDSETOR_TRABALHO,DATA_SETOR)
    VALUES (:ID_INTERNO, :NOME_INTERNO, :RGI, :IDPROFISSAO, :IDGALERIA, :IDPAVILHAO, :IDSOLARIO, :IDCELA, :DATA_ENTRADA, :MAE, :PAI, :IDNATURALIDADE, :IDNACIONALIDADE, :IDRACA, :IDESCOLARIDADE, :ENDERECO, :NUMERO, :BAIRRO, :COMPLEMENETO, :CEP, :IDCIDADE, :FONE, :CONTATO, :RELIGIAO, :IDADVOGADO, :ID_PROCEDENCIA, :CONDENACAO, :DATA_PRISAO, :HISTORICO, :ST, :SEXO, :ID_UP, :IDCONDICAO_INTERNO, :IDDESTINO, :ID_FUNCIONARIO,:STATUS_ISOLAMENTO,:IDSETOR_TRABALHO,:DATA_SETOR);

    SUSPEND;
  END
END^


ALTER PROCEDURE SP_ORDENA_VISITANTE
AS
declare variable ordem integer;
declare variable id_mov_diario_visitantes integer;
begin
    ordem = 0;
    for
        select mov_diario_visitantes.id_mov_diario_visitantes
        from mov_diario_visitantes
        where mov_diario_visitantes.data_visita=current_date
        and mov_diario_visitantes.cancelado is null
        and mov_diario_visitantes.id_mov_diario_visitantes like gen_id(cod_up,0)||'%'
        order by id_mov_diario_visitantes
        into :id_mov_diario_visitantes
    do
    begin
        ordem = ordem + 1 ;
        update mov_diario_visitantes set mov_diario_visitantes.ordem_visita = :ordem
        where mov_diario_visitantes.id_mov_diario_visitantes = :id_mov_diario_visitantes;
    end

end^


ALTER PROCEDURE SP_RASTREAR_MOVIMENTACAO
RETURNS (
    TOTAL_DIAS_PRISAO INTEGER,
    DATA_ENTRADA TIMESTAMP,
    DATA TIMESTAMP,
    ID_INTERNO INTEGER,
    NOME_INTERNO VARCHAR(50),
    PAVILHAO VARCHAR(50),
    GALERIA VARCHAR(50),
    SOLARIO VARCHAR(50),
    CELA VARCHAR(50),
    IDCELA INTEGER,
    ST_INTERNO VARCHAR(1),
    ULTIMA_DATA TIMESTAMP,
    DIAS_CELA INTEGER,
    TOTAL_DIAS INTEGER,
    ANO_PRESO INTEGER,
    MESES_PRESO INTEGER)
AS
declare variable primeira_data timestamp;
declare variable idmov_interno integer;
begin
  for
    select
            min(m.data_movimentacao) data,
            i.data_entrada,
            m.id_interno,
            i.nome_interno,
            p.pavilhao,
            g.galeria,
            s.solario,
            c.cela,
            m.idcela,
            m.st_interno,
            (select min(m1.data_movimentacao)
              from mov_interno m1
             where m1.id_interno=m.id_interno
             and m1.data_movimentacao>min(m.data_movimentacao)
             and (m1.idcela<>m.idcela or m1.st_interno<>m.st_interno)
            ) ultima_data
        from mov_interno m
        join interno i on m.id_interno=i.id_interno
        join cela c on m.idcela=c.id_cela
        join solario s on m.idsolario=s.id_solario
        join galeria g on m.idgaleria=g.id_galeria
        join pavilhao p on m.idpavilhao=p.id_pavilhao
        where i.nome_interno is not null
        and i.st='A'
        group by
            m.id_interno,
            i.data_entrada,
            i.nome_interno,
            p.pavilhao,
            g.galeria,
            s.solario,
            c.cela,
            m.idcela,
            m.st_interno
    into :DATA,
         :data_entrada,
         :ID_INTERNO,
         :NOME_INTERNO,
         :PAVILHAO,
         :GALERIA,
         :SOLARIO,
         :CELA,
         :IDCELA,
         :ST_INTERNO,
         :ULTIMA_DATA
  do
  begin

    select first 1 m.data_movimentacao
    from mov_interno m
    where m.id_interno=:id_interno
    order by m.data_movimentacao
    into :primeira_data;

    if (:primeira_data=:data) then
      data = :data_entrada;

    if (ULTIMA_DATA is null) then
        ULTIMA_DATA = CURRENT_DATE;

    DIAS_CELA = ULTIMA_DATA - DATA ;

    total_dias = (current_timestamp-:data_entrada);

    meses_preso = trunc(total_dias/30);

    ano_preso = trunc(total_dias/365);

    total_dias_prisao = ((current_timestamp - 1) - :data_entrada);

    suspend;

  end
end^


ALTER PROCEDURE SP_RASTREAR_PROCEDIMENTOS (
    IDMOV INTEGER)
RETURNS (
    NIVEL VARCHAR(1),
    TEM_OCORRENCIA INTEGER,
    DESCRICAO_PROCEDIMENTO VARCHAR(100),
    DESCRICAO_OCORRENCIA VARCHAR(200),
    IDMOV_PROCEDIMENTOS INTEGER,
    IDMOV_PROCEDIMENTOS_PRINCIPAL INTEGER,
    IDMOV_OCORRENCIA INTEGER,
    IDMOV_BUSCA INTEGER,
    HORA TIME)
AS
declare variable idmov_proc_padrao integer;
declare variable descricao_proc_padrao varchar(100);
BEGIN
  FOR
    SELECT 
            P.DESCRICAO,
            M.IDMOV_PROCEDIMENTOS,
            M.IDMOV_PROCEDIMENTOS_PRINCIPAL,
            COALESCE((SELECT COUNT(*) FROM MOV_OCORRENCIA O WHERE O.IDMOV_PROCEDIMENTOS=M.IDMOV_PROCEDIMENTOS),0)
        FROM MOV_PROCEDIMENTOS M
        JOIN PROCEDIMENTOS P ON (M.IDPROCEDIMENTOS=P.IDPROCEDIMENTOS) 
        WHERE M.IDMOV_PROCEDIMENTOS=:IDMOV
        AND NOT EXISTS (SELECT * FROM MOV_PROCEDIMENTOS S WHERE S.IDMOV_PROCEDIMENTOS_PRINCIPAL = :IDMOV)
    INTO :DESCRICAO_PROCEDIMENTO,
         :IDMOV_PROCEDIMENTOS,
         :IDMOV_PROCEDIMENTOS_PRINCIPAL,
         :TEM_OCORRENCIA
  DO
  BEGIN
        descricao_proc_padrao = :DESCRICAO_PROCEDIMENTO;
        idmov_proc_padrao = :IDMOV_PROCEDIMENTOS ;


        NIVEL = '1';
        IF (TEM_OCORRENCIA>0) THEN
        BEGIN
            FOR
              SELECT 'OCORRENCIA: '||O.DESCRICAO,
                     MO.IDMOV_OCORRENCIA,
                     MO.hora
              FROM OCORRENCIA O
              JOIN MOV_OCORRENCIA MO ON (O.IDOCORRENCIA=MO.IDOCORRENCIA)
              WHERE MO.IDMOV_PROCEDIMENTOS =:IDMOV_PROCEDIMENTOS
            INTO :DESCRICAO_OCORRENCIA,
                 :IDMOV_OCORRENCIA,
                 :HORA
            DO
            BEGIN

              SUSPEND;

            END

            FOR
              SELECT MO.IDMOV_OCORRENCIA
              FROM OCORRENCIA O
              JOIN MOV_OCORRENCIA MO ON (O.IDOCORRENCIA=MO.IDOCORRENCIA)
              WHERE MO.IDMOV_PROCEDIMENTOS =:IDMOV_PROCEDIMENTOS
            INTO :IDMOV_OCORRENCIA
            DO
            BEGIN
              --PROCEDIMENTOS QUE ORIGINARAM DE OCORRENCIA
              FOR
                 SELECT M.IDMOV_PROCEDIMENTOS
                 FROM MOV_PROCEDIMENTOS M
                 WHERE M.IDMOV_OCORRENCIA_ORIGEM = :IDMOV_OCORRENCIA
                 INTO :IDMOV_BUSCA
              DO
              BEGIN
                  FOR
                      SELECT 'PROCEDIMENTO: '||DESCRICAO_PROCEDIMENTO||COALESCE('>>'||DESCRICAO_OCORRENCIA,''),
                      HORA
                      FROM SP_RASTREAR_PROCEDIMENTOS(:IDMOV_BUSCA)
                      INTO :DESCRICAO_OCORRENCIA,:HORA
                  DO
                  BEGIN
                    SUSPEND;
                  END
               END


            END


        END
        ELSE
        BEGIN
          SUSPEND;
        END
  END
END^


ALTER PROCEDURE SP_RELACIONAMENTO_INTERNO (
    ID_INTERNO INTEGER,
    INTERNO_IGNORAR VARCHAR(16386))
RETURNS (
    IDORIGEM VARCHAR(12),
    NOME_ORIGEM VARCHAR(50),
    IDDESTINO VARCHAR(12),
    NOME_DESTINO VARCHAR(100),
    DESCRICAO VARCHAR(16386),
    NIVEL VARCHAR(1))
AS
DECLARE VARIABLE ID_INTERNO_RETORNO INTEGER;
DECLARE VARIABLE IDADVOGADO INTEGER;
DECLARE VARIABLE IDVISITANTE INTEGER;
DECLARE VARIABLE STM_SCRIPT VARCHAR(16000);
BEGIN
 /*
  STM_SCRIPT =  'SELECT DISTINCT
        ''I''||I.ID_INTERNO,
        ''Interno: ''||I.NOME_INTERNO,
        ''F''||COALESCE(H.ID_FUNCIONARIO,(SELECT FIRST 1 M.ID_FUNCIONARIO FROM MOV_INTERNO M WHERE M.ID_INTERNO=I.ID_INTERNO)),
        ''Func.:''||F.NOME_FUNCIONARIO,
        ''HISTORICO''
    FROM INTERNO I
        JOIN HISTORICO_INTERNO H ON (H.IDINTERNO=I.ID_INTERNO)
        JOIN FUNCIONARIO F ON (F.ID_FUNCIONARIO = COALESCE(H.ID_FUNCIONARIO,(SELECT FIRST 1 M.ID_FUNCIONARIO FROM MOV_INTERNO M WHERE M.ID_INTERNO=I.ID_INTERNO)))
    WHERE I.ID_INTERNO='||:ID_INTERNO ;


  FOR EXECUTE STATEMENT STM_SCRIPT
    INTO :IDDESTINO,
         :NOME_DESTINO,
         :IDORIGEM,
         :NOME_ORIGEM,
         :DESCRICAO
  DO
  BEGIN
    NIVEL = '0';
    SUSPEND;
  END

 */

  INTERNO_IGNORAR = COALESCE(:INTERNO_IGNORAR||',','')||:ID_INTERNO;
    
  FOR
    SELECT DISTINCT
        'I'||I.ID_INTERNO,
        'Interno: '||I.NOME_INTERNO,
        'A'||A.id_ADVOGADO,
        'Adv.:'||A.ADVOGADO,
        'ADVOGADO',
        a.id_advogado
    FROM INTERNO I
        JOIN ADVOGADO A ON (A.ID_ADVOGADO=I.IDADVOGADO)
    WHERE I.ID_INTERNO=:ID_INTERNO
    INTO :IDDESTINO,
         :NOME_DESTINO,
         :IDORIGEM,
         :NOME_ORIGEM,
         :DESCRICAO,
         :IDADVOGADO
  DO
  BEGIN
        SUSPEND;

        STM_SCRIPT =  'SELECT ID_INTERNO FROM INTERNO
           WHERE INTERNO.IDADVOGADO = '||:IDADVOGADO||'
             AND INTERNO.ID_INTERNO NOT IN ('||:INTERNO_IGNORAR||')
             UNION ALL
           SELECT ID_INTERNO FROM ADVOGADOS_INTERNOS
           WHERE ADVOGADOS_INTERNOS.ID_ADVOGADO = '||:IDADVOGADO||'
             AND ADVOGADOS_INTERNOS.ID_INTERNO NOT IN ('||:INTERNO_IGNORAR||')
           ';
    
        FOR
           EXECUTE STATEMENT STM_SCRIPT
           INTO :ID_INTERNO_RETORNO
        DO
        BEGIN
            FOR
                SELECT * FROM SP_RELACIONAMENTO_INTERNO(:ID_INTERNO_RETORNO,:INTERNO_IGNORAR)
                INTO :IDORIGEM,
                     :NOME_ORIGEM,
                     :IDDESTINO,
                     :NOME_DESTINO,
                     :DESCRICAO,
                     :NIVEL
            DO
            BEGIN
                NIVEL = '1';
                SUSPEND;
            END
        END
  END

  FOR
    SELECT DISTINCT
        'I'||I.ID_INTERNO,
        'Interno: '||I.NOME_INTERNO,
        'V'||v.id_visitante,
        'Vis.:'||v.visitante,
        'VISITANTE-'||G.GRAU_PARENTESCO,
        v.id_visitante
    FROM INTERNO I
        JOIN VISITANTE_INTERNO VI ON (VI.ID_INTERNO=I.ID_INTERNO)
        JOIN GRAU_PARENTESCO G ON (VI.ID_GRAU_PARENTESCO=G.ID_GRAU_PARENTESCO)
        JOIN VISITANTE V ON (V.ID_VISITANTE=VI.ID_VISITANTE)
    WHERE I.ID_INTERNO=:ID_INTERNO
    INTO :IDDESTINO,
         :NOME_DESTINO,
         :IDORIGEM,
         :NOME_ORIGEM,
         :DESCRICAO,
         :IDVISITANTE
  DO
  BEGIN
        SUSPEND;

        STM_SCRIPT =  'SELECT ID_INTERNO FROM VISITANTE_INTERNO V
           WHERE V.ID_VISITANTE = '||:IDVISITANTE||'
           AND V.ID_INTERNO NOT IN ('||:INTERNO_IGNORAR||')';

        FOR
           EXECUTE STATEMENT STM_SCRIPT
           INTO :ID_INTERNO_RETORNO
        DO
        BEGIN
            FOR
                SELECT * FROM SP_RELACIONAMENTO_INTERNO(:ID_INTERNO_RETORNO,:INTERNO_IGNORAR)
                INTO :IDORIGEM,
                     :NOME_ORIGEM,
                     :IDDESTINO,
                     :NOME_DESTINO,
                     :DESCRICAO,
                     :NIVEL
            DO
            BEGIN
                NIVEL = '1';
                SUSPEND;
            END
        END
  END


END^


ALTER PROCEDURE SP_REPLICACAO_ENVIO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
declare variable idsincronismo_controle integer;
declare variable idsincronismo integer;
declare variable conexao varchar(200);
declare variable script varchar(8192);
declare variable sql_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
declare variable descricao varchar(200);
declare variable num_veses integer;
BEGIN

  EXECUTANDO_ENVIO = RDB$GET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO');
  IF (TRIM(COALESCE(EXECUTANDO_ENVIO,''))= 'TRUE') THEN
  BEGIN
    EXIT;
  END

  RDB$SET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO', 'TRUE');

  IDSINCRONISMO_BLOB = -1;
  IDSINCRONISMO = -1;

  /* Loop na tabela de controle e busca as conexoes e os id para selecionar o script */
  FOR
    SELECT DESCRICAO,
      IDSINCRONISMO_CONTROLE,
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    WHERE IDSINCRONISMO_CONTROLE = :VAR_IDSINCRONISMO_CONTROLE
    INTO :DESCRICAO, :IDSINCRONISMO_CONTROLE,
         :CONEXAO
  DO
  BEGIN
      --variavel em ingles sera a usada
      LOGIN = 'SINCRONIZADOR';
      PASSWD = 'albatroz';

      /* Loop na tabela de sincronismo e busca os scrips e os id para deletar */
      FOR
        SELECT FIRST 1
          IDSINCRONISMO,
          SCRIPT
        FROM SINCRONISMO
        WHERE IDSINCRONISMO_CONTROLE = :IDSINCRONISMO_CONTROLE
        ORDER BY IDSINCRONISMO
        INTO :IDSINCRONISMO,
             :SCRIPT
      DO
      BEGIN

          EXECUTE STATEMENT :SCRIPT
          ON EXTERNAL :CONEXAO
          AS USER :LOGIN
          PASSWORD :PASSWD;


      END

      /* Loop na tabela de blob e busca os campos e os id para deletar */
      FOR
        SELECT FIRST 1
          B.IDSINCRONISMO_BLOB,
          B.TABELA,
          B.CAMPO,
          B.NOME_PK,
          B.VALOR_PK
        FROM SINCRONISMO_BLOB B
        WHERE IDSINCRONISMO_CONTROLE = :IDSINCRONISMO_CONTROLE
        INTO :IDSINCRONISMO_BLOB,
             :TABELA,
             :CAMPO,
             :NOME_PK,
             :VALOR_PK
      DO
      BEGIN
          NUM_VESES = 1 ;
          WHILE (:NUM_VESES <= 2) DO
          BEGIN
              SQL_STM = 'SELECT '||:CAMPO||' FROM '||:TABELA||' WHERE '||:NOME_PK||'='||:VALOR_PK;
    
              EXECUTE STATEMENT :SQL_STM
              INTO :VALOR_BLOB;
    
              SCRIPT = 'UPDATE '||:TABELA||' SET '||:CAMPO||'=:A WHERE '||:NOME_PK||'='||:VALOR_PK;
    
              EXECUTE STATEMENT (:SCRIPT) (A := (:VALOR_BLOB))
              ON EXTERNAL :CONEXAO
              AS USER :LOGIN
              PASSWORD :PASSWD;
              NUM_VESES = NUM_VESES + 1;
          END
      END

      DELETE FROM SINCRONISMO_BLOB
      WHERE IDSINCRONISMO_BLOB=:IDSINCRONISMO_BLOB;

      DELETE FROM SINCRONISMO
      WHERE IDSINCRONISMO=:IDSINCRONISMO;

      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:var_IDSINCRONISMO_CONTROLE,
                        'OK - Enviando: '||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS ')
      MATCHING (IDMENSAGEM_BANCO_DADOS);
  END

  WHEN ANY DO
  BEGIN
     IF (GDSCODE=335544921) then
     BEGIN

      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:VAR_IDSINCRONISMO_CONTROLE,
                        '-->ENVIO - SEM CONEXÃO COM: '||:DESCRICAO||' DATABASE:'||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS ')
       MATCHING (IDMENSAGEM_BANCO_DADOS);

     END
     ELSE
     BEGIN

       IF (GDSCODE=335544926) THEN
       BEGIN
         DELETE FROM SINCRONISMO WHERE IDSINCRONISMO=:IDSINCRONISMO;
         UPDATE BACKUP_SINCRONISMO SET ERRO='GDSCODE=335544926' WHERE IDSINCRONISMO=:IDSINCRONISMO;
       END

       UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS,
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:VAR_IDSINCRONISMO_CONTROLE,
                        '-->ERRO GDSCODE:'||GDSCODE||' - ENVIANDO CONEXÃO: '||:DESCRICAO||' DATABASE:'||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS IDSINCRONISMO='||:IDSINCRONISMO||' script:
'||:SCRIPT)
        MATCHING (IDMENSAGEM_BANCO_DADOS);
      END

  END

END^


ALTER PROCEDURE SP_REPLICACAO_ENVIO_TUDO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
declare variable idsincronismo_controle integer;
declare variable idsincronismo integer;
declare variable conexao varchar(200);
declare variable script varchar(8192);
declare variable sql_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
BEGIN

  EXECUTANDO_ENVIO = RDB$GET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO');
  IF (TRIM(COALESCE(EXECUTANDO_ENVIO,''))= 'TRUE') THEN
  BEGIN
    EXIT;
  END

  RDB$SET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO', 'TRUE');

  /* Loop na tabela de controle e busca as conexoes e os id para selecionar o script */
  FOR
    SELECT
      IDSINCRONISMO_CONTROLE,
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    WHERE IDSINCRONISMO_CONTROLE = :var_IDSINCRONISMO_CONTROLE
    INTO :IDSINCRONISMO_CONTROLE,
         :CONEXAO
  DO
  BEGIN
      --variavel em ingles sera a usada
      LOGIN = 'SINCRONIZADOR';
      PASSWD = 'albatroz';

      /* Loop na tabela de sincronismo e busca os scrips e os id para deletar */
      FOR
        SELECT
          IDSINCRONISMO,
          SCRIPT
        FROM SINCRONISMO
        WHERE IDSINCRONISMO_CONTROLE = :IDSINCRONISMO_CONTROLE
        ORDER BY IDSINCRONISMO
        INTO :IDSINCRONISMO,
             :SCRIPT
      DO
      BEGIN

          EXECUTE STATEMENT :SCRIPT
          ON EXTERNAL :CONEXAO
          AS USER :LOGIN
          PASSWORD :PASSWD;

          DELETE FROM SINCRONISMO
          WHERE IDSINCRONISMO=:IDSINCRONISMO;

      END

      /* Loop na tabela de blob e busca os campos e os id para deletar */
      FOR
        SELECT
          B.IDSINCRONISMO_BLOB,
          B.TABELA,
          B.CAMPO,
          B.NOME_PK,
          B.VALOR_PK
        FROM SINCRONISMO_BLOB B
        WHERE IDSINCRONISMO_CONTROLE = :IDSINCRONISMO_CONTROLE
        INTO :IDSINCRONISMO_BLOB,
             :TABELA,
             :CAMPO,
             :NOME_PK,
             :VALOR_PK
      DO
      BEGIN

          SQL_STM = 'SELECT '||:CAMPO||' FROM '||:TABELA||' WHERE '||:NOME_PK||'='||:VALOR_PK;

          EXECUTE STATEMENT :SQL_STM
          INTO :VALOR_BLOB;

          SCRIPT = 'UPDATE '||:TABELA||' SET '||:CAMPO||'=:A WHERE '||:NOME_PK||'='||:VALOR_PK;

          EXECUTE STATEMENT (:SCRIPT) (A := (:VALOR_BLOB))
          ON EXTERNAL :CONEXAO
          AS USER :LOGIN
          PASSWORD :PASSWD;

          DELETE FROM SINCRONISMO_BLOB
          WHERE IDSINCRONISMO_BLOB=:IDSINCRONISMO_BLOB;

      END


      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:var_IDSINCRONISMO_CONTROLE,
                        'OK - Enviando: '||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS ')
      MATCHING (IDMENSAGEM_BANCO_DADOS);
  END
/*
  WHEN ANY DO
  BEGIN
      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:var_IDSINCRONISMO_CONTROLE,
                        '-->ERRO - Enviando: '||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS '||' script:
'||:SCRIPT)
      MATCHING (IDMENSAGEM_BANCO_DADOS);

  END
  */
END^


ALTER PROCEDURE SP_REPLICACAO_RECEBIMENTO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
declare variable idsincronismo_controle integer;
declare variable idsincronismo integer;
declare variable script varchar(8192);
declare variable sql_stm varchar(8192);
declare variable exec_stm varchar(8192);
declare variable delete_sincronismo varchar(8192);
declare variable delete_sincronismo_blob varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable usuario varchar(200);
declare variable conexao varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable descricao varchar(200);
declare variable num_veses integer;
BEGIN
  /* Loop na tabela de controle e busca as conexoes e os id para selecionar o script */
  exec_stm = '';
  DELETE_SINCRONISMO = '';
  DELETE_SINCRONISMO_BLOB = '';
  FOR
    SELECT
      USUARIO, 
      CONEXAO,
      DESCRICAO
    FROM SINCRONISMO_CONTROLE
    where idsincronismo_controle = :var_idsincronismo_controle
    INTO :USUARIO,
         :CONEXAO,
         :DESCRICAO
  DO
  BEGIN

        RDB$SET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO', :USUARIO);

        --PARA ACHAR ESTE BANCO NO OUTRO BANCO
        LOGIN = 'SINCRONIZADOR';
        PASSWD = 'albatroz';

        SQL_STM = 'SELECT FIRST 1
                      IDSINCRONISMO_CONTROLE
                  FROM SINCRONISMO_CONTROLE ';
        EXECUTE STATEMENT :SQL_STM
        ON EXTERNAL :CONEXAO
        AS USER :LOGIN
        PASSWORD :PASSWD
        INTO :IDSINCRONISMO_CONTROLE;

          IDSINCRONISMO = 0;
          /* Loop na tabela de sincronismo e busca os scrips e os id para deletar*/
          SQL_STM = 'SELECT FIRST 1
                        IDSINCRONISMO,
                        SCRIPT
                     FROM SINCRONISMO
                     WHERE IDSINCRONISMO_CONTROLE =  '||:IDSINCRONISMO_CONTROLE||' ORDER BY IDSINCRONISMO';
          FOR
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :IDSINCRONISMO,
                 :SCRIPT
          DO
          BEGIN

              EXECUTE STATEMENT :SCRIPT ;
              --DELETE DO SCRIPT DE SINCRONISMO DENTRO DA TRIGGER
--              DELETE_SINCRONISMO = 'DELETE FROM SINCRONISMO WHERE IDSINCRONISMO='||:IDSINCRONISMO;

          END
    
          /* Loop na tabela de blob e busca os campos e os id para deletar */
          SQL_STM = 'SELECT FIRST 1
                      B.IDSINCRONISMO_BLOB,
                      B.TABELA,
                      B.CAMPO,
                      B.NOME_PK,
                      B.VALOR_PK
                     FROM SINCRONISMO_BLOB B
                     WHERE IDSINCRONISMO_CONTROLE =  '||:IDSINCRONISMO_CONTROLE;
         FOR
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :IDSINCRONISMO_BLOB,
                 :TABELA,
                 :CAMPO,
                 :NOME_PK,
                 :VALOR_PK
          DO
          BEGIN
              SQL_STM = 'SELECT '||:CAMPO||' FROM '||:TABELA||' WHERE '||:NOME_PK||'='||:VALOR_PK;

              EXECUTE STATEMENT :SQL_STM
              ON EXTERNAL :CONEXAO
              AS USER :LOGIN
              PASSWORD :PASSWD
              INTO :VALOR_BLOB;
    
              SCRIPT = 'UPDATE '||:TABELA||' SET '||:CAMPO||'=:A WHERE '||:NOME_PK||'='||:VALOR_PK;
    
              EXECUTE STATEMENT (:SCRIPT) (A := (:VALOR_BLOB));

              DELETE_SINCRONISMO_BLOB = 'DELETE FROM SINCRONISMO_BLOB WHERE IDSINCRONISMO_BLOB='||:IDSINCRONISMO_BLOB;

          END

      IF (DELETE_SINCRONISMO_BLOB <> '') THEN
      BEGIN
          EXECUTE STATEMENT :DELETE_SINCRONISMO_BLOB
          ON EXTERNAL :CONEXAO
          AS USER :LOGIN
          PASSWORD :PASSWD;
      END

--        exception messagem_diversas '';
      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS,
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:var_IDSINCRONISMO_CONTROLE*(-1),
                        'OK - Recebendo: '||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS ' )
      MATCHING (IDMENSAGEM_BANCO_DADOS);

  END

    --EXCEPTION MESSAGEM_DIVERSAS 'GDSCODE='||GDSCODE;
    if (IDSINCRONISMO>0) then
    begin
--        exception messagem_diversas :idsincronismo;
        INSERT INTO REPLICACAO_RECEBIDA (IDREPLICACAO_RECEBIDA, 
                                       IDSINCRONISMO_CONTROLE, 
                                       IDSINCRONISMO_ORIGEM, 
                                       DATA_HORA)
        VALUES (0,
              :VAR_IDSINCRONISMO_CONTROLE,
              :IDSINCRONISMO,
              CURRENT_TIMESTAMP);
    end

  WHEN ANY DO
  BEGIN
     IF (GDSCODE=335544921) then
     BEGIN
      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:VAR_IDSINCRONISMO_CONTROLE*(-1),
                        '-->SEM CONEXÃO COM: '||:DESCRICAO||' DATABASE:'||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS ')
      MATCHING (IDMENSAGEM_BANCO_DADOS);

     END
     ELSE
     BEGIN
      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:VAR_IDSINCRONISMO_CONTROLE*(-1),
                        '-->ERRO - RECEBENDO: '||:DESCRICAO||' IDSINCRONISMO='||:IDSINCRONISMO||' DATABASE:'||:CONEXAO||' SQLCODE:'||SQLCODE||' gdsCODE:'||GDSCODE||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS '||' script:
'||COALESCE(:SCRIPT,:EXEC_STM,'ERRO CONEXAO'))
      MATCHING (IDMENSAGEM_BANCO_DADOS);
     END

  END


END^


ALTER PROCEDURE SP_REPLICACAO_RECEBIMENTO_TUDO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
AS
declare variable idsincronismo_controle integer;
declare variable idsincronismo integer;
declare variable conexao varchar(200);
declare variable script varchar(8192);
declare variable sql_stm varchar(8192);
declare variable exec_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable usuario varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
BEGIN
  EXECUTANDO_ENVIO = RDB$GET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO');
  IF (TRIM(COALESCE(EXECUTANDO_ENVIO,''))= 'TRUE') THEN
  BEGIN
    EXIT;
  END

  RDB$SET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO', 'TRUE');

  /* Loop na tabela de controle e busca as conexoes e os id para selecionar o script */
  FOR
    SELECT
      USUARIO, 
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    where idsincronismo_controle = :var_idsincronismo_controle
    INTO :USUARIO,
         :CONEXAO
  DO
  BEGIN

        RDB$SET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO', :USUARIO);

        --PARA ACHAR ESTE BANCO NO OUTRO BANCO
        LOGIN = 'SINCRONIZADOR';
        PASSWD = 'albatroz';

        SQL_STM = 'SELECT FIRST 1
                      IDSINCRONISMO_CONTROLE
                  FROM SINCRONISMO_CONTROLE ';

        EXECUTE STATEMENT :SQL_STM
        ON EXTERNAL :CONEXAO
        AS USER :LOGIN
        PASSWORD :PASSWD
        INTO :IDSINCRONISMO_CONTROLE;

          /* Loop na tabela de sincronismo e busca os scrips e os id para deletar*/
          SQL_STM = 'SELECT
                        IDSINCRONISMO,
                        SCRIPT
                     FROM SINCRONISMO
                     WHERE IDSINCRONISMO_CONTROLE =  '||:IDSINCRONISMO_CONTROLE|| ' ORDER BY IDSINCRONISMO';
          FOR
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :IDSINCRONISMO,
                 :SCRIPT
          DO
          BEGIN
    
              EXECUTE STATEMENT :SCRIPT ;
    
              EXEC_STM = 'DELETE FROM SINCRONISMO WHERE IDSINCRONISMO='||:IDSINCRONISMO;

              EXECUTE STATEMENT :EXEC_STM
              ON EXTERNAL :CONEXAO
              AS USER :LOGIN
              PASSWORD :PASSWD;
    
          END
    
          /* Loop na tabela de blob e busca os campos e os id para deletar */
          SQL_STM = 'SELECT
                      B.IDSINCRONISMO_BLOB,
                      B.TABELA,
                      B.CAMPO,
                      B.NOME_PK,
                      B.VALOR_PK
                     FROM SINCRONISMO_BLOB B
                     WHERE IDSINCRONISMO_CONTROLE =  '||:IDSINCRONISMO_CONTROLE;
          FOR
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :IDSINCRONISMO_BLOB,
                 :TABELA,
                 :CAMPO,
                 :NOME_PK,
                 :VALOR_PK
          DO
          BEGIN
    
              SQL_STM = 'SELECT '||:CAMPO||' FROM '||:TABELA||' WHERE '||:NOME_PK||'='||:VALOR_PK;

              EXECUTE STATEMENT :SQL_STM
              ON EXTERNAL :CONEXAO
              AS USER :LOGIN
              PASSWORD :PASSWD
              INTO :VALOR_BLOB;
    
              SCRIPT = 'UPDATE '||:TABELA||' SET '||:CAMPO||'=:A WHERE '||:NOME_PK||'='||:VALOR_PK;
    

              EXECUTE STATEMENT (:SCRIPT) (A := (:VALOR_BLOB));
    
              EXEC_STM = 'DELETE FROM SINCRONISMO_BLOB WHERE IDSINCRONISMO_BLOB='||:IDSINCRONISMO_BLOB;

              EXECUTE STATEMENT :EXEC_STM
              ON EXTERNAL :CONEXAO
              AS USER :LOGIN
              PASSWORD :PASSWD;

          END

      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:var_IDSINCRONISMO_CONTROLE*(-1),
                        'OK - Recebendo: '||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS ' )
      MATCHING (IDMENSAGEM_BANCO_DADOS);

  END
/*
  WHEN ANY DO
  BEGIN
      UPDATE OR INSERT INTO MENSAGEM_BANCO_DADOS (IDMENSAGEM_BANCO_DADOS, 
                                                  MENSAGEM_BANCO_DADOS)
                VALUES (:var_IDSINCRONISMO_CONTROLE*(-1),
                        '-->ERRO - Recebendo: '||:CONEXAO||' DATA: '
                        ||EXTRACT (DAY FROM CURRENT_DATE)||'/'
                        ||EXTRACT (MONTH FROM CURRENT_DATE)||'/'
                        ||EXTRACT (YEAR FROM CURRENT_DATE)
                        ||' AS '||CURRENT_TIME||'HS '||' script:
'||COALESCE(:SCRIPT,:EXEC_STM,'ERRO CONEXAO'))
      MATCHING (IDMENSAGEM_BANCO_DADOS);

  END
*/
END^


ALTER PROCEDURE SP_RETORNA_TEXTO (
    IPTEXT VARCHAR(32000),
    IPSPLITCHARS VARCHAR(20))
RETURNS (
    OPTEXT VARCHAR(32000))
AS
declare variable vcurrchar varchar(20);
declare variable vidx integer;
declare variable vlen integer;
declare variable vtam integer;
BEGIN
-- if the text is null/blank then exit
vLen = STRLEN(ipTEXT);
vtam = STRLEN(ipsplitchars);

IF (ipTEXT IS NULL OR ipTEXT = '') THEN
BEGIN
SUSPEND;
EXIT;
END

-- default to spaces and line sep if no split char defined
IF ((ipSPLITCHARS IS NULL) OR (ipSPLITCHARS = '')) THEN
ipSPLITCHARS = ' ' || ASCII_CHAR(13) || ASCII_CHAR(10);


/* were starting with the first character and
on the first octet */
vIDX = 1;
opTEXT = '';

-- get the 1st char from the string
vCurrChar = CAST(SUBSTRING(ipTEXT FROM :vIDX FOR :vtam) AS VARCHAR(20));

WHILE (vIDX <= vLen) DO
BEGIN
    -- is it a seperator char?
    IF (ipSPLITCHARS CONTAINING vCURRCHAR) THEN
    BEGIN
        opTEXT = SUBSTRING(ipTEXT FROM :vIDX FOR :vlen);
        
        -- return the current text, if there is any
        IF (opTEXT <> '') THEN
          SUSPEND;
        BREAK;
    END
    -- increment the char index
    vIDX = vIDX + 1;
    
    -- get the Nth char from the string
    vCurrChar = CAST(SUBSTRING(ipTEXT FROM :vIDX FOR :vtam) AS VARCHAR(20));
END

END^


ALTER PROCEDURE SP_SINCRONISMO_OUTRA_UP (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
RETURNS (
    IDSINCRONISMO INTEGER,
    SCRIPT VARCHAR(8192))
AS
declare variable idsincronismo_controle integer;
declare variable conexao varchar(200);
declare variable sql_stm varchar(8192);
declare variable exec_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable usuario varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
BEGIN
  EXECUTANDO_ENVIO = RDB$GET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO');
  IF (TRIM(COALESCE(EXECUTANDO_ENVIO,''))= 'TRUE') THEN
  BEGIN
    EXIT;
  END

  RDB$SET_CONTEXT('USER_TRANSACTION', 'EXECUTANDO_ENVIO', 'TRUE');

  /* Loop na tabela de controle e busca as conexoes e os id para selecionar o script */
  FOR
    SELECT
      USUARIO, 
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    where idsincronismo_controle = :var_idsincronismo_controle
    INTO :USUARIO,
         :CONEXAO
  DO
  BEGIN

        RDB$SET_CONTEXT('USER_TRANSACTION', 'USUARIO_REPLICACAO', :USUARIO);

        --PARA ACHAR ESTE BANCO NO OUTRO BANCO
        LOGIN = 'SYSDBA';
        PASSWD = 'masterkey';

        SQL_STM = 'SELECT FIRST 1
                      IDSINCRONISMO_CONTROLE
                  FROM SINCRONISMO_CONTROLE ';

        EXECUTE STATEMENT :SQL_STM
        ON EXTERNAL :CONEXAO
        AS USER :LOGIN
        PASSWORD :PASSWD
        INTO :IDSINCRONISMO_CONTROLE;

          /* Loop na tabela de sincronismo e busca os scrips e os id para deletar*/
          SQL_STM = 'SELECT
                        IDSINCRONISMO,
                        SCRIPT
                     FROM SINCRONISMO
                     WHERE IDSINCRONISMO_CONTROLE =  '||:IDSINCRONISMO_CONTROLE||' ORDER BY IDSINCRONISMO';
          FOR
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :IDSINCRONISMO,
                 :SCRIPT
          DO
          BEGIN
            SUSPEND;
          END

  END
END^


ALTER PROCEDURE SP_SINCRONIZA_GENERATOR
AS
declare variable tabela varchar(1000);
declare variable sincroniza varchar(1000);
declare variable idtabela integer;
declare variable rdb$relation_name char(31);
declare variable rdb$field_name char(31);
declare variable rdb$generator_name char(31);
declare variable chave_sinc varchar(20);
declare variable sidtabelas varchar(30);
declare variable num_casas integer;
declare variable tem_trigger integer;
declare variable codigo integer;
declare variable nome_trigger varchar(31);
BEGIN


  CHAVE_SINC = GEN_ID(cod_up,0);

  FOR
    SELECT TRIM(RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME),--TABELAS
           TRIM(RDB$INDEX_SEGMENTS.RDB$FIELD_NAME),--OS CAMPOS IDS
           TRIM(RDB$GENERATORS.RDB$GENERATOR_NAME)--NOME DOS GENERATOR
    FROM RDB$GENERATORS
       INNER JOIN RDB$INDEX_SEGMENTS ON (RTRIM( RDB$GENERATORS.RDB$GENERATOR_NAME ) = RTRIM( RDB$INDEX_SEGMENTS.RDB$FIELD_NAME ))
       INNER JOIN RDB$RELATION_CONSTRAINTS ON (RDB$INDEX_SEGMENTS.RDB$INDEX_NAME = RDB$RELATION_CONSTRAINTS.RDB$INDEX_NAME)
    WHERE RDB$RELATION_CONSTRAINTS.RDB$CONSTRAINT_TYPE = 'PRIMARY KEY'
          AND RDB$INDEX_SEGMENTS.RDB$FIELD_NAME LIKE 'ID%'
--          and RDB$RELATION_CONSTRAINTS.RDB$RELATION_NAME = 'VISITANTE'

    INTO
      :RDB$RELATION_NAME,
      :RDB$FIELD_NAME,
      :RDB$GENERATOR_NAME
  DO
  BEGIN --BUSCA O ID MAIOR QUE TEM NA TABELA

       TEM_TRIGGER = 0 ;

       IF (GEN_ID(cod_up,0) > 0) THEN
       BEGIN
          NOME_TRIGGER = SUBSTR(LTRIM(RTRIM(RDB$RELATION_NAME))||'_AI_SINCRONISMO',1,31);
        
          SELECT COALESCE(COUNT(*),0)
          FROM RDB$TRIGGERS
          WHERE RDB$TRIGGER_NAME = :NOME_TRIGGER AND RDB$RELATION_NAME = LTRIM(RTRIM(:RDB$RELATION_NAME))
          INTO :TEM_TRIGGER ;

       END

        IF (TEM_TRIGGER>0) THEN
        BEGIN

          TABELA = 'SELECT MAX('||RTRIM(:RDB$FIELD_NAME)||') FROM '||:RDB$RELATION_NAME
            ||' WHERE '||RTRIM(:RDB$FIELD_NAME)||' LIKE '''
            ||GEN_ID(cod_up,0)||'%'' ' ;

        END
        ELSE
        BEGIN
          TABELA = 'SELECT MAX('||RTRIM(:RDB$FIELD_NAME)||') FROM '||:RDB$RELATION_NAME;
        END

        FOR EXECUTE STATEMENT TABELA
        INTO :IDTABELA
        DO
        BEGIN
           IF (IDTABELA IS NULL) THEN
           BEGIN
              IDTABELA = 0 ;
           END--ATUALIZA O GENERATOR

          IF (TEM_TRIGGER > 0) THEN
          BEGIN
              SIDTABELAS = LTRIM(RTRIM(CAST(IDTABELA AS VARCHAR(30))));
              NUM_CASAS = STRLEN(:CHAVE_SINC);
              IF ((NUM_CASAS+1) <= STRLEN(:SIDTABELAS)) THEN
              BEGIN
                  IDTABELA = SUBSTR(SIDTABELAS,NUM_CASAS+1,STRLEN(:SIDTABELAS));
                  codigo = SUBSTR(SIDTABELAS,2,STRLEN(:SIDTABELAS));
              END
          END

           SINCRONIZA = 'SET GENERATOR '||RTRIM( RDB$GENERATOR_NAME )||' TO '||IDTABELA||';' ;
           EXECUTE STATEMENT SINCRONIZA ;

        END
  END

END^


ALTER PROCEDURE SP_TESTE_COMUNICACAO (
    VAR_IDSINCRONISMO_CONTROLE INTEGER)
RETURNS (
    IDSINCRONISMO_CONTROLE INTEGER)
AS
declare variable conexao varchar(200);
declare variable sql_stm varchar(8192);
declare variable exec_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable usuario varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
BEGIN



        --PARA ACHAR ESTE BANCO NO OUTRO BANCO
        LOGIN = 'SYSDBA';
        PASSWD = 'masterkey';
        CONEXAO = '172.29.12.207:SIAP';

        SQL_STM = 'SELECT FIRST 1 ID_UP FROM UNIDADE_PENAL ';
        for
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :IDSINCRONISMO_CONTROLE
        do
        begin
          suspend;
        end


END^


ALTER PROCEDURE SP_TESTE_REPLICACAO
RETURNS (
    MENSAGEM VARCHAR(100))
AS
begin
mensagem = 'teste';
suspend;
exception messagem_diversas 'erro';
mensagem = 'teste2';
suspend;
when any do
begin
mensagem = 'teste3';
suspend;

end
end^


ALTER PROCEDURE SP_TOTALIZAR_INTERNO_UP
RETURNS (
    CONEXAO VARCHAR(200),
    ID_UP INTEGER,
    TOTAL INTEGER)
AS
declare variable sql_stm varchar(8192);
declare variable exec_stm varchar(8192);
declare variable idsincronismo_blob integer;
declare variable tabela varchar(31);
declare variable campo varchar(31);
declare variable nome_pk varchar(31);
declare variable valor_pk varchar(31);
declare variable valor_blob type of dm_foto;
declare variable usuario varchar(200);
declare variable login varchar(200);
declare variable passwd varchar(200);
declare variable executando_envio varchar(200);
BEGIN



        --PARA ACHAR ESTE BANCO NO OUTRO BANCO
        LOGIN = 'SYSDBA';
        PASSWD = 'masterkey';
        conexao = 'BRASILIA'   ;

        SQL_STM = 'SELECT ID_UP, COUNT(*) FROM INTERNO WHERE ST=''A'' AND COALESCE(id_up,0)>0 GROUP BY ID_UP';

    FOR
        EXECUTE STATEMENT :SQL_STM
        INTO :ID_UP,  :TOTAL
    DO
    BEGIN
      SUSPEND;
    END
    
  FOR
    SELECT descricao,
      CONEXAO
    FROM SINCRONISMO_CONTROLE
    INTO :executando_envio,:CONEXAO
  DO
  BEGIN
        FOR
            EXECUTE STATEMENT :SQL_STM
            ON EXTERNAL :CONEXAO
            AS USER :LOGIN
            PASSWORD :PASSWD
            INTO :ID_UP,  :TOTAL
        DO
        BEGIN
          conexao = executando_envio;
          SUSPEND;
        END
  END

END^



SET TERM ; ^


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

